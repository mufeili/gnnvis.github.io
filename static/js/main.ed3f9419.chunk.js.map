{"version":3,"sources":["components/logo2.png","components/DataRuns/PSView/d3.parsets.js","components/DataRuns/PSView/mdsjs.js","components/DataRuns/PSView/d3-lasso.js","components/DataRuns/PSView/tsne.js","components/DataRuns/GraphView/ForceDirectedGraphCanvas.tsx","helper/index.tsx","components/DataRuns/GraphView/GraphView.tsx","components/DataRuns/GraphView/index.tsx","actions/index.tsx","constants/index.tsx","container/GraphViewContainer.tsx","components/DataRuns/MessagePassingView/RadialTree.tsx","components/DataRuns/MessagePassingView/MessagePassingView.tsx","components/DataRuns/MessagePassingView/index.tsx","components/DataRuns/EmbeddingView/ScatterPlot.tsx","container/MessagePassingViewContainer.tsx","components/DataRuns/EmbeddingView/EmbeddingView.tsx","components/DataRuns/EmbeddingView/index.tsx","components/DataRuns/FeatureMatrixView/Matrix.tsx","container/EmbeddingViewContainer.tsx","container/MatrixContainer.tsx","components/DataRuns/FeatureMatrixView/BrushBarChart.tsx","container/BrushBarChartContainer.tsx","components/DataRuns/FeatureMatrixView/IndentedTree.tsx","container/IndentedTreeContainer.tsx","components/DataRuns/FeatureMatrixView/index.tsx","components/DataRuns/FeatureMatrixView/FeatureMatrixView.tsx","container/FeatureMatrixContainer.tsx","service/dataService.tsx","components/DataRuns/ControlPanel/DataSelector.tsx","container/DataSelectorContainer.tsx","components/DataRuns/ControlPanel/ControlPanel.tsx","components/DataRuns/ControlPanel/index.tsx","container/ControlPanelContainer.tsx","components/DataRuns/PSView/ParallelSets.tsx","container/ParallelSetsContainer.tsx","components/DataRuns/PSView/PSViewNodeStatistic.tsx","container/PSViewNodeStatisticContainer.tsx","components/DataRuns/PSView/index.tsx","components/DataRuns/PSView/PSView.tsx","container/PSViewContainer.tsx","components/DataRuns/PSView/ProjectionView.tsx","components/DataRuns/PSView/SelectedNodeList.tsx","container/SelectedNodeListContainer.tsx","components/DataRuns/index.tsx","components/DataRuns/DataRuns.tsx","container/DataRunsContainer.tsx","components/App.tsx","serviceWorker.ts","reducer/index.tsx","index.tsx"],"names":["module","exports","d3","require","autoDimensions","d","length","keys","sort","cancelEvent","event","stopPropagation","preventDefault","dimensionName","name","getTotal","dimensions","categories","reduce","a","count","parsets","value_","width","height","tension0","dispatch","dimensions_","dimensionFormat","String","tooltip_","defaultTooltip","categoryTooltip","defaultCategoryTooltip","spacing","tension","duration","d3_rebind","target","source","method","value","apply","arguments","d3_functor","v","selection","each","data","i","nodes","total","ribbon","ribbonEnter","g","select","this","ordinal","scaleOrdinal","dragging","dimensionNames","call","tree","children","window","on","parsetsId","unhighlight","selectAll","enter","append","attr","dimension","cache","forEach","hasOwnProperty","push","compareY","path","split","node","n","p","buildTree","map","t","c","dim","k","b","domain","range","layout","dEnter","y","merge","y0","x0","x","textEnter","text","dimensionFormatName","drag","remove","updateCategories","updateRibbons","transition","translateY","tween","ribbonTweenY","filter","r","ribbonPath","dy","sortBy","exit","updateDimensions","tensionTween","interpolateNumber","type","f","direction","__direction","major","mouse","mouseEnter","unselectedRibbon","classed","highlight","showTooltip","highlightAndSelect","ribbonPathStatic","ribbonTweenX","s","j","ancestors","recurse","shift","parent","active","indexOf","parentNode","appendChild","tooltip","style","category","categoryEnter","dx","e","textContent","w","getComputedTextLength","lo","hi","mid","getSubStringLength","substr","truncateText","rebind","_","body","html","m","ease","parsetsEase","nd","rollup","child","in","out","depth","ribbonPathString","sx","sy","sdx","tx","ty","tdx","m0","m1","join","NaN","percent","format","comma","easeElastic","root","zeroCounts","unshift","thatMDS","Matrix","mat","rows","cols","isQuadratic","prototype","noNaNs","someRows","cb","pos","subarray","everyRows","row","ix","rowsIter","rowIter","colIter","col","getUnsafe","createArray","size","byteLength","Float64Array","Float32Array","DEBUG","arr","Number","isNaN","Error","noZeros","onlyPositive","CALL_ASYNC","setTimeout","getCallDirect","__continuation","cc","pca","positions","res","pcaAsync","argCall","centered","colCenter","powerIterAsync","pca0","removeComponent","pca1","GRAM_SCHMIDT_EPS","comp","proj","vec","from","sub","fromSub","len","uv","uu","Math","abs","isFinite","console","warn","nextMat","curPos","normalizeVec","pcaPositions","mul","landmarkMDS","dist","dims","landmarkMDSAsync","landmarkMatrix","perm","Uint32Array","lm","mPos","landmarkResult","eigenVecs","eigenVals","distSq","squareElements","mean","tmp","div","sqrt","tPos","cur","doubleCenter","scale","eigenAsync","to","sum","lengthSq","prod","vecA","fromA","vecB","fromB","posA","posB","xcopy","fromVec","fromStart","toVec","toStart","fromPos","toPos","convertToMatrix","arrs","useFloat32","eye","min","pivotRandom","pivots","pivot","random","distance","toString","iter","matB","add","neg","avg","rowCenter","colA","colB","EIGEN_EPS","EIGEN_ITER","EIGEN_ITER_ASYNC","eigen","content","ePos","innerLoop","iterate","q","rix","cix","powerIter","POSITIVE_INFINITY","stop","nl","matA","__","targetArea","items","closePathDistance","closePathSelect","isPathClosed","hoverSelect","start","draw","end","lasso","_this","tpath","origin","torigin","drawnCoords","dyn_path","close_path","origin_node","dragAction","__lasso","possible","selected","loopSelect","box","getBoundingClientRect","lassoPoint","round","left","top","sourceEvent","touches","clientX","clientY","pow","close_draw_path","classifyPoint","possibleItems","selectedItems","notPossibleItems","notSelectedItems","types","tsnejs","REVISION","global","assert","condition","message","getopt","opt","field","defaultval","return_v","v_val","randn","mu","std","gaussRandom","u","log","zeros","ArrayBuffer","Array","randn2d","uses","xhere","L2","x1","x2","D","x1i","x2i","d2p","perplexity","tol","Nf","N","floor","Htarget","P","prow","betamin","Infinity","betamax","beta","done","num","psum","pj","exp","Hhere","Pout","N2","max","sign","tSNE","epsilon","initDataRaw","X","dists","xtod","initSolution","initDataDist","Y","gains","ystep","getSolution","step","cg","costGrad","cost","grad","ymean","gid","sid","gainid","newgain","newsid","debugGrad","yold","cg0","cg1","analytic","numerical","pmul","Qu","qsum","dsum","dhere","qu","NN","Q","gsum","premult","lib","ForceDirectedGraphCanvas","props","global_simulation","saved_transform","refresh_number","updateTransform","bind","state","renderCanvas","prevProps","prevState","graph_json","transform","onNodeClick","nodenum","enabledForceDirected","enable_forceDirected","neighborSet","NeighborSet","colorLegend","pieName","pieLegend","pie_name","configuration","radius","inner_radius","graphWidth","context","getContext","middleCanvas","middle_context","eventCanvas","simulation","forceSimulation","force","forceCenter","forceX","strength","forceY","forceManyBody","forceLink","id","alphaTarget","alphaDecay","legend_pie_y","top_svg","legend_svg","arcs","pie","startAngle","PI","endAngle","index","ori_arcs","legend_pie_all","legend_pie","legend_Color","legend_text_setting","background_enter","background","arc","innerRadius","outerRadius","getArc","start_point","sin","cos","middle_point","end_point","nodelist","note","constructPathOnNodeList","gt_x","gt_y","max_text_length","legend_color_width","legend_color_height","legend_color_y","legend_color_svg","legend_rect","row_legend_color","color","g_row_legend_color","zoomIdentity","tempData","event_canvas","order_determine","hover_cons_a","hover_cons","hover_cons_b","determineSubject","mouse_x","mouse_y","invertX","invertY","newNodeList","slice","outer_radius_node","judgeHoveredFlag","bool","xy","obj","defaultPrevented","mouseCoordinates","handleMouseMove","defaultUpdateFlag","updateFlag","hovered","hiddenTooltip","middleCanvasSimulationUpdate","target_id","neighbor_id","drawCircleStroke","lineWidth","strokeStyle","beginPath","stroke","drawCircle","fillStyle","fill","drawOnePie","moveTo","closePath","drawNodeGlyph","colorlist","outer_radius","enableStroke","drawLine","y1","y2","lineTo","simulationUpdate","save","clearRect","translate","links","node_inner_radius","node_radius","node_outer_radius","restore","judgeHovered","real_color","zoom","scaleExtent","initGraph","className","xmlns","React","d3_10color","GREEN","BLUE","RED","GRAY","getLinearColor","ColorList","totalColor","divide","location","adjusted_offset","getGradientColor","startColor","endColor","colorRgb","sColor","toLowerCase","test","sColorNew","concat","sColorChange","parseInt","replace","startRGB","startR","startG","startB","endRGB","endR","endG","endB","sG","sB","R","G","B","strHex","aColor","hex","shex","DefaultColor","StartColor","EndColor","getCoraNodeColor","node_label","color_encode","getCoraTextColor","getInfectionNodeColor","show_mode","node_features","color_mode","getInfectionEdgeColor","edge_features","constructNeighborSet","graph_in","senders","receivers","node_num","feature","nowreceiver","constructPathDict","message_passing","values","PathDict","getTrainColor","node_id","train_set","has","getNodeStatisticStr","selectedNodeLength","totalNodeLength","str","toFixed","defaultCheckedList","compareSelectedNodeIdList","list_a","list_b","Option","Select","GraphView","prevGraphJson","onEnableForceDirected","onExtendedModeChange","onChangeSelectInspectNode","enableForceDirected","nextProps","nextState","showSource","changeSelectInspectNode","changeShowSource","changeExtendedMode","graph_object","explained_node","onExplainNodeChange","onShowModeChange","selectedNodeIdList","select_inspect_node","embedding_layout_select","graph_name","selectStr","common","individual","dataset_id","data_type_id","graph_out","new_graph_layout","graph_target","graph_explaination","graph_layout","mask","train_mask_set","Set","train","embedding","bounding_box","xmin","xmax","ymin","ymax","nowx","nowy","get_boundingbox","margin","realwidth","realheight","gap_x","gap_y","realscale","locx","locy","transform_graphlayout","data_type","task","transform_node_feature","node_max","node_min","edge_max","edge_min","edge_num","source_list","target_list","nodes_json","links_json","links_color_json","node_explain","node_importance","edge_explain","edge_importance","node_absmax","edge_absmax","node_object","link_color","enablePrevGraphLayout","label","ground_truth_label","GCN_prediction_label","GCN","MLP_prediction_label","MLP","GCN_Identity_features_prediction_label","GCN_Identity_features","real_model_name","graph_info","graph_additional_info","num_class","Object","idx_to_class","getColorLegend","checked","setState","new_selectedNodeIdList","nodeId","new_node_id","model","modelList","selectedMessagePassingNodeIdList","extendedMode","specificNodeIdList","constructExtendedSelectedNodeIdList","changeSpecificNodeIdList","ForceDirectedWidth","ForceDirectedHeight","constructGraphJson","overflowX","float","key","onChange","onClick","placeholder","changeMatrixFilters","MatrixFilters","matrixFilters","connect","changePrevGraphJson","RadialTree","TAB","renderD3","RadialData","tree_radius","font_size","svg","extent","stratify","parentId","substring","lastIndexOf","project","angle","separation","descendants","text_color","MessagePassingView","onSelectNodeChange","onColorEncodeChange","onShowSourceChange","select_node","level","explain_id","graph","explaination_type","train_mask","getColor","getTextColor","isTrain","constructRadialLevel","valuelist","nownode_entry","nownode_level","nownode","data_id","succnodes","succnode","valuemin","valuemax","constructPathLevel","PathLevel","sourcelist","targetlist","nodeid_idx","nodeid_dict","getNodeIdx","existingLevel","nowlevel","newPathLevel","nownode_idx","succnode_idx","return_package","thisPathLevel","totalnum","y_gap","y_start","nownodeid","ground_truth","output","error","Misclassified","model_output","overall_accuracy","gt","ot","getAccuracy","valid","RadialTree_json","changeMessagePassingNodeIdList","getMisclassified","options","explanation_type","constructRadialTreeJson","notifyMessagePassingNodeIdList","svgwidth","svgheight","pathgraph_width","pathgraph_height","showSearch","generateSelect","borderTop","changeMessagePassingSelectedNodeIdList","ScatterPlot","top_top_svg","trans","easeLinear","node_enter","circles_enter","circles","circles_enter_update","labels_enter","labels_update","title_enter","mappingGraph","EmbeddingView","onEmbeddingLayerChange","embeddinglayer","show_layer","exceedingmargin","selectedStr","show_embedding","box_height","box_width","generateColorSelect","scatter_plot_json","constructScatterPlotJson","caption","generateEmbeddingView","feature_matrix_json","refreshnumber","MatrixRowFilters","layout_config","y_axis","x_axis","color_info","matrixRowFilters","transformYaxis","row_filters","new_y_axis","max_row_num_block","y_axis_color","indexFilters","rowFilters","newData","rowTest","rowMap","curr_row_id","transformDataTwoFilters","transformDataOneFilter","buckets","colors","gridSize","final_data","fakedata","constructFakeData","data_max","data_min","y_axis_labels","transform_x","transform_y","y_axis_label_enter","arc_data","outer_circles_enter","outer_circles","inner_circles_enter","inner_circles","overall_background","background_enter_update","x_axis_label","x_axis_label_enter","color_domain","scaleLinear","cards","pageY","pageX","BrushBarChart","updateMatrixFilters","filters","matrixfilters","assign","brush","ref_data","nbFt","current_range","fdata","selectedFeatureStatistics","scaleBand","padding","ft","brushX","move","ratio","mini_bars","bandwidth","insert","updateMiniBars","hierarchy","changeMatrixRowFilters","indentedTree","MyTree","barHeight","barWidth","connector","collapse","_children","click","update","getRowIdList","nodesSort","row_id","increI","eachBefore","bottom","nodeEnter","nodeUpdate","link","linkEnter","right","nodeSize","IndentedTree","FeatureMatrixView","onAxisChange","onDistanceChange","onDataSourceChange","onEnableSort","axis_select","distance_select","dataSource_select","enableSorting","model_state_dict","getNodeColorInfo","features","sequentialIndentedTree","indentedTreeNode","selectedIndetendedTreeId","constructIndentedTree","max_level","edge_weight","next_row_id","local_edge_weight","children_package","features_value","selected_model_weight","selected_model_bias","feature_value","hidden_vector","output_vector","matrix","selectedFeature","distance_mode","calculateFeatureDistance","feature1","feature2","len1","len2","calculateEuclideanDistance","dis","filter_matrix","filter_feature_axis","selectedFilterIdList","currentSelect","otherSelect","value_package","pre_selected_feature","pre_selected_feature_stats","feature_index","sort_selected_feature_stats","currentNodeIndex","currentFilterIndex","currentFeatureIndex","selectedNodeColor","selectedFeatureLabel","idx_to_attr","x_axis_data","y_axis_data","filter_graph_json","filter_x_axis_data","filter_y_axis_data","enable_x_axis_color","enable_y_axis_color","x_axis_color","constructFeatureMatrixJson","indentedtreeWidth","matrixRealWidth","indentedtreeBarHeight","FeatureMatrixHeight","BrushBarChartLayoutConfig","MatrixLayoutConfig","IndentedTreeLayoutConfig","BrushBarChartContainer","MatrixContainer","IndentedTreeContainer","URL","URL2","axios","create","baseURL","headers","axiosInstance","getDatasetList","url","get","status","getExplainMethodsList","model_id","params","getModelList","getGraphList","getGraphInfo","graph_id","getGraphBundledInfo","DataSelector","onModelSelectorChange","onDatasetSelectorChange","onExplainMethodSelectorChange","onGraphSelectorChange","initDatasetList","datasetList_package","modelList_package","initModelList","explainList_package","initExplainList","graphlist_package","graph_new_obj","ori_obj","local_obj","initGraphList","changeModel","changeExplainMethod","changeDataset","clearIdInfo","changeGraph","disabledDatasetSelector","datasetList","undefined","disabled","explainList","graphList","CheckboxGroup","Checkbox","Group","plainOptions","ControlPanel","DataSelectorContainer","InspectCategoryList","onChangeInspectCategoryList","inspectCategoryList","ParallelCoordinates","onRibbonClick","clearFilter","onCategoryClick","PSJson","changeFilters","current","PSData","chart_dimensions","chart","csv","datum","ParallelSets","PSViewNodeStatistic","PSSelectedNodes","totalNodeNum","PSView","node_list","anchor_list","feature_list","feature_value_list","label_list","calculateCosSimilarity","feature1_value","feature2_value","norm_1","norm_2","idx2","feature_similarity_list","max_feature_similarity","max_anchor_set","all_anchor_similarity_list","idx_1","idx_2","feature_sim","topk_anchor_similarity_list","anchor_similarity","neighbor_set","shortest_path_list","anchor_set","queue","shortest_path_distance","shortest_path_set","curr","neighbors","CheckedList","CheckedList_str","addRange","getDegreeCategory","degree","degree_list","shortest_path_distance_package","selected_mask","test_mask","valid_mask","all_mask","other_mask","constructSelectedMask","meta_package","cn_table","cgt","cpt","ngt","npt","one_hop_accuracy_list","cn_consistency_list","one_hop_accuracy","center_node_gt","center_node_pt","cn","correctnum","constructMetaInformation","SPD","KFS","degree_range_list","bucket_num","degree_distribution","degree_key","new_degree_key","compare_number","prev_range","single_bucket_count","this_range","constructDegreeRangeList","P1_name","P1_correctness","P2_correctness","P3_correctness","P1_one_hop_accuracy","PSColumns","whole_correct_num","ground_truth_label_stats","getLabelName","node_json","gcn_prediction_label","gcn_confidence","mlp_prediction_label","gcn_identity_features_prediction_label","train_nodes","anchor_label","maxtotal","stats","PSWidth","PSHeight","constructPSJson","checkedList","changePSJson","PSViewNodeStatisticContainer","gutter","ParallelSetsContainer","d3_lasso","ProjectionView","point_array","additional_info","onSelectedNodeListChange","showMode","highlightNodeIdList","updateHighlightStatus","selectedNodeList","onChangeHighLightNodeIdList","scalepop","scaleSqrt","scalecountry","schemeCategory20b","centerx","centery","cities","descending","Longitude","Latitude","canvas","geoDistance","alpha","forceCollide","Spd_node_info","handleTitleMouseMove","handleTitleMouseOut","clip_name","clip_path_name","Data_id","node_enter_update","radius_gap","outer_circles_enter_update","Color","ori_arcs_conf","rect_scale","overall_background_conf","GCN_Confidence","getArcConf","rect_width","rect_height","gnnrect_enter","gnnrects","rect_enter","rects","culmulative_proportion","sim","Topkfs_nodes","target_sim","max_degree","inner_circles_enter_update","polygon_enter","polygons","polygon_enter_update","constructPointStr","radius_collision","ticked","renderLines","lasso_start","lasso_draw","lasso_end","return_result","selectedItemsData","new_return_result","new_highlight_node","default","svgWidth","svgHeight","tooltip_proj","tooltip_svg","stroke_width","dataValues","coordinates","polyradius","nclass","pointstr","pti","defaultPointStr","legend_spd_info","legend_kfs_len","Real_Degree","CN_consistency","cgt_ngt","cgt_npt","cpt_ngt","cpt_npt","selectedNodes","PCPJson","constructSelectedNodeList","max_shortest_path_distance","spd","Shortest_Path_Distance_to_Train_Nodes","matrix_row","getDistance","initial_x","initial_y","updatefunc","getSquareDistance","array1","array2","transformCNtoList","selected_node_info_a","selected_node_info_b","columns","conf_a","conf_b","degree_a","degree_b","Topkfs_node_info","filterData","filters_key","dataInstance","SelectedNodeList","prevSelectedNodeIdList","thisSelectedNodeIdList","onChangeLines","currentPage","enableLines","changeSelectedNodeIdList","selectedNode","data_json","sdata","dataIndex","title","point_array_data","connectionPath","lines","lineGenerator","line_enter","line_enter_update","all_data","data_list","projectionWidth","successflag","coords","startX","new_coords","line","curve","curveNatural","projectionHeight","changePSSelectedNodes","DataRuns","Tabs","TabPane","PCPViewRef","GraphViewRef","FeatureMatrixViewRef","ControlPanelRef","ProjectionViewRef","onResizeStop","getLayoutConfigWithName","getCurrentLayoutConfig","onResize","screenWidth","screenHeight","innerHeight","innerWidth","getWholeLayoutConfig","offsetWidth","offsetHeight","getGraphBundledData","contentHeight","contentWidth","ShowMode","ExplainedNode","generateGraphView","GraphViewContainer","generateFeatureMatrixView","FeatureMatrixContainer","generatePCPView","PSViewContainer","max_row_num","PSPanelH","ProjectionPanelH","RH","h","static","generateWholeView","screenwidth","rowHeight","onLayoutChange","ref","ControlPanelContainer","SelectedNodeListContainer","Content","Layout","Header","App","ContentRef","createRef","updateLayoutState","contentLayout","getLayoutConfig","addEventListener","src","logo","alt-text","DataRunsContainer","Component","Boolean","hostname","match","initial_state","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed3f9419.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo2.4b8ec5cf.png\";","// Parallel Sets by Jason Davies, http://www.jasondavies.com/\n// Functionality based on http://eagereyes.org/parallel-sets\n/* global d3 */\n/* eslint indent: \"off\" */\nconst d3 = require(\"d3\");\n(function() {\n  d3.parsets = function() {\n    var event = d3.dispatch(\"sortDimensions\", \"sortCategories\", \"ribbonClick\",\"categoryClick\"),\n        dimensions_ = autoDimensions,\n        dimensionFormat = String,\n        tooltip_ = defaultTooltip,\n        categoryTooltip = defaultCategoryTooltip,\n        value_,\n        spacing = 20,\n        width,\n        height,\n        tension = 1,\n        tension0,\n        duration = 500;\n\n    // https://stackoverflow.com/questions/47844765/d3-rebind-in-d3-v4\n    // Copies a variable number of methods from source to target.\n    d3.rebind = function(target, source) {\n      var i = 1, n = arguments.length, method;\n      while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n      return target;\n    };\n\n    // Method is assumed to be a standard D3 getter-setter:\n    // If passed with no arguments, gets the value.\n    // If passed with arguments, sets the value and returns the target.\n    function d3_rebind(target, source, method) {\n      return function() {\n        var value = method.apply(source, arguments);\n        return value === source ? target : value;\n      };\n    }\n\n    function d3_functor(v) {\n      return typeof v === \"function\" ? v : function() { return v; };\n    }\n\n    function parsets(selection) {\n      selection.each(function(data, i) {\n        //console.log(\"parsets \", data);\n        var g = d3.select(this),\n            ordinal = d3.scaleOrdinal(),\n            dragging = false,\n            dimensionNames = dimensions_.call(this, data, i),\n            dimensions = [],\n            tree = {children: {}, count: 0},\n            nodes,\n            total,\n            ribbon,\n            ribbonEnter;\n\n        d3.select(window).on(\"mousemove.parsets.\" + ++parsetsId, unhighlight);\n\n        if (tension0 == null) tension0 = tension;\n        g.selectAll(\".ribbon, .ribbon-mouse\")\n            .data([\"ribbon\", \"ribbon-mouse\"], String)\n          .enter().append(\"g\")\n            .attr(\"class\", String);\n\n        updateDimensions();\n        if (tension != tension0) {\n          var t = d3.transition(g);\n          if (t.tween) t.tween(\"ribbon\", tensionTween);\n          else tensionTween()(1);\n        }\n\n        function tensionTween() {\n          var i = d3.interpolateNumber(tension0, tension);\n          return function(t) {\n            tension0 = i(t);\n            ribbon.merge(ribbonEnter).attr(\"d\", ribbonPath);\n          };\n        }\n\n        function updateDimensions() {\n          // Cache existing bound dimensions to preserve sort order.\n          var dimension = g.selectAll(\"g.dimension\"),\n              cache = {};\n          dimension.each(function(d) { cache[d.name] = d; });\n          dimensionNames.forEach(function(d) {\n            if (!cache.hasOwnProperty(d)) {\n              cache[d] = {name: d, categories: []};\n            }\n            dimensions.push(cache[d]);\n          });\n          dimensions.sort(compareY);\n          // Populate tree with existing nodes.\n          g.select(\".ribbon\").selectAll(\"path\")\n              .each(function(d) {\n                var path = d.path.split(\"\\0\"),\n                    node = tree,\n                    n = path.length - 1;\n                for (var i = 0; i < n; i++) {\n                  var p = path[i];\n                  node = node.children.hasOwnProperty(p) ? node.children[p]\n                      : node.children[p] = {children: {}, count: 0};\n                }\n                node.children[d.name] = d;\n              });\n          tree = buildTree(tree, data, dimensions.map(dimensionName), value_);\n          cache = dimensions.map(function(d) {\n            var t = {};\n            d.categories.forEach(function(c) {\n              t[c.name] = c;\n            });\n            return t;\n          });\n          (function categories(d, i) {\n            if (!d.children) return;\n            var dim = dimensions[i],\n                t = cache[i];\n            for (var k in d.children) {\n              if (!t.hasOwnProperty(k)) {\n                dim.categories.push(t[k] = {name: k});\n              }\n              categories(d.children[k], i + 1);\n            }\n          })(tree, 0);\n          dimensions.forEach((d,i)=>{\n            dimensions[i].categories = d.categories.sort((a,b)=>{\n              return a.name < b.name?-1:1;\n            })\n          })\n          ordinal.domain([]).range(d3.range(dimensions[0].categories.length));\n          nodes = layout(tree, dimensions, ordinal);\n          total = getTotal(dimensions);\n          dimensions.forEach(function(d) {\n            d.count = total;\n          });\n          dimension = dimension.data(dimensions, dimensionName);\n\n          var dEnter = dimension.enter().append(\"g\")\n              .attr(\"class\", \"dimension\")\n              .attr(\"transform\", function(d) { return \"translate(0,\" + d.y + \")\"; })\n              .on(\"mousedown.parsets\", cancelEvent);\n          dimension.merge(dEnter).each(function(d) {\n                d.y0 = d.y;\n                d.categories.forEach(function(d) { d.x0 = d.x; });\n              });\n          dEnter.append(\"rect\")\n              .attr(\"width\", width)\n              .attr(\"y\", -45)\n              .attr(\"height\", 45);\n          var textEnter = dEnter.append(\"text\")\n              .attr(\"class\", \"dimension\")\n              .attr(\"transform\", \"translate(0,-25)\");\n          textEnter.append(\"tspan\")\n              .attr(\"class\", \"name\")\n              .text(dimensionFormatName);\n          textEnter.append(\"tspan\")\n              .attr(\"class\", \"sort alpha\")\n              .attr(\"dx\", \"2em\")\n              .text(\"alpha »\")\n              .on(\"mousedown.parsets\", cancelEvent);\n          textEnter.append(\"tspan\")\n              .attr(\"class\", \"sort size\")\n              .attr(\"dx\", \"2em\")\n              .text(\"size »\")\n              .on(\"mousedown.parsets\", cancelEvent);\n          dimension.merge(dEnter)\n              .call(d3.drag()\n                // .origin(identity)\n                .on(\"start\", function(d) {\n                  dragging = true;\n                  d.y0 = d.y;\n                })\n                .on(\"drag\", function(d) {\n                  d.y0 = d.y = d3.event.y;\n                  for (var i = 1; i < dimensions.length; i++) {\n                    if (height * dimensions[i].y < height * dimensions[i - 1].y) {\n                      dimensions.sort(compareY);\n                      dimensionNames = dimensions.map(dimensionName);\n                      ordinal.domain([]).range(d3.range(dimensions[0].categories.length));\n                      nodes = layout(tree = buildTree({children: {}, count: 0}, data, dimensionNames, value_), dimensions, ordinal);\n                      total = getTotal(dimensions);\n                      g.selectAll(\".ribbon, .ribbon-mouse\").selectAll(\"path\").remove();                      \n                      updateCategories(dimension.merge(dEnter));\n                      updateRibbons();\n                      dimension.merge(dEnter).transition().duration(duration)\n                          .attr(\"transform\", translateY)\n                          .tween(\"ribbon\", ribbonTweenY);\n\n                      // This isn't really doing anything...\n                      event.call(\"sortDimensions\");\n                      break;\n                    }\n                  }\n                  d3.select(this)\n                      .attr(\"transform\", \"translate(0,\" + d.y + \")\")\n                      .transition();\n                  ribbon.merge(ribbonEnter).filter(function(r) { return r.source.dimension === d || r.target.dimension === d; })\n                      .attr(\"d\", ribbonPath);\n                })\n                .on(\"end\", function(d) {\n                  dragging = false;\n                  unhighlight();\n                  var y0 = 45,\n                      dy = (height - y0 - 2) / (dimensions.length - 1);\n                  dimensions.forEach(function(d, i) {\n                    d.y = y0 + i * dy;\n                  });\n                  transition(d3.select(this))\n                      .attr(\"transform\", \"translate(0,\" + d.y + \")\")\n                      .tween(\"ribbon\", ribbonTweenY);\n                }));\n          dimension.merge(dEnter).select(\"text\").select(\"tspan.sort.alpha\")\n              .on(\"click.parsets\", sortBy(\"alpha\", function(a, b) { return a.name < b.name ? 1 : -1; }, dimension));\n          dimension.merge(dEnter).select(\"text\").select(\"tspan.sort.size\")\n              .on(\"click.parsets\", sortBy(\"size\", function(a, b) { return a.count - b.count; }, dimension));\n          dimension.merge(dEnter).transition().duration(duration)\n              .attr(\"transform\", function(d) { return \"translate(0,\" + d.y + \")\"; })\n              .tween(\"ribbon\", ribbonTweenY);\n          dimension.exit().remove();\n\n          updateCategories(dimension.merge(dEnter));\n          updateRibbons();\n        }\n\n        function sortBy(type, f, dimension) {\n          return function(d) {\n            var direction = this.__direction = -(this.__direction || 1);\n            d3.select(this).text(direction > 0 ? type + \" »\" : \"« \" + type);\n            d.categories.sort(function() { return direction * f.apply(this, arguments); });\n            nodes = layout(tree, dimensions, ordinal);\n            updateRibbons();\n            updateCategories(dimension.merge(dimension.enter()));\n            \n            event.call(\"sortCategories\");\n          };\n        }\n\n        function updateRibbons() {\n          //console.log(\"UpdateRibbons\")\n          ribbon = g.select(\".ribbon\").selectAll(\"path\")\n              .data(nodes, function(d) { return d.path; });\n          ribbonEnter = ribbon.enter().append(\"path\")\n              .each(function(d) {\n                d.source.x0 = d.source.x;\n                d.target.x0 = d.target.x;\n              });\n\n          ribbonEnter.merge(ribbon)\n              .attr(\"class\", function(d) { return \"category-\" + d.major; })\n              .attr(\"d\", ribbonPath);\n          ribbonEnter.merge(ribbon).sort(function(a, b) { return b.count - a.count; });\n          ribbon.exit().remove();\n\n\n          var mouse = g.select(\".ribbon-mouse\").selectAll(\"path\")\n              .data(nodes, function(d) { return d.path; });\n          var mouseEnter = mouse.enter().append(\"path\");   \n\n          mouseEnter.merge(mouse)\n              .on(\"mousemove.parsets\", function(d) {\n                unselectedRibbon(ribbon.merge(ribbonEnter)).classed(\"active\", false);\n                if (dragging) return;\n                highlight(d = d.node, true);\n                showTooltip(tooltip_.call(this, d));\n                d3.event.stopPropagation();\n              })\n              .on(\"click.parsets\",function(d){\n                ribbon.merge(ribbonEnter).classed(\"active\", false);\n                ribbon.merge(ribbonEnter).classed(\"selected\", false);\n                if (dragging) return;\n                highlightAndSelect(d = d.node, true);\n                //console.log(\"ribbon Click\", d);\n                event.call(\"ribbonClick\",this, {\"data\":d,\"selected\":true});\n                //highlight(d = d.node, true);\n                d3.event.stopPropagation();\n              });\n          mouse.merge(mouseEnter)\n              .sort(function(a, b) { return b.count - a.count; })\n              .attr(\"d\", ribbonPathStatic);\n          mouse.exit().remove();\n        }\n\n        // Animates the x-coordinates only of the relevant ribbon paths.\n        function ribbonTweenX(d) {\n          var nodes = [d],\n              r = ribbon.merge(ribbonEnter).filter(function(r) {\n                var s, t;\n                if (r.source.node === d) nodes.push(s = r.source);\n                if (r.target.node === d) nodes.push(t = r.target);\n                return s || t;\n              }),\n              i = nodes.map(function(d) { return d3.interpolateNumber(d.x0, d.x); }),\n              n = nodes.length;\n          return function(t) {\n            for (var j = 0; j < n; j++) nodes[j].x0 = i[j](t);\n            r.attr(\"d\", ribbonPath);\n          };\n        }\n\n        // Animates the y-coordinates only of the relevant ribbon paths.\n        function ribbonTweenY(d) {\n          var r = ribbon.merge(ribbonEnter).filter(function(r) { return r.source.dimension.name == d.name || r.target.dimension.name == d.name; }),\n              i = d3.interpolateNumber(d.y0, d.y);\n          return function(t) {\n            d.y0 = i(t);\n            r.attr(\"d\", ribbonPath);\n          };\n        }\n\n        // Highlight a node and its descendants, and optionally its ancestors.\n        function highlight(d, ancestors) {\n          if (dragging) return;\n          var highlight = [];\n          (function recurse(d) {\n            highlight.push(d);\n            for (var k in d.children) recurse(d.children[k]);\n          })(d);\n          highlight.shift();\n          if (ancestors) while (d) {\n            highlight.push(d); d = d.parent;\n          }\n          ribbon.merge(ribbonEnter).filter(function(d) {\n            var active = highlight.indexOf(d.node) >= 0;\n            if (active) this.parentNode.appendChild(this);\n            return active;\n          }).classed(\"active\", true);\n          \n        }\n        function highlightAndSelect(d, ancestors) {\n          if (dragging) return;\n          var highlight = [];\n          (function recurse(d) {\n            highlight.push(d);\n            for (var k in d.children) recurse(d.children[k]);\n          })(d);\n          highlight.shift();\n          if (ancestors) while (d) {\n            highlight.push(d); d = d.parent;\n          }\n          ribbon.merge(ribbonEnter).filter(function(d) {\n            var active = highlight.indexOf(d.node) >= 0;\n            if (active) this.parentNode.appendChild(this);\n            return active;\n          }).classed(\"selected\", true).classed(\"active\", true);\n          \n        }\n        function unselectedRibbon(ribbon){\n          return ribbon.filter(function(d){\n            return !d3.select(this).classed(\"selected\");\n          })\n        }\n        // Unhighlight all nodes.\n        function unhighlight() {\n          if (dragging) return;\n          unselectedRibbon(ribbon.merge(ribbonEnter)).classed(\"active\", false);\n          hideTooltip();\n        }\n\n        function updateCategories(g) {          \n          var category = g.selectAll(\"g.category\")\n              .data(function(d) { return d.categories; }, function(d) { return d.dimension.name+\"_\"+d.name; });\n          \n          var categoryEnter = category.enter().append(\"g\")\n              .attr(\"class\", \"category\");\n\n          categoryEnter.merge(category)\n              .attr(\"transform\", function(d) { return \"translate(\" + d.x + \")\"; });\n          //console.log(\"Category enter update exit data\", category.enter(), category, category.exit(), g.data())\n          // TODO: Don't really understand why I had to comment this one out\n          // TODO: Very weird to see the duplicate data. \n          // TODO: Suprised when dragging it, I don't see duplicate data.\n          //category.exit().remove();\n          category\n              .merge(categoryEnter)\n              .on(\"mousemove.parsets\", function(d) {\n                unselectedRibbon(ribbon.merge(ribbonEnter)).classed(\"active\", false);\n                if (dragging) return;\n                d.nodes.forEach(function(d) { highlight(d); });\n                showTooltip(categoryTooltip.call(this, d));\n                d3.event.stopPropagation();\n              })\n              .on(\"mouseout.parsets\", unhighlight)\n              .on(\"mousedown.parsets\", cancelEvent)\n              \n              .call(d3.drag()\n                // .origin(identity)\n                .on(\"start\", function(d) {\n                  dragging = true;\n                  d.x0 = d.x;\n                })\n                .on(\"drag\", function(d) {\n                  d.x = d3.event.x;\n                  var categories = d.dimension.categories;\n                  for (var i = 0, c = categories[0]; ++i < categories.length;) {\n                    if (c.x + c.dx / 2 > (c = categories[i]).x + c.dx / 2) {\n                      categories.sort(function(a, b) { return a.x + a.dx / 2 - b.x - b.dx / 2; });\n                      nodes = layout(tree, dimensions, ordinal);\n                      updateRibbons();\n                      updateCategories(g);\n                      highlight(d.node);\n                      event.call(\"sortCategories\");\n                      break;\n                    }\n                  }\n                  var x = 0,\n                      p = spacing / (categories.length - 1);\n                  categories.forEach(function(e) {\n                    if (d === e) e.x0 = d3.event.x;\n                    e.x = x;\n                    x += e.count / total * (width - spacing) + p;\n                  });\n                  d3.select(this)\n                      .attr(\"transform\", function(d) { return \"translate(\" + d.x0 + \")\"; })\n                      .transition();\n                  ribbon.merge(ribbonEnter).filter(function(r) { return r.source.node === d || r.target.node === d; })\n                      .attr(\"d\", ribbonPath);\n                })\n                .on(\"end\", function(d) {\n                  dragging = false;\n                  unhighlight();\n                  updateRibbons();\n                  transition(d3.select(this))\n                      .attr(\"transform\", \"translate(\" + d.x + \")\")\n                      .tween(\"ribbon\", ribbonTweenX);\n                }))\n                .on(\"click.parsets\",function(d){\n                  if (dragging) return;\n                  ribbon.merge(ribbonEnter).classed(\"active\", false);\n                  ribbon.merge(ribbonEnter).classed(\"selected\", false);\n                  \n                  d.nodes.forEach(function(d) { highlightAndSelect(d); });\n                  event.call(\"categoryClick\",this, {\"data\":d,\"selected\":true});\n                  d3.event.stopPropagation();\n                });\n          category.merge(categoryEnter).transition().duration(duration)\n              .attr(\"transform\", function(d) { return \"translate(\" + d.x + \")\"; })\n              .tween(\"ribbon\", ribbonTweenX);\n\n          categoryEnter.append(\"rect\")\n              .attr(\"width\", function(d) { return d.dx; })\n              .attr(\"y\", -20)\n              .attr(\"height\", 20);\n          categoryEnter.append(\"line\")\n              .style(\"stroke-width\", 2);\n          categoryEnter.append(\"text\")\n              .attr(\"dy\", \"-.3em\");\n          category.merge(categoryEnter).select(\"rect\")\n              .attr(\"width\", function(d) { return d.dx; })\n              .attr(\"class\", function(d) {\n                return \"category-\" + (d.dimension === dimensions[0] ? ordinal(d.name) : \"background\");\n              });\n          category.merge(categoryEnter).select(\"line\")\n              .attr(\"x2\", function(d) { return d.dx; });\n          category.merge(categoryEnter).select(\"text\")\n              .text(truncateText(function(d) { return d.name; }, function(d) { return d.dx; }));\n        }\n      });\n    }\n\n    parsets.dimensionFormat = function(_) {\n      if (!arguments.length) return dimensionFormat;\n      dimensionFormat = _;\n      return parsets;\n    };\n\n    parsets.dimensions = function(_) {\n      if (!arguments.length) return dimensions_;\n      dimensions_ = d3_functor(_);\n      return parsets;\n    };\n\n    parsets.value = function(_) {\n      if (!arguments.length) return value_;\n      value_ = d3_functor(_);\n      return parsets;\n    };\n\n    parsets.width = function(_) {\n      if (!arguments.length) return width;\n      width = +_;\n      return parsets;\n    };\n\n    parsets.height = function(_) {\n      if (!arguments.length) return height;\n      height = +_;\n      return parsets;\n    };\n\n    parsets.spacing = function(_) {\n      if (!arguments.length) return spacing;\n      spacing = +_;\n      return parsets;\n    };\n\n    parsets.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = +_;\n      return parsets;\n    };\n\n    parsets.duration = function(_) {\n      if (!arguments.length) return duration;\n      duration = +_;\n      return parsets;\n    };\n\n    parsets.tooltip = function(_) {\n      if (!arguments.length) return tooltip;\n      tooltip_ = _ == null ? defaultTooltip : _;\n      return parsets;\n    };\n\n    parsets.categoryTooltip = function(_) {\n      if (!arguments.length) return categoryTooltip;\n      categoryTooltip = _ == null ? defaultCategoryTooltip : _;\n      return parsets;\n    };\n\n    var body = d3.select(\"body\");\n    var tooltip = body.append(\"div\")\n        .style(\"display\", \"none\")\n        .attr(\"class\", \"parsets tooltip\");\n\n    return d3.rebind(parsets, event, \"on\").value(1).width(960).height(600);\n\n    function dimensionFormatName(d, i) {\n      return dimensionFormat.call(this, d.name, i);\n    }\n\n    function showTooltip(html) {\n      var m = d3.mouse(body.node());\n      tooltip\n          .style(\"display\", null)\n          .style(\"left\", m[0] + 30 + \"px\")\n          .style(\"top\", m[1] - 20 + \"px\")\n          .html(html);\n    }\n\n    function hideTooltip() {\n      tooltip.style(\"display\", \"none\");\n    }\n\n    function transition(g) {\n      return duration ? g.transition().duration(duration).ease(parsetsEase) : g;\n    }\n\n    function layout(tree, dimensions, ordinal) {\n      var nodes = [],\n          nd = dimensions.length,\n          y0 = 45,\n          dy = (height - y0 - 2) / (nd - 1);\n      dimensions.forEach(function(d, i) {\n        d.categories.forEach(function(c) {\n          c.dimension = d;\n          c.count = 0;\n          c.nodes = [];\n        });\n        d.y = y0 + i * dy;\n      });\n\n      // Compute per-category counts.\n      var total = (function rollup(d, i) {\n        if (!d.children) return d.count;\n        var dim = dimensions[i],\n            total = 0;\n        dim.categories.forEach(function(c) {\n          var child = d.children[c.name];\n          if (!child) return;\n          c.nodes.push(child);\n          var count = rollup(child, i + 1);\n          c.count += count;\n          total += count;\n        });\n        return total;\n      })(tree, 0);\n\n      // Stack the counts.\n      dimensions.forEach(function(d) {\n        d.categories = d.categories.filter(function(d) { return d.count; });\n        var x = 0,\n            p = spacing / (d.categories.length - 1);\n        d.categories.forEach(function(c) {\n          c.x = x;\n          c.dx = c.count / total * (width - spacing);\n          c.in = {dx: 0};\n          c.out = {dx: 0};\n          x += c.dx + p;\n        });\n      });\n\n      var dim = dimensions[0];\n      \n      //console.log(\"dimensions\", dim, dimensions)\n      dim.categories.forEach(function(c) {\n        var k = c.name;\n        if (tree.children.hasOwnProperty(k)) {\n          recurse(c, {node: tree.children[k], path: k}, 1, ordinal(k));\n        }\n      });\n\n      function recurse(p, d, depth, major) {\n        var node = d.node,\n            dimension = dimensions[depth];\n        dimension.categories.forEach(function(c) {\n          var k = c.name;\n          if (!node.children.hasOwnProperty(k)) return;\n          var child = node.children[k];\n          child.path = d.path + \"\\0\" + k;\n          var target = child.target || {node: c, dimension: dimension};\n          target.x = c.in.dx;\n          target.dx = child.count / total * (width - spacing);\n          c.in.dx += target.dx;\n          var source = child.source || {node: p, dimension: dimensions[depth - 1]};\n          source.x = p.out.dx;\n          source.dx = target.dx;\n          p.out.dx += source.dx;\n\n          child.node = child;\n          child.source = source;\n          child.target = target;\n          child.major = major;\n          nodes.push(child);\n          if (depth + 1 < dimensions.length) recurse(c, child, depth + 1, major);\n        });\n      }\n      return nodes;\n    }\n\n    // Dynamic path string for transitions.\n    function ribbonPath(d) {\n      var s = d.source,\n          t = d.target;\n      return ribbonPathString(s.node.x0 + s.x0, s.dimension.y0, s.dx, t.node.x0 + t.x0, t.dimension.y0, t.dx, tension0);\n    }\n\n    // Static path string for mouse handlers.\n    function ribbonPathStatic(d) {\n      var s = d.source,\n          t = d.target;\n      return ribbonPathString(s.node.x + s.x, s.dimension.y, s.dx, t.node.x + t.x, t.dimension.y, t.dx, tension);\n    }\n\n    function ribbonPathString(sx, sy, sdx, tx, ty, tdx, tension) {\n      var m0, m1;\n      return (tension === 1 ? [\n          \"M\", [sx, sy],\n          \"L\", [tx, ty],\n          \"h\", tdx,\n          \"L\", [sx + sdx, sy],\n          \"Z\"]\n       : [\"M\", [sx, sy],\n          \"C\", [sx, m0 = tension * sy + (1 - tension) * ty], \" \",\n               [tx, m1 = tension * ty + (1 - tension) * sy], \" \", [tx, ty],\n          \"h\", tdx,\n          \"C\", [tx + tdx, m1], \" \", [sx + sdx, m0], \" \", [sx + sdx, sy],\n          \"Z\"]).join(\"\");\n    }\n\n    function compareY(a, b) {\n      a = height * a.y; b = height * b.y;\n      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : a <= a ? -1 : b <= b ? 1 : NaN;\n    }\n  };\n  d3.parsets.tree = buildTree;\n\n  function autoDimensions(d) {\n    return d.length ? d3.keys(d[0]).sort() : [];\n  }\n\n  function cancelEvent() {\n    d3.event.stopPropagation();\n    d3.event.preventDefault();\n  }\n\n  function dimensionName(d) { return d.name; }\n\n  function getTotal(dimensions) {\n    return dimensions[0].categories.reduce(function(a, d) {\n      return a + d.count;\n    }, 0);\n  }\n\n  // Given a text function and width function, truncates the text if necessary to\n  // fit within the given width.\n  function truncateText(text, width) {\n    return function(d, i) {\n      var t = this.textContent = text(d, i),\n          w = width(d, i);\n      if (this.getComputedTextLength() < w) return t;\n      this.textContent = \"…\" + t;\n      var lo = 0,\n          hi = t.length + 1,\n          x;\n      while (lo < hi) {\n        var mid = lo + hi >> 1;\n        if ((x = this.getSubStringLength(0, mid)) < w) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo > 1 ? t.substr(0, lo - 2) + \"…\" : \"\";\n    };\n  }\n\n  var percent = d3.format(\".2%\"),\n      comma = d3.format(\"d\"),\n      parsetsEase = d3.easeElastic,\n      parsetsId = 0;\n\n  // Construct tree of all category counts for a given ordered list of\n  // dimensions.  Similar to d3.nest, except we also set the parent.\n  function buildTree(root, data, dimensions, value) {\n    zeroCounts(root);\n    var n = data.length,\n        nd = dimensions.length;\n    for (var i = 0; i < n; i++) {\n      var d = data[i],\n          v = +value(d, i),\n          node = root;\n      for (var j = 0; j < nd; j++) {\n        var dimension = dimensions[j],\n            category = d[dimension],\n            children = node.children;\n        node.count += v;\n        node = children.hasOwnProperty(category) ? children[category]\n            : children[category] = {\n              children: j === nd - 1 ? null : {},\n              count: 0,\n              parent: node,\n              dimension: dimension,\n              name: category\n            };\n      }\n      node.count += v;\n    }\n    return root;\n  }\n\n  function zeroCounts(d) {\n    d.count = 0;\n    if (d.children) {\n      for (var k in d.children) zeroCounts(d.children[k]);\n    }\n  }\n\n  function identity(d) { return d; }\n\n  function translateY(d) { return \"translate(0,\" + d.y + \")\"; }\n\n  function defaultTooltip(d) {\n    var count = d.count,\n        path = [];\n    while (d.parent) {\n      if (d.name) path.unshift(d.name);\n      d = d.parent;\n    }\n    return path.join(\" → \") + \"<br>\" + comma(count) + \" (\" + percent(count / d.count) + \")\";\n  }\n\n  function defaultCategoryTooltip(d) {\n    return d.name + \"<br>\" + comma(d.count) + \" (\" + percent(d.count / d.dimension.count) + \")\";\n  }\n})();","/**\n * Created by krause on 2014-10-25.\n */\n\nvar mdsjs = function() {\n  var thatMDS = this;\n\n  this.DEBUG = false;\n  this.noNaNs = function(arr) {\n    for(var ix = 0;ix < arr.length;ix += 1) {\n      if(Number.isNaN(arr[ix])) {\n        throw new Error(\"NaN in array\");\n      }\n    }\n  };\n  this.noZeros = function(arr) {\n    for(var ix = 0;ix < arr.length;ix += 1) {\n      if(Number.isNaN(arr[ix]) || arr[ix] === 0) {\n        throw new Error(arr[ix] === 0 ? \"0 in array\" : \"NaN in array\");\n      }\n    }\n  };\n  this.onlyPositive = function(arr) {\n    for(var ix = 0;ix < arr.length;ix += 1) {\n      if(Number.isNaN(arr[ix]) || !(arr[ix] > 0)) {\n        throw new Error(!(arr[ix] > 0) ? arr[ix] + \" in array\" : \"NaN in array\");\n      }\n    }\n  };\n\n  this.CALL_ASYNC = function(f) {\n    setTimeout(f, 0);\n  };\n  this.getCallDirect = function() {\n    var depth = 0;\n    return function(f) {\n      if(depth > 20) { // prevent stack-overflows\n        throw {\n          __continuation: f\n        };\n      }\n      if(!depth) {\n        var cc = f;\n        while(cc) {\n          try {\n            depth += 1;\n            cc();\n            cc = null;\n          } catch(e) {\n            if(!e.__continuation) {\n              throw e;\n            }\n            cc = e.__continuation;\n          }\n          depth = 0;\n        }\n      } else {\n        depth += 1;\n        f();\n      }\n    };\n  };\n\n  this.pca = function(positions) {\n    var res;\n    thatMDS.pcaAsync(positions, function(mat) {\n      res = mat;\n    }, thatMDS.getCallDirect());\n    return res;\n  };\n  this.pcaAsync = function(positions, cb, argCall) {\n    var call = arguments.length > 2 ? argCall : thatMDS.CALL_ASYNC;\n    var centered = positions.colCenter();\n    var rows = centered.rows();\n    var cols = centered.cols();\n    centered.powerIterAsync(function(pca0) {\n      var mat = thatMDS.removeComponent(centered, pca0);\n      mat.powerIterAsync(function(pca1) {\n        var res = centered.createArray(cols, 2);\n        for(var ix = 0;ix < cols;ix += 1) {\n          res[2*ix + 0] = pca0[ix];\n          res[2*ix + 1] = pca1[ix];\n        }\n        cb(new Matrix(res, cols, 2));\n      }, call);\n    }, call);\n  };\n  this.GRAM_SCHMIDT_EPS = 1e-12;\n  this.removeComponent = function(mat, comp) {\n    // Gram–Schmidt process\n    var rows = mat.rows();\n    var cols = mat.cols();\n    comp.length === cols || console.warn(\"incompatible size\", comp.length, cols);\n\n    function proj(vec, from, sub, fromSub, len) {\n      var res = mat.createArray(1, len);\n      var uv = 0;\n      var uu = 0;\n      for(var ix = 0;ix < len;ix += 1) {\n        uv += sub[fromSub + ix] * vec[from + ix];\n        uu += sub[fromSub + ix] * sub[fromSub + ix];\n      }\n      if(Math.abs(uv) < thatMDS.GRAM_SCHMIDT_EPS || Math.abs(uu) < thatMDS.GRAM_SCHMIDT_EPS || !Number.isFinite(uu) || !Number.isFinite(uv)) {\n        for(var ix = 0;ix < len;ix += 1) {\n          res[ix] = 0;\n        }\n      } else {\n        for(var ix = 0;ix < len;ix += 1) {\n          res[ix] = uv / uu * sub[fromSub + ix];\n        }\n      }\n      return res;\n    }\n\n    var nextMat = mat.createArray(rows, cols);\n    var pos = 0;\n    for(var r = 0;r < rows;r += 1) {\n      mat.rowIter(r, function(v) {\n        nextMat[pos] = v;\n        pos += 1;\n      });\n    }\n    for(var r = 0;r < rows;r += 1) {\n      var curPos = r * cols;\n      thatMDS.normalizeVec(nextMat, curPos, curPos + cols);\n      for(var ix = r + 1;ix < rows;ix += 1) {\n        var pos = ix * cols;\n        var p = proj(nextMat, pos, nextMat, curPos, cols);\n        for(var c = 0;c < cols;c += 1) {\n          nextMat[pos + c] -= p[c];\n        }\n      }\n    }\n    return new Matrix(nextMat, rows, cols);\n  };\n  this.pcaPositions = function(positions) {\n    var pca = thatMDS.pca(positions);\n    return positions.mul(pca);\n  };\n  this.landmarkMDS = function(dist, dims) {\n    var res;\n    thatMDS.landmarkMDSAsync(dist, dims, function(mat) {\n      res = mat;\n    }, thatMDS.getCallDirect());\n    return res;\n  };\n  this.landmarkMDSAsync = function(dist, dims, cb, argCall) {\n\n    function landmarkMatrix(mat) {\n      thatMDS.DEBUG && mat.noNaNs();\n      var rows = mat.rows();\n      var cols = mat.cols();\n      var perm = new Uint32Array(rows);\n      for(var r = 0;r < rows;r += 1) {\n        mat.rowIter(r, function(v, r, c) {\n          if(!v) {\n            perm[r] = c;\n          }\n        });\n      }\n      thatMDS.DEBUG && thatMDS.noNaNs(perm);\n      var lm = mat.createArray(rows, rows);\n      var pos = 0;\n      for(var r = 0;r < rows;r += 1) {\n        var mPos = r * cols;\n        for(var c = 0;c < cols;c += 1) {\n          lm[pos] = mat.getUnsafe(mPos + perm[c]);\n          pos += 1;\n        }\n      }\n      thatMDS.DEBUG && thatMDS.noNaNs(lm);\n      return new Matrix(lm, rows, rows);\n    }\n\n    function landmarkResult(dist, dims, eigenVecs, eigenVals) {\n      var rows = dist.rows();\n      var cols = dist.cols();\n      var distSq = dist.squareElements();\n      thatMDS.DEBUG && distSq.noNaNs();\n\n      var mean = dist.createArray(1, cols);\n      for(var c = 0;c < cols;c += 1) {\n        distSq.colIter(c, function(v) {\n          mean[c] += v;\n        });\n        mean[c] /= rows;\n      }\n      thatMDS.DEBUG && thatMDS.noNaNs(mean);\n\n      thatMDS.DEBUG && eigenVecs.noNaNs();\n      thatMDS.DEBUG && thatMDS.noZeros(eigenVals);\n      var tmp = eigenVecs.createArray(eigenVecs.rows(), eigenVecs.cols());\n      var pos = 0;\n      for(var r = 0;r < eigenVecs.rows();r += 1) {\n        var div = Math.sqrt(Math.abs(eigenVals[r])); // TODO not sure how to handle negative values\n        eigenVecs.rowIter(r, function(v) {\n          tmp[pos] = v / div;\n          pos += 1;\n        });\n      }\n      thatMDS.DEBUG && thatMDS.noNaNs(tmp);\n\n      var positions = dist.createArray(cols, dims);\n      pos = 0;\n      for(var e = 0;e < cols;e += 1) {\n        var m = mean[e];\n        var tPos = 0;\n        for(var d = 0;d < dims;d += 1) {\n          var cur = 0;\n          distSq.colIter(e, function(v) {\n            cur -= 0.5 * (v - m) * tmp[tPos];\n            tPos += 1;\n          });\n          positions[pos] = cur;\n          pos += 1;\n        }\n      }\n      thatMDS.DEBUG && thatMDS.noNaNs(positions);\n      return new Matrix(positions, cols, dims);\n    }\n\n    var call = arguments.length > 3 ? argCall : thatMDS.CALL_ASYNC;\n    var lm = landmarkMatrix(dist);\n    var eigenVals = dist.createArray(1, dims);\n    lm.squareElements().doubleCenter().scale(-0.5).eigenAsync(eigenVals, function(eigenVecs) {\n      cb(landmarkResult(dist, dims, eigenVecs, eigenVals));\n    }, call);\n  };\n  this.normalizeVec = function(vec, f, t) {\n    var from = arguments.length > 1 ? f : 0;\n    var to = arguments.length > 2 ? t : vec.length;\n    var sum = 0;\n    for(var i = from;i < to;i += 1) {\n      sum += vec[i] * vec[i];\n    }\n    sum = Math.sqrt(sum);\n    if(sum < 1e-30 || !Number.isFinite(sum)) { // don't scale when really small\n      return;\n    }\n    for(var i = from;i < to;i += 1) {\n      vec[i] /= sum;\n    }\n  };\n  this.lengthSq = function(vec, f, t) {\n    var from = arguments.length > 1 ? f : 0;\n    var to = arguments.length > 2 ? t : vec.length;\n    var sum = 0;\n    for(var i = from;i < to;i += 1) {\n      sum += vec[i] * vec[i];\n    }\n    return sum;\n  };\n  this.prod = function(vecA, fromA, vecB, fromB, len) {\n    var sum = 0;\n    var posA = fromA;\n    var posB = fromB;\n    for(var i = 0;i < len;i += 1) {\n      sum += vecA[posA] * vecB[posB];\n      posA += 1;\n      posB += 1;\n    }\n    return sum;\n  };\n  this.xcopy = function(fromVec, fromStart, toVec, toStart, len) {\n    var fromPos = fromStart;\n    var toPos = toStart;\n    for(var i = 0;i < len;i += 1) {\n      toVec[toPos] = fromVec[fromPos];\n      fromPos += 1;\n      toPos += 1;\n    }\n  };\n  this.convertToMatrix = function(arrs, useFloat32) {\n    var rows = arrs.length;\n    if(!rows) {\n      console.warn(\"invalid dimension (rows)\", rows);\n      return null;\n    }\n    var cols = arrs[0].length;\n    if(!cols) {\n      console.warn(\"invalid dimension (cols)\", cols);\n      return null;\n    }\n    var size = rows * cols;\n    var mat = useFloat32 ? new Float32Array(size) : new Float64Array(size);\n    var pos = 0;\n    for(var r = 0;r < rows;r += 1) {\n      var row = arrs[r];\n      if(row.length !== cols) {\n        console.warn(\"invalid dimension in row \" + r, row.length, cols);\n        return null;\n      }\n      for(var c = 0;c < cols;c += 1) {\n        mat[pos] = row[c];\n        pos += 1;\n      }\n    }\n    return new Matrix(mat, rows, cols);\n  };\n  this.eye = function(rows, c, useFloat32) {\n    var cols = arguments.length < 2 ? rows : c;\n    var size = rows * cols;\n    if(rows <= 0 || cols <= 0) {\n      console.warn(\"invalid dimensions\", rows, cols);\n      return null;\n    }\n    var mat = useFloat32 ? new Float32Array(size) : new Float64Array(size);\n    var pos = 0;\n    for(var i = 0;i < Math.min(rows, cols);i += 1) {\n      mat[pos] = 1;\n      pos += cols + 1;\n    }\n    return new Matrix(mat, rows, cols);\n  };\n  this.pivotRandom = function(m, k) {\n    if(!m.isQuadratic()) {\n      console.warn(\"quadratic matrix needed\", m.rows(), m.cols());\n      return null;\n    }\n    if(k < m.rows()) {\n      console.warn(\"requested more pivots than elements\", k, m.rows(), m.cols());\n      return null;\n    }\n    var mat = m.createArray(k, m.cols());\n    var pivots = {};\n    var pos = 0;\n    for(var i = 0;i < k;i += 1) {\n      var pivot = 0;\n      do {\n        pivot = Math.random() * m.cols();\n      } while(pivots[pivot]);\n      pivots[pivot] = true;\n      for(var c = 0;c < m.cols();c += 1) {\n        mat[pos] = m.distance(pivot, c);\n        pos += 1;\n      }\n    }\n    return new Matrix(mat, k, m.cols());\n  };\n\n  function Matrix(mat, rows, cols) {\n\n    this.rows = function() {\n      return rows;\n    };\n    this.cols = function() {\n      return cols;\n    };\n    this.isQuadratic = function() {\n      return rows === cols;\n    };\n    Matrix.prototype.noNaNs = function() {\n      thatMDS.noNaNs(mat);\n    };\n    this.someRows = function(cb) {\n      var pos = 0;\n      for(var r = 0;r < rows;r += 1) {\n        if(cb(mat.subarray(pos, pos + cols), r)) {\n          return true;\n        }\n        pos += cols;\n      }\n      return false;\n    };\n    this.everyRows = function(cb) {\n      return !this.someRows(function(row, ix) {\n        return !cb(row, ix);\n      });\n    };\n    this.rowsIter = function(cb) {\n      var pos = 0;\n      for(var r = 0;r < rows;r += 1) {\n        cb(mat.subarray(pos, pos + cols), r);\n        pos += cols;\n      }\n    };\n    this.rowIter = function(row, cb) {\n      var pos = row * cols;\n      for(var i = 0;i < cols;i += 1) {\n        cb(mat[pos], row, i);\n        pos += 1;\n      }\n    };\n    this.colIter = function(col, cb) {\n      var pos = col;\n      for(var i = 0;i < rows;i += 1) {\n        cb(mat[pos], i, col);\n        pos += cols;\n      }\n    };\n    this.getUnsafe = function(pos) {\n      return mat[pos];\n    };\n    this.createArray = function(rows, cols) {\n      var size = rows * cols;\n      return mat.byteLength > 24 ? new Float64Array(size) : new Float32Array(size);\n    };\n  } // Matrix\n  Matrix.prototype.toString = function() {\n    var res = \"\";\n    for(var r = 0;r < this.rows();r += 1) {\n      this.rowIter(r, function(e, c) {\n        res += \" \" + e;\n      });\n      res += \"\\n\";\n    }\n    return res;\n  };\n  Matrix.prototype.iter = function(matB, row, col, cb) {\n    Matrix.iter(this, matB, row, col, cb);\n  };\n  Matrix.prototype.mul = function(matB) {\n    return Matrix.mul(this, matB);\n  };\n  Matrix.prototype.add = function(matB) {\n    return Matrix.add(this, matB);\n  };\n  Matrix.prototype.neg = function() {\n    var mat = this.createArray(this.rows(), this.cols());\n    for(var pos = 0;pos < mat.length;pos += 1) {\n      mat[pos] = -this.getUnsafe(pos);\n    }\n    return new Matrix(mat, this.rows(), this.cols());\n  };\n  Matrix.prototype.scale = function(scale) {\n    var mat = this.createArray(this.rows(), this.cols());\n    for(var pos = 0;pos < mat.length;pos += 1) {\n      mat[pos] = scale * this.getUnsafe(pos);\n    }\n    return new Matrix(mat, this.rows(), this.cols());\n  };\n  Matrix.prototype.squareElements = function() {\n    var mat = this.createArray(this.rows(), this.cols());\n    for(var pos = 0;pos < mat.length;pos += 1) {\n      mat[pos] = this.getUnsafe(pos) * this.getUnsafe(pos);\n    }\n    return new Matrix(mat, this.rows(), this.cols());\n  };\n  Matrix.prototype.colCenter = function() {\n    var rows = this.rows();\n    var cols = this.cols();\n    var orig = this;\n    var mat = this.createArray(rows, cols);\n    for(var c = 0;c < cols;c += 1) {\n      var avg = 0;\n      orig.colIter(c, function(v) {\n        avg += v;\n      });\n      avg /= rows;\n      var pos = c;\n      orig.colIter(c, function(v) {\n        mat[pos] = v - avg;\n        pos += cols;\n      });\n    }\n    return new Matrix(mat, rows, cols);\n  };\n  Matrix.prototype.rowCenter = function() {\n    var rows = this.rows();\n    var cols = this.cols();\n    var orig = this;\n    var mat = this.createArray(rows, cols);\n    var pos = 0;\n    for(var r = 0;r < rows;r += 1) {\n      var avg = 0;\n      orig.rowIter(r, function(v) {\n        avg += v;\n      });\n      avg /= cols;\n      orig.rowIter(r, function(v) {\n        mat[pos] = v - avg;\n        pos += 1;\n      });\n    }\n    return new Matrix(mat, rows, cols);\n  };\n  Matrix.prototype.doubleCenter = function() {\n    var rows = this.rows();\n    var cols = this.cols();\n    var mat = this.createArray(rows, cols);\n    for(var r = 0;r < rows;r += 1) {\n      var avg = 0;\n      this.rowIter(r, function(v) {\n        avg += v;\n      });\n      avg /= cols;\n      var pos = r * cols;\n      this.rowIter(r, function(v) {\n        mat[pos] = v - avg;\n        pos += 1;\n      });\n    }\n    for(var c = 0;c < cols;c += 1) {\n      var avg = 0;\n      var pos = c;\n      for(var r = 0;r < rows;r += 1) {\n        avg += mat[pos];\n        pos += cols;\n      }\n      avg /= rows;\n      pos = c;\n      for(var r = 0;r < rows;r += 1) {\n        mat[pos] -= avg;\n        pos += cols;\n      }\n    }\n    return new Matrix(mat, rows, cols);\n  };\n  Matrix.prototype.distance = function(colA, colB) {\n    var res = 0;\n    var posA = colA;\n    var posB = colB;\n    for(var r = 0;r < this.rows();r += 1) {\n      var v = this.getUnsafe(posA) - this.getUnsafe(posB);\n      res += v * v;\n      posA += this.cols();\n      posB += this.cols();\n    }\n    return Math.sqrt(res);\n  };\n  this.EIGEN_EPS = 1e-7;\n  this.EIGEN_ITER = 10000;\n  this.EIGEN_ITER_ASYNC = 200;\n  Matrix.prototype.eigen = function(eigenVals) {\n    var res;\n    this.eigenAsync(eigenVals, function(mat) {\n      res = mat;\n    }, thatMDS.getCallDirect());\n    return res;\n  };\n  Matrix.prototype.eigenAsync = function(eigenVals, cb, argCall) {\n    var call = arguments.length > 2 ? argCall : thatMDS.CALL_ASYNC;\n    var mat = this;\n    var d = eigenVals.length;\n    var rows = mat.rows();\n    var cols = mat.cols();\n    var content = mat.createArray(rows, cols);\n    var pos = 0;\n    for(var r = 0;r < rows;r += 1) {\n      mat.rowIter(r, function(v) {\n        content[pos] = v;\n        pos += 1;\n      });\n    }\n    var eigenVecs = mat.createArray(d, rows);\n    var ePos = -rows;\n    var m = 0;\n    var r = 0;\n    var iter = 0;\n\n    function innerLoop() {\n      for(var ix = 0;ix < thatMDS.EIGEN_ITER_ASYNC;ix += 1) {\n        if(!(Math.abs(1 - r) > thatMDS.EIGEN_EPS && iter < thatMDS.EIGEN_ITER)) {\n          m += 1;\n          iterate();\n          return;\n        }\n        var q = mat.createArray(1, rows);\n        pos = 0;\n        for(var rix = 0;rix < rows;rix += 1) {\n          for(var cix = 0;cix < cols;cix += 1) {\n            q[rix] += content[pos] * eigenVecs[ePos + cix];\n            pos += 1;\n          }\n        }\n        eigenVals[m] = thatMDS.prod(eigenVecs, ePos, q, 0, rows);\n        thatMDS.normalizeVec(q);\n        r = Math.abs(thatMDS.prod(eigenVecs, ePos, q, 0, rows));\n        thatMDS.xcopy(q, 0, eigenVecs, ePos, rows);\n        iter += 1;\n      }\n      call(innerLoop);\n    } // innerLoop\n\n    function iterate() {\n      if(!(m < d)) {\n        cb(new Matrix(eigenVecs, d, rows));\n        return;\n      }\n\n      if(m > 0) {\n        pos = 0;\n        for(var rix = 0;rix < rows;rix += 1) {\n          for(var cix = 0;cix < cols;cix += 1) {\n            content[pos] -= eigenVals[m - 1] * eigenVecs[ePos + rix] * eigenVecs[ePos + cix];\n            pos += 1;\n          }\n        }\n      }\n      ePos += rows;\n      pos = ePos;\n      for(var i = 0;i < rows;i += 1) {\n        eigenVecs[pos] = Math.random();\n        pos += 1;\n      }\n      thatMDS.normalizeVec(eigenVecs, ePos, ePos + rows);\n      r = 0;\n      iter = 0;\n\n      call(innerLoop);\n    } // iterate\n\n    iterate();\n  };\n  Matrix.prototype.powerIter = function() {\n    var res;\n    this.powerIterAsync(function(r) {\n      res = r;\n    }, thatMDS.getCallDirect());\n    return res;\n  };\n  Matrix.prototype.powerIterAsync = function(cb, argCall) {\n    var call = arguments.length > 1 ? argCall : thatMDS.CALL_ASYNC;\n    var mat = this;\n    var rows = mat.rows();\n    var cols = mat.cols();\n    var r = mat.createArray(1, cols);\n    for(var i = 0;i < cols;i += 1) {\n      r[i] = Math.random();\n    }\n    var len = Number.POSITIVE_INFINITY;\n    var stop = false;\n    var iter = 0;\n\n    function iterate() {\n      for(var ix = 0;ix < thatMDS.EIGEN_ITER_ASYNC;ix += 1) {\n        if(iter >= thatMDS.EIGEN_ITER || stop) {\n          cb(r);\n          return;\n        }\n        var s = mat.createArray(1, cols);\n        for(var row = 0;row < rows;row += 1) {\n          var prod = 0;\n          mat.rowIter(row, function(v, row, col) {\n            prod += v * r[col];\n          });\n          mat.rowIter(row, function(v, row, col) {\n            s[col] += prod * v;\n          });\n        }\n        var nl = thatMDS.lengthSq(s);\n        if(Math.abs(len - nl) < thatMDS.EIGEN_EPS) {\n          stop = true;\n        }\n        len = nl;\n        thatMDS.normalizeVec(s);\n        r = s;\n        iter += 1;\n      }\n      call(iterate);\n    }\n\n    iterate();\n  };\n  Matrix.iter = function(matA, matB, row, col, cb) {\n    if(matA.cols() !== matB.rows()) {\n      console.warn(\"incompatible dimensions\", matA.rows() + \"x\" + matA.cols(), matB.rows() + \"x\" + matB.cols());\n      return;\n    }\n    var posA = row * matA.cols();\n    var posB = col;\n    for(var i = 0;i < matA.cols();i += 1) {\n      cb(matA.getUnsafe(posA), matB.getUnsafe(posB), row, i, col);\n      posA += 1;\n      posB += matB.cols();\n    }\n  };\n  Matrix.mul = function(matA, matB) {\n    if(matA.cols() !== matB.rows()) {\n      console.warn(\"incompatible dimensions\", matA.rows() + \"x\" + matA.cols(), matB.rows() + \"x\" + matB.cols());\n      return null;\n    }\n    // cache friendly iteration (a rows -> a cols/b rows -> b cols)\n    // TODO experiment with (a cols -> a rows -> b cols)\n    var mat = matA.createArray(matA.rows(), matB.cols());\n    for(var r = 0;r < matA.rows();r += 1) {\n      matA.rowIter(r, function(a, _, k) {\n        var pos = r * matB.cols();\n        matB.rowIter(k, function(b, _, __) {\n          mat[pos] += a * b;\n          pos += 1;\n        });\n      });\n    }\n    return new Matrix(mat, matA.rows(), matB.cols());\n  };\n  Matrix.add = function(matA, matB) {\n    if(matA.rows() !== matB.rows() || matA.cols() !== matB.cols()) {\n      console.warn(\"incompatible dimensions\", matA.rows() + \"x\" + matA.cols(), matB.rows() + \"x\" + matB.cols());\n      return null;\n    }\n    var mat = matA.createArray(matA.rows(), matA.cols());\n    for(var pos = 0;pos < mat.length;pos += 1) {\n      mat[pos] = matA.getUnsafe(pos) + matB.getUnsafe(pos);\n    }\n    return new Matrix(mat, matA.rows(), matA.cols());\n  };\n\n}; // mdsjs\n\n//mdsjs = new mdsjs(); // create instance\nmodule.exports = new mdsjs();","//import * as selection from \"d3-selection\";\r\n//import * as drag from \"d3-drag\";\r\nimport * as d3 from \"d3\";\r\nimport classifyPoint from \"robust-point-in-polygon\";\r\n\r\nexport default function() {\r\n\r\n    var items =[],\r\n        closePathDistance = 75,\r\n        closePathSelect = true,\r\n        isPathClosed = false,\r\n        hoverSelect = true,\r\n        targetArea,\r\n        on = {start:function(){}, draw: function(){}, end: function(){}};\r\n\r\n    // Function to execute on call\r\n    function lasso(_this) {\r\n        //console.log(\"lasso initialize\",_this);\r\n        // add a new group for the lasso\r\n        var g = _this.append(\"g\")\r\n            .attr(\"class\",\"lasso\");\r\n        \r\n        // add the drawn path for the lasso\r\n        var dyn_path = g.append(\"path\")\r\n            .attr(\"class\",\"drawn\");\r\n        \r\n        // add a closed path\r\n        var close_path = g.append(\"path\")\r\n            .attr(\"class\",\"loop_close\");\r\n        \r\n        // add an origin node\r\n        var origin_node = g.append(\"circle\")\r\n            .attr(\"class\",\"origin\");\r\n\r\n        // The transformed lasso path for rendering\r\n        var tpath;\r\n\r\n        // The lasso origin for calculations\r\n        var origin;\r\n\r\n        // The transformed lasso origin for rendering\r\n        var torigin;\r\n\r\n        // Store off coordinates drawn\r\n        var drawnCoords;\r\n\r\n         // Apply drag behaviors\r\n        var dragAction = d3.drag()\r\n            .on(\"start\",dragstart)\r\n            .on(\"drag\",dragmove)\r\n            .on(\"end\",dragend);\r\n\r\n        // Call drag\r\n        targetArea.call(dragAction);\r\n\r\n        function dragstart() {\r\n            // Init coordinates\r\n            drawnCoords = [];\r\n\r\n            // Initialize paths\r\n            tpath = \"\";\r\n            dyn_path.attr(\"d\",null);\r\n            close_path.attr(\"d\",null);\r\n\r\n            // Set every item to have a false selection and reset their center point and counters\r\n            items.nodes().forEach(function(e) {            \r\n                e.__lasso.possible = false;\r\n                e.__lasso.selected = false;\r\n                e.__lasso.hoverSelect = false;\r\n                e.__lasso.loopSelect = false;\r\n                \r\n                var box = e.getBoundingClientRect();\r\n                e.__lasso.lassoPoint = [Math.round(box.left + box.width/2),Math.round(box.top + box.height/2)];\r\n            });\r\n\r\n            // if hover is on, add hover function\r\n            if(hoverSelect) {\r\n                items.on(\"mouseover.lasso\",function() {\r\n                    // if hovered, change lasso selection attribute to true\r\n                    this.__lasso.hoverSelect = true;\r\n                });\r\n            }\r\n\r\n            // Run user defined start function\r\n            on.start();\r\n        }\r\n\r\n        function dragmove() {\r\n            // Get mouse position within body, used for calculations\r\n            var x,y;\r\n            if(d3.event.sourceEvent.type === \"touchmove\") {\r\n                x = d3.event.sourceEvent.touches[0].clientX;\r\n                y = d3.event.sourceEvent.touches[0].clientY;\r\n            }\r\n            else {\r\n                x = d3.event.sourceEvent.clientX;\r\n                y = d3.event.sourceEvent.clientY;\r\n            }\r\n            \r\n\r\n            // Get mouse position within drawing area, used for rendering\r\n            var tx = d3.mouse(this)[0];\r\n            var ty = d3.mouse(this)[1];\r\n\r\n            // Initialize the path or add the latest point to it\r\n            if (tpath===\"\") {\r\n                tpath = tpath + \"M \" + tx + \" \" + ty;\r\n                origin = [x,y];\r\n                torigin = [tx,ty];\r\n                // Draw origin node\r\n                origin_node\r\n                    .attr(\"cx\",tx)\r\n                    .attr(\"cy\",ty)\r\n                    .attr(\"r\",7)\r\n                    .attr(\"display\",null);\r\n            }\r\n            else {\r\n                tpath = tpath + \" L \" + tx + \" \" + ty;\r\n            }\r\n\r\n            drawnCoords.push([x,y]);\r\n\r\n            // Calculate the current distance from the lasso origin\r\n            var distance = Math.sqrt(Math.pow(x-origin[0],2)+Math.pow(y-origin[1],2));\r\n\r\n            // Set the closed path line\r\n            var close_draw_path = \"M \" + tx + \" \" + ty + \" L \" + torigin[0] + \" \" + torigin[1];\r\n\r\n            // Draw the lines\r\n            dyn_path.attr(\"d\",tpath);\r\n\r\n            close_path.attr(\"d\",close_draw_path);\r\n\r\n            // Check if the path is closed\r\n            isPathClosed = distance<=closePathDistance ? true : false;\r\n\r\n            // If within the closed path distance parameter, show the closed path. otherwise, hide it\r\n            if(isPathClosed && closePathSelect) {\r\n                close_path.attr(\"display\",null);\r\n            }\r\n            else {\r\n                close_path.attr(\"display\",\"none\");\r\n            }\r\n\r\n            items.nodes().forEach(function(n) {\r\n                n.__lasso.loopSelect = (isPathClosed && closePathSelect) ? (classifyPoint(drawnCoords,n.__lasso.lassoPoint) < 1) : false; \r\n                n.__lasso.possible = n.__lasso.hoverSelect || n.__lasso.loopSelect; \r\n            });\r\n\r\n            on.draw();\r\n        }\r\n\r\n        function dragend() {\r\n            // Remove mouseover tagging function\r\n            items.on(\"mouseover.lasso\",null);\r\n\r\n            items.nodes().forEach(function(n) {\r\n                n.__lasso.selected = n.__lasso.possible;\r\n                n.__lasso.possible = false;\r\n            });\r\n\r\n            // Clear lasso\r\n            dyn_path.attr(\"d\",null);\r\n            close_path.attr(\"d\",null);\r\n            origin_node.attr(\"display\",\"none\");\r\n\r\n            // Run user defined end function\r\n            on.end();\r\n        }\r\n    }\r\n\r\n    // Set or get list of items for lasso to select\r\n    lasso.items  = function(_) {\r\n        if (!arguments.length) return items;\r\n        items = _;\r\n        var nodes = items.nodes();\r\n        nodes.forEach(function(n) {\r\n            n.__lasso = {\r\n                \"possible\": false,\r\n                \"selected\": false\r\n            };\r\n        });\r\n        return lasso;\r\n    };\r\n\r\n    // Return possible items\r\n    lasso.possibleItems = function() {\r\n        return items.filter(function() {\r\n            return this.__lasso.possible;\r\n        });\r\n    }\r\n\r\n    // Return selected items\r\n    lasso.selectedItems = function() {\r\n        return items.filter(function() {\r\n            return this.__lasso.selected;\r\n        });\r\n    }\r\n\r\n    // Return not possible items\r\n    lasso.notPossibleItems = function() {\r\n        return items.filter(function() {\r\n            return !this.__lasso.possible;\r\n        });\r\n    }\r\n\r\n    // Return not selected items\r\n    lasso.notSelectedItems = function() {\r\n        return items.filter(function() {\r\n            return !this.__lasso.selected;\r\n        });\r\n    }\r\n\r\n    // Distance required before path auto closes loop\r\n    lasso.closePathDistance  = function(_) {\r\n        if (!arguments.length) return closePathDistance;\r\n        closePathDistance = _;\r\n        return lasso;\r\n    };\r\n\r\n    // Option to loop select or not\r\n    lasso.closePathSelect = function(_) {\r\n        if (!arguments.length) return closePathSelect;\r\n        closePathSelect = _===true ? true : false;\r\n        return lasso;\r\n    };\r\n\r\n    // Not sure what this is for\r\n    lasso.isPathClosed = function(_) {\r\n        if (!arguments.length) return isPathClosed;\r\n        isPathClosed = _===true ? true : false;\r\n        return lasso;\r\n    };\r\n\r\n    // Option to select on hover or not\r\n    lasso.hoverSelect = function(_) {\r\n        if (!arguments.length) return hoverSelect;\r\n        hoverSelect = _===true ? true : false;\r\n        return lasso;\r\n    };\r\n\r\n    // Events\r\n    lasso.on = function(type,_) {\r\n        if(!arguments.length) return on;\r\n        if(arguments.length===1) return on[type];\r\n        var types = [\"start\",\"draw\",\"end\"];\r\n        if(types.indexOf(type)>-1) {\r\n            on[type] = _;\r\n        }\r\n        return lasso;\r\n    };\r\n\r\n    // Area where lasso can be triggered from\r\n    lasso.targetArea = function(_) {\r\n        if(!arguments.length) return targetArea;\r\n        targetArea = _;\r\n        return lasso;\r\n    }\r\n\r\n\r\n    \r\n    return lasso;\r\n};","// create main global object\r\nvar tsnejs = tsnejs || { REVISION: 'ALPHA' };\r\n\r\n(function(global) {\r\n  \"use strict\";\r\n\r\n  // utility function\r\n  var assert = function(condition, message) {\r\n    if (!condition) { throw message || \"Assertion failed\"; }\r\n  }\r\n\r\n  // syntax sugar\r\n  var getopt = function(opt, field, defaultval) {\r\n    if(opt.hasOwnProperty(field)) {\r\n      return opt[field];\r\n    } else {\r\n      return defaultval;\r\n    }\r\n  }\r\n\r\n  // return 0 mean unit standard deviation random number\r\n  var return_v = false;\r\n  var v_val = 0.0;\r\n  var gaussRandom = function() {\r\n    if(return_v) { \r\n      return_v = false;\r\n      return v_val; \r\n    }\r\n    var u = 2*Math.random()-1;\r\n    var v = 2*Math.random()-1;\r\n    var r = u*u + v*v;\r\n    if(r == 0 || r > 1) return gaussRandom();\r\n    var c = Math.sqrt(-2*Math.log(r)/r);\r\n    v_val = v*c; // cache this for next function call for efficiency\r\n    return_v = true;\r\n    return u*c;\r\n  }\r\n\r\n  // return random normal number\r\n  var randn = function(mu, std){ return mu+gaussRandom()*std; }\r\n\r\n  // utilitity that creates contiguous vector of zeros of size n\r\n  var zeros = function(n) {\r\n    if(typeof(n)==='undefined' || isNaN(n)) { return []; }\r\n    if(typeof ArrayBuffer === 'undefined') {\r\n      // lacking browser support\r\n      var arr = new Array(n);\r\n      for(var i=0;i<n;i++) { arr[i]= 0; }\r\n      return arr;\r\n    } else {\r\n      return new Float64Array(n); // typed arrays are faster\r\n    }\r\n  }\r\n\r\n  // utility that returns 2d array filled with random numbers\r\n  // or with value s, if provided\r\n  var randn2d = function(n,d,s) {\r\n    var uses = typeof s !== 'undefined';\r\n    var x = [];\r\n    for(var i=0;i<n;i++) {\r\n      var xhere = [];\r\n      for(var j=0;j<d;j++) { \r\n        if(uses) {\r\n          xhere.push(s); \r\n        } else {\r\n          xhere.push(randn(0.0, 1e-4)); \r\n        }\r\n      }\r\n      x.push(xhere);\r\n    }\r\n    return x;\r\n  }\r\n\r\n  // compute L2 distance between two vectors\r\n  var L2 = function(x1, x2) {\r\n    var D = x1.length;\r\n    var d = 0;\r\n    for(var i=0;i<D;i++) { \r\n      var x1i = x1[i];\r\n      var x2i = x2[i];\r\n      d += (x1i-x2i)*(x1i-x2i);\r\n    }\r\n    return d;\r\n  }\r\n\r\n  // compute pairwise distance in all vectors in X\r\n  var xtod = function(X) {\r\n    var N = X.length;\r\n    var dist = zeros(N * N); // allocate contiguous array\r\n    for(var i=0;i<N;i++) {\r\n      for(var j=i+1;j<N;j++) {\r\n        var d = L2(X[i], X[j]);\r\n        dist[i*N+j] = d;\r\n        dist[j*N+i] = d;\r\n      }\r\n    }\r\n    return dist;\r\n  }\r\n\r\n  // compute (p_{i|j} + p_{j|i})/(2n)\r\n  var d2p = function(D, perplexity, tol) {\r\n    var Nf = Math.sqrt(D.length); // this better be an integer\r\n    var N = Math.floor(Nf);\r\n    assert(N === Nf, \"D should have square number of elements.\");\r\n    var Htarget = Math.log(perplexity); // target entropy of distribution\r\n    var P = zeros(N * N); // temporary probability matrix\r\n\r\n    var prow = zeros(N); // a temporary storage compartment\r\n    for(var i=0;i<N;i++) {\r\n      var betamin = -Infinity;\r\n      var betamax = Infinity;\r\n      var beta = 1; // initial value of precision\r\n      var done = false;\r\n      var maxtries = 50;\r\n\r\n      // perform binary search to find a suitable precision beta\r\n      // so that the entropy of the distribution is appropriate\r\n      var num = 0;\r\n      while(!done) {\r\n        //debugger;\r\n\r\n        // compute entropy and kernel row with beta precision\r\n        var psum = 0.0;\r\n        for(var j=0;j<N;j++) {\r\n          var pj = Math.exp(- D[i*N+j] * beta);\r\n          if(i===j) { pj = 0; } // we dont care about diagonals\r\n          prow[j] = pj;\r\n          psum += pj;\r\n        }\r\n        // normalize p and compute entropy\r\n        var Hhere = 0.0;\r\n        for(var j=0;j<N;j++) {\r\n          if(psum == 0) {\r\n             var pj = 0;\r\n          } else {\r\n             var pj = prow[j] / psum;\r\n          }\r\n          prow[j] = pj;\r\n          if(pj > 1e-7) Hhere -= pj * Math.log(pj);\r\n        }\r\n\r\n        // adjust beta based on result\r\n        if(Hhere > Htarget) {\r\n          // entropy was too high (distribution too diffuse)\r\n          // so we need to increase the precision for more peaky distribution\r\n          betamin = beta; // move up the bounds\r\n          if(betamax === Infinity) { beta = beta * 2; }\r\n          else { beta = (beta + betamax) / 2; }\r\n\r\n        } else {\r\n          // converse case. make distrubtion less peaky\r\n          betamax = beta;\r\n          if(betamin === -Infinity) { beta = beta / 2; }\r\n          else { beta = (beta + betamin) / 2; }\r\n        }\r\n\r\n        // stopping conditions: too many tries or got a good precision\r\n        num++;\r\n        if(Math.abs(Hhere - Htarget) < tol) { done = true; }\r\n        if(num >= maxtries) { done = true; }\r\n      }\r\n\r\n      // console.log('data point ' + i + ' gets precision ' + beta + ' after ' + num + ' binary search steps.');\r\n      // copy over the final prow to P at row i\r\n      for(var j=0;j<N;j++) { P[i*N+j] = prow[j]; }\r\n\r\n    } // end loop over examples i\r\n\r\n    // symmetrize P and normalize it to sum to 1 over all ij\r\n    var Pout = zeros(N * N);\r\n    var N2 = N*2;\r\n    for(var i=0;i<N;i++) {\r\n      for(var j=0;j<N;j++) {\r\n        Pout[i*N+j] = Math.max((P[i*N+j] + P[j*N+i])/N2, 1e-100);\r\n      }\r\n    }\r\n\r\n    return Pout;\r\n  }\r\n\r\n  // helper function\r\n  function sign(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; }\r\n\r\n  var tSNE = function(opt) {\r\n    var opt = opt || {};\r\n    this.perplexity = getopt(opt, \"perplexity\", 30); // effective number of nearest neighbors\r\n    this.dim = getopt(opt, \"dim\", 2); // by default 2-D tSNE\r\n    this.epsilon = getopt(opt, \"epsilon\", 10); // learning rate\r\n\r\n    this.iter = 0;\r\n  }\r\n\r\n  tSNE.prototype = {\r\n\r\n    // this function takes a set of high-dimensional points\r\n    // and creates matrix P from them using gaussian kernel\r\n    initDataRaw: function(X) {\r\n      var N = X.length;\r\n      var D = X[0].length;\r\n      assert(N > 0, \" X is empty? You must have some data!\");\r\n      assert(D > 0, \" X[0] is empty? Where is the data?\");\r\n      var dists = xtod(X); // convert X to distances using gaussian kernel\r\n      this.P = d2p(dists, this.perplexity, 1e-4); // attach to object\r\n      this.N = N; // back up the size of the dataset\r\n      this.initSolution(); // refresh this\r\n    },\r\n\r\n    // this function takes a given distance matrix and creates\r\n    // matrix P from them.\r\n    // D is assumed to be provided as a list of lists, and should be symmetric\r\n    initDataDist: function(D) {\r\n      var N = D.length;\r\n      assert(N > 0, \" X is empty? You must have some data!\");\r\n      // convert D to a (fast) typed array version\r\n      var dists = zeros(N * N); // allocate contiguous array\r\n      for(var i=0;i<N;i++) {\r\n        for(var j=i+1;j<N;j++) {\r\n          var d = D[i][j];\r\n          dists[i*N+j] = d;\r\n          dists[j*N+i] = d;\r\n        }\r\n      }\r\n      this.P = d2p(dists, this.perplexity, 1e-4);\r\n      this.N = N;\r\n      this.initSolution(); // refresh this\r\n    },\r\n\r\n    // (re)initializes the solution to random\r\n    initSolution: function() {\r\n      // generate random solution to t-SNE\r\n      this.Y = randn2d(this.N, this.dim); // the solution\r\n      this.gains = randn2d(this.N, this.dim, 1.0); // step gains to accelerate progress in unchanging directions\r\n      this.ystep = randn2d(this.N, this.dim, 0.0); // momentum accumulator\r\n      this.iter = 0;\r\n    },\r\n\r\n    // return pointer to current solution\r\n    getSolution: function() {\r\n      return this.Y;\r\n    },\r\n\r\n    // perform a single step of optimization to improve the embedding\r\n    step: function() {\r\n      this.iter += 1;\r\n      var N = this.N;\r\n\r\n      var cg = this.costGrad(this.Y); // evaluate gradient\r\n      var cost = cg.cost;\r\n      var grad = cg.grad;\r\n\r\n      // perform gradient step\r\n      var ymean = zeros(this.dim);\r\n      for(var i=0;i<N;i++) {\r\n        for(var d=0;d<this.dim;d++) {\r\n          var gid = grad[i][d];\r\n          var sid = this.ystep[i][d];\r\n          var gainid = this.gains[i][d];\r\n\r\n          // compute gain update\r\n          var newgain = sign(gid) === sign(sid) ? gainid * 0.8 : gainid + 0.2;\r\n          if(newgain < 0.01) newgain = 0.01; // clamp\r\n          this.gains[i][d] = newgain; // store for next turn\r\n\r\n          // compute momentum step direction\r\n          var momval = this.iter < 250 ? 0.5 : 0.8;\r\n          var newsid = momval * sid - this.epsilon * newgain * grad[i][d];\r\n          this.ystep[i][d] = newsid; // remember the step we took\r\n\r\n          // step!\r\n          this.Y[i][d] += newsid; \r\n\r\n          ymean[d] += this.Y[i][d]; // accumulate mean so that we can center later\r\n        }\r\n      }\r\n\r\n      // reproject Y to be zero mean\r\n      for(var i=0;i<N;i++) {\r\n        for(var d=0;d<this.dim;d++) {\r\n          this.Y[i][d] -= ymean[d]/N;\r\n        }\r\n      }\r\n\r\n      //if(this.iter%100===0) console.log('iter ' + this.iter + ', cost: ' + cost);\r\n      return cost; // return current cost\r\n    },\r\n\r\n    // for debugging: gradient check\r\n    debugGrad: function() {\r\n      var N = this.N;\r\n\r\n      var cg = this.costGrad(this.Y); // evaluate gradient\r\n      var cost = cg.cost;\r\n      var grad = cg.grad;\r\n\r\n      var e = 1e-5;\r\n      for(var i=0;i<N;i++) {\r\n        for(var d=0;d<this.dim;d++) {\r\n          var yold = this.Y[i][d];\r\n\r\n          this.Y[i][d] = yold + e;\r\n          var cg0 = this.costGrad(this.Y);\r\n\r\n          this.Y[i][d] = yold - e;\r\n          var cg1 = this.costGrad(this.Y);\r\n          \r\n          var analytic = grad[i][d];\r\n          var numerical = (cg0.cost - cg1.cost) / ( 2 * e );\r\n          console.log(i + ',' + d + ': gradcheck analytic: ' + analytic + ' vs. numerical: ' + numerical);\r\n\r\n          this.Y[i][d] = yold;\r\n        }\r\n      }\r\n    },\r\n\r\n    // return cost and gradient, given an arrangement\r\n    costGrad: function(Y) {\r\n      var N = this.N;\r\n      var dim = this.dim; // dim of output space\r\n      var P = this.P;\r\n\r\n      var pmul = this.iter < 100 ? 4 : 1; // trick that helps with local optima\r\n\r\n      // compute current Q distribution, unnormalized first\r\n      var Qu = zeros(N * N);\r\n      var qsum = 0.0;\r\n      for(var i=0;i<N;i++) {\r\n        for(var j=i+1;j<N;j++) {\r\n          var dsum = 0.0;\r\n          for(var d=0;d<dim;d++) {\r\n            var dhere = Y[i][d] - Y[j][d];\r\n            dsum += dhere * dhere;\r\n          }\r\n          var qu = 1.0 / (1.0 + dsum); // Student t-distribution\r\n          Qu[i*N+j] = qu;\r\n          Qu[j*N+i] = qu;\r\n          qsum += 2 * qu;\r\n        }\r\n      }\r\n      // normalize Q distribution to sum to 1\r\n      var NN = N*N;\r\n      var Q = zeros(NN);\r\n      for(var q=0;q<NN;q++) { Q[q] = Math.max(Qu[q] / qsum, 1e-100); }\r\n\r\n      var cost = 0.0;\r\n      var grad = [];\r\n      for(var i=0;i<N;i++) {\r\n        var gsum = new Array(dim); // init grad for point i\r\n        for(var d=0;d<dim;d++) { gsum[d] = 0.0; }\r\n        for(var j=0;j<N;j++) {\r\n          cost += - P[i*N+j] * Math.log(Q[i*N+j]); // accumulate cost (the non-constant portion at least...)\r\n          var premult = 4 * (pmul * P[i*N+j] - Q[i*N+j]) * Qu[i*N+j];\r\n          for(var d=0;d<dim;d++) {\r\n            gsum[d] += premult * (Y[i][d] - Y[j][d]);\r\n          }\r\n        }\r\n        grad.push(gsum);\r\n      }\r\n\r\n      return {cost: cost, grad: grad};\r\n    }\r\n  }\r\n\r\n  global.tSNE = tSNE; // export tSNE class\r\n})(tsnejs);\r\n\r\n\r\n// export the library to window, or to module in nodejs\r\n(function(lib) {\r\n  \"use strict\";\r\n  if (typeof module === \"undefined\" || typeof module.exports === \"undefined\") {\r\n    window.tsnejs = lib; // in ordinary browser attach library to window\r\n  } else {\r\n    module.exports = lib; // in nodejs\r\n  }\r\n})(tsnejs);","\r\nimport './ForceDirectedGraphCanvas.css'\r\nimport * as React from \"react\";\r\nconst d3 = require(\"d3\");\r\n\r\nexport interface IProps {\r\n    graph_json : any,\r\n    width : number,\r\n    height : number,\r\n    onNodeClick: any\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class ForceDirectedGraphCanvas extends React.Component<IProps, IState>{\r\n    public global_simulation:any = null;\r\n    public saved_transform:any = null;\r\n    public refresh_number = 0;\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.updateTransform = this.updateTransform.bind(this);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.renderCanvas();\r\n    }\r\n    \r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n        if(prevProps.graph_json.name !== this.props.graph_json.name || prevProps.width !== this.props.width){\r\n            this.renderCanvas();\r\n        }\r\n\r\n        \r\n     }\r\n     public updateTransform(transform:any){\r\n         this.saved_transform = transform;\r\n     }\r\n     public renderCanvas(){\r\n\r\n\r\n        var onNodeClick = this.props.onNodeClick;\r\n        var nodenum = this.props.graph_json.nodenum;\r\n        var enabledForceDirected = this.props.graph_json.enable_forceDirected;\r\n        var neighborSet = this.props.graph_json.NeighborSet;\r\n        var colorLegend = this.props.graph_json.colorLegend;\r\n        var pieLegend = this.props.graph_json.pieLegend;\r\n        var pieName = pieLegend.pie_name;\r\n        var configuration = {\r\n            \"strength\": 0.01,\r\n            \"radius\":15,\r\n            \"showlabel\": true,\r\n            \"showarrow\": true,\r\n            \"width\": this.props.width,\r\n            \"height\": this.props.height\r\n        }\r\n        //console.log(\"ForceDirected\" , nodenum)\r\n        if(nodenum >= 100){\r\n            configuration = {\r\n                \"strength\": 0.4,\r\n                \"radius\":3,\r\n                \"showlabel\": false,\r\n                \"showarrow\": false,\r\n                \"width\": this.props.width,\r\n                \"height\": this.props.height\r\n            }\r\n        }\r\n\r\n        var width = configuration[\"width\"];\r\n        var height = configuration[\"height\"];\r\n        var radius = configuration[\"radius\"];\r\n        var radius_gap = 0.3;\r\n        var inner_radius = radius - radius_gap;\r\n        //var outer_radius = radius * 2;\r\n\r\n        //var radius = 5;\r\n\r\n        //var defaultNodeCol = \"white\",\r\n        //    highlightCol = \"yellow\";\r\n        \r\n        \r\n        //var height = this.props.height;\r\n        var graphWidth =  this.props.width;\r\n        //d3.select('#force_directed_graph').select('canvas').remove();\r\n        //var graphCanvas = //d3.select('#force_directed_graph').append('canvas')\r\n        var graphCanvas = d3.select('#force_directed_graph').select('#bottom')\r\n        .attr('width', graphWidth + 'px')\r\n        .attr('height', height + 'px')\r\n        .node();\r\n        \r\n        var context = graphCanvas.getContext('2d');\r\n        var middleCanvas = d3.select('#force_directed_graph').select(\"#middle\")\r\n        .attr('width', graphWidth + 'px')\r\n        .attr('height', height + 'px')\r\n        .node();\r\n        var middle_context = middleCanvas.getContext('2d');\r\n\r\n        var eventCanvas = d3.select('#force_directed_graph').select(\"#event\")\r\n        .attr('width', graphWidth + 'px')\r\n        .attr('height', height + 'px')\r\n        .node();\r\n        //var event_context = eventCanvas.getContext('2d');\r\n        //var div = d3.select(\"body\").append(\"div\")\r\n        //    .attr(\"class\", \"tooltip\")\r\n        //    .style(\"opacity\", 0);\r\n        \r\n        if(this.global_simulation){\r\n            this.global_simulation.stop();\r\n            delete this.global_simulation;\r\n        }\r\n        /*\r\n        var simulation = d3.forceSimulation()\r\n            .force(\"link\", d3.forceLink().id(function(d:any) { return d.id; }).strength(configuration[\"strength\"]))\r\n            .force(\"charge\", d3.forceManyBody())\r\n            //.force(\"x\", d3.forceX())\r\n            //.force(\"y\", d3.forceY())\r\n            .force(\"center\", d3.forceCenter(width / 2, height / 2));\r\n            */\r\n        var simulation = d3.forceSimulation()\r\n                      .force(\"center\", d3.forceCenter(graphWidth / 2, height / 2))\r\n                      .force(\"x\", d3.forceX(graphWidth / 2).strength(0.1))\r\n                      .force(\"y\", d3.forceY(height / 2).strength(0.1))\r\n                      .force(\"charge\", d3.forceManyBody().strength(-50))\r\n                      .force(\"link\", d3.forceLink().strength(1).id(function(d:any) { return d.id; }))\r\n                      .alphaTarget(0)\r\n                      .alphaDecay(0.05)\r\n                      \r\n        this.global_simulation = simulation;\r\n\r\n        // ---------------------- Render Legend -------------------------- //\r\n        let legend_pie_x = 10;\r\n        let legend_pie_y = height - 10 - 100;\r\n        var top_svg = d3.select(\"#force_directed_graph\")\r\n                .select(\"#svgChart\")\r\n                .attr(\"width\", width)\r\n                .attr(\"height\", height);\r\n\r\n        var legend_svg = top_svg.select(\"#ForceDirectedLegend\")\r\n            .attr(\"width\", 100)\r\n            .attr(\"height\", 100)\r\n            .attr(\"transform\",\"translate(\"+legend_pie_x+\",\"+legend_pie_y+\")\")\r\n\r\n        \r\n            var arc_data = [{\r\n                \"index\":0,\r\n                \"value\":1/3\r\n            }, {\r\n                \"index\":1,\r\n                \"value\":1/3\r\n            }, {\r\n                \"index\":2,\r\n                \"value\":1/3\r\n            }];\r\n            var ori_arcs = d3.pie()\r\n            .startAngle((-60/180) * Math.PI)\r\n            .endAngle((2-60/180) * Math.PI)\r\n            .value(function(a:any){\r\n                return a.value;\r\n            })\r\n            .sort(function(a:any, b:any) {\r\n                return a.index<b.index;\r\n            });\r\n            var arcs = ori_arcs(arc_data);\r\n            /*var arc = d3.arc()\r\n            .innerRadius(radius)\r\n            .outerRadius(radius*2);*/\r\n            function getArc(radius:number){\r\n                return d3.arc()\r\n                .innerRadius(radius)\r\n                .outerRadius(radius*2);\r\n            }\r\n            let legend_x = 30;\r\n            let legend_y = 50;\r\n            let legend_width = 200;\r\n            let legend_height = 100;\r\n            let legned_scale = 3;\r\n            this.refresh_number = this.refresh_number + 1;\r\n            let legend_pie_all = legend_svg.selectAll(\"g.legend_pie\")\r\n                            .data([this.refresh_number], function(d:any){\r\n                                return d;\r\n                            });\r\n                legend_pie_all.exit().remove();\r\n            //console.log(\"Refreshnumber\",this.refresh_number,pieName);\r\n            let legend_pie = legend_pie_all.enter().append(\"g\")\r\n                            .attr(\"class\", \"legend_pie\")\r\n                            .attr(\"transform\", \"translate(\"+legend_x+\",\"+legend_y+\")\")\r\n            legend_pie.append(\"rect\")\r\n            .attr(\"x\", -legend_x)\r\n            .attr(\"y\", -legend_y)\r\n            .attr(\"width\", legend_width)\r\n            .attr(\"height\", legend_height)\r\n            .attr(\"fill\", \"#fff\")\r\n            .attr(\"opacity\", 0.8)\r\n            .attr(\"stroke\", \"#bbb\")\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"rx\",3)\r\n            .attr(\"ry\",3)\r\n                            //let overall_background = [];\r\n            let legend_Color = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\"];\r\n            legend_pie.append(\"circle\")\r\n            .attr(\"class\",\"inner_circle\")\r\n            .attr(\"r\", inner_radius*legned_scale)\r\n            .attr(\"fill\", function(d:any) { return legend_Color[0]; })\r\n            .attr(\"stroke\", \"white\");\r\n    \r\n            let legend_text_setting = [\r\n                {\r\n                    \"text\":\"Ground Truth\",\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":+1\r\n                },\r\n                {\r\n                    \"text\":pieName[0],\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":-7.5\r\n                },\r\n                {\r\n                    \"text\":pieName[1],\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":0\r\n                },\r\n                {\r\n                    \"text\":pieName[2],\r\n                    \"text-anchor\":\"begin\",\r\n                    \"dominant-baseline\":\"central\",\r\n                    \"y_offset\":+19\r\n                },\r\n            ]\r\n                function constructPathOnNodeList(nodelist:any){\r\n                    // \r\n                    let path = \"\";\r\n                    for(let i = 0; i<nodelist.length;i++){\r\n                        let note = \"M\";\r\n                        if(i>0){\r\n                            note = \"L\"\r\n                        }\r\n                        path = path+note+nodelist[i][0]+\" \"+nodelist[i][1]+\" \";\r\n                    }\r\n                    return path;\r\n        \r\n                }\r\n                for (let i = 0; i < 3; i++){\r\n                    let background_enter = legend_pie.append(\"path\").attr(\"class\",\"arc_\"+i)\r\n                    let background = legend_pie.select(\"path.arc_\"+i);\r\n                    let background_enter_update  = background_enter.merge(background);\r\n                    background_enter_update\r\n                    .style(\"fill\", function(d:any){\r\n                        return legend_Color[i+1]\r\n                    })\r\n                    .attr(\"d\", getArc(radius*legned_scale)(arcs[i]));\r\n                    //overall_background.push(background_enter_update);\r\n        \r\n                    let start_point = [1.5*legned_scale*radius*Math.sin((+120*i)/180*Math.PI), 1.5*legned_scale*radius*(-Math.cos((+120*i)/180*Math.PI))]\r\n                    let middle_point = [1.5*legned_scale*radius*Math.sin((+120*i)/180*Math.PI), 2.5*legned_scale*radius*(-Math.cos((+120*i)/180*Math.PI))+legend_text_setting[i+1][\"y_offset\"]]\r\n        \r\n                    if(i===1){\r\n                        middle_point= [2.5*legned_scale*radius*Math.sin((+120*i)/180*Math.PI), 2.5*legned_scale*radius*(-Math.cos((+120*i)/180*Math.PI))+legend_text_setting[i+1][\"y_offset\"]]\r\n                    }else{\r\n        \r\n                    }\r\n                    let end_point = [2.5*legned_scale*radius*Math.sin((+60)/180*Math.PI) ,2.5*legned_scale*radius*(-Math.cos((+120*i)/180*Math.PI))+legend_text_setting[i+1][\"y_offset\"]]\r\n        \r\n                    legend_pie.append(\"path\")\r\n                        .attr(\"stroke\", \"#222\")\r\n                        .attr(\"stroke-width\", 1)\r\n                        .attr(\"d\", constructPathOnNodeList([start_point,middle_point, end_point]))\r\n                        .attr(\"fill\", \"none\")\r\n                    legend_pie.append(\"text\")\r\n                        .attr(\"x\", end_point[0])\r\n                        .attr(\"y\", end_point[1])\r\n                        .attr(\"text-anchor\", legend_text_setting[i+1][\"text-anchor\"])\r\n                        .attr(\"dominant-baseline\", legend_text_setting[i+1][\"dominant-baseline\"])\r\n                        .text(legend_text_setting[i+1][\"text\"])\r\n                }\r\n                let gt_x = 2.5*legned_scale*radius*Math.sin((+60)/180*Math.PI);\r\n                let gt_y = 2.5*legned_scale*radius*(-Math.cos((+60)/180*Math.PI))+legend_text_setting[0][\"y_offset\"];\r\n                legend_pie.append(\"line\")\r\n                        .attr(\"stroke\", \"#222\")\r\n                        .attr(\"stroke-width\", 1)\r\n                        .attr(\"x1\", 0)\r\n                        .attr(\"y1\", 0)\r\n                        .attr(\"x2\", gt_x)\r\n                        .attr(\"y2\", gt_y);\r\n                legend_pie.append(\"text\")\r\n                        .attr(\"x\", gt_x)\r\n                        .attr(\"y\", gt_y)\r\n                        .attr(\"text-anchor\", legend_text_setting[0][\"text-anchor\"])\r\n                        .attr(\"dominant-baseline\", legend_text_setting[0][\"dominant-baseline\"])\r\n                        .text(legend_text_setting[0][\"text\"])\r\n                // x = 7.5*Radius*(sin(60/180/240))\r\n                // y = 7.5*Radius*(-cos(60/180/240)) \r\n                \r\n                // ---------------- Color Legend -------------------------//\r\n                \r\n                let legend_color_x = 10;\r\n                let max_text_length = 0;\r\n                colorLegend.forEach((d:any)=>{\r\n                    let text = \"\" + d.text;\r\n                    if(text.length>max_text_length){\r\n                        max_text_length = text.length;\r\n                    }\r\n                })\r\n                \r\n                let legend_color_width = max_text_length*8+24;\r\n                //console.log(\"maxtextlength\", max_text_length, legend_color_width);\r\n                let legend_color_height = colorLegend.length*20;\r\n                let legend_color_y = legend_pie_y - legend_color_height - 10;\r\n                var legend_color_svg = top_svg.select(\"#ForceDirectedColorLegend\")\r\n                    .attr(\"width\", legend_color_width)\r\n                    .attr(\"height\", legend_color_height)\r\n                    .attr(\"transform\", \"translate(\"+legend_color_x+\",\"+legend_color_y+\")\")\r\n                let legend_rect = legend_color_svg.selectAll(\"rect\").data([0]);\r\n                let legend_rect_enter = legend_rect.enter().append(\"rect\");\r\n                //console.log(\"legend_rect\", legend_rect);\r\n                legend_rect_enter.merge(legend_rect)\r\n                    .attr(\"x\", 0)\r\n                    .attr(\"y\", 0)\r\n                    .attr(\"width\", legend_color_width)\r\n                    .attr(\"height\", legend_color_height)\r\n                    .attr(\"fill\", \"#fff\")\r\n                    .attr(\"opacity\", 0.8)\r\n                    .attr(\"stroke\", \"#bbb\")\r\n                    .attr(\"stroke-width\", 1)\r\n                    .attr(\"rx\",3)\r\n                    .attr(\"ry\",3);\r\n                let row_legend_color = legend_color_svg.selectAll(\"g.legend_row_color\")\r\n                                        .data(colorLegend, function(d:any,i:any){\r\n                                            return d.text+\"_\"+i+\"_\"+d.color;\r\n                                        });\r\n                let g_row_legend_color = row_legend_color.enter().append(\"g\")\r\n                                    .attr(\"class\",\"legend_row_color\")\r\n                                    .attr(\"transform\", function(d:any,i:any){\r\n                                        return \"translate(10,\"+(10+i*20)+\")\";\r\n                                    });\r\n                    g_row_legend_color.append(\"circle\")\r\n                                    .attr(\"r\", 5)\r\n                                    .attr(\"fill\", function(d:any){\r\n                                        return d.color;\r\n                                    })\r\n                                    \r\n                    g_row_legend_color.append(\"text\")\r\n                                    .attr(\"x\", 10)\r\n                                    .attr(\"y\", 5)\r\n                                    .text(function(d:any){\r\n                                        return d.text;\r\n                                    })\r\n                                    \r\n                    row_legend_color.exit().remove();\r\n                    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        let updateTransform = this.updateTransform;\r\n\r\n        var transform:any;\r\n        if(this.saved_transform){\r\n            transform =this.saved_transform ;\r\n        }else{\r\n            transform = d3.zoomIdentity;\r\n        }\r\n\r\n        \r\n        \r\n        \r\n        ///d3.json(\"data.json\",function(error:any,data:any){\r\n        \r\n        //  console.log(data)\r\n        function mappingGraph(data:any){        \r\n          initGraph(data)\r\n        \r\n          function initGraph(tempData:any){\r\n        \r\n        \r\n            \r\n            \r\n            let event_canvas = eventCanvas;\r\n            d3.select(event_canvas).on(\"click\",handleMouseClick).on(\"mousemove\", handleMouseMove).on(\"mouseout\",handleMouseOut)\r\n            ;\r\n            function order_determine(a:any,b:any){\r\n                let hover_cons_a = a.hasOwnProperty(\"hover_cons\")?a.hover_cons:1;\r\n                let hover_cons_b = b.hasOwnProperty(\"hover_cons\")?b.hover_cons:1;\r\n                let node_outer_radius_a = a.radius*hover_cons_a*2;\r\n                let node_outer_radius_b = a.radius*hover_cons_b*2;\r\n                return node_outer_radius_a<node_outer_radius_b?-1:1;\r\n            }\r\n            function determineSubject(mouse_x:number,mouse_y:number){\r\n                var i,\r\n                x = transform.invertX(mouse_x),\r\n                y = transform.invertY(mouse_y),\r\n                dx,\r\n                dy;\r\n                //console.log(\"transformed x,y\", x,y);\r\n                //var mouseX = d3.event.layerX || d3.event.offsetX;\r\n\t\t        //var mouseY = d3.event.layerY || d3.event.offsetY;\r\n                //console.log(\"mouse x,y d3 event x,y, transformed x,y\",mouseX, mouseY, d3.event.x, d3.event.y, x, y)\r\n                let newNodeList = tempData.nodes.slice().sort(order_determine)\r\n                for (i = newNodeList.length - 1; i >= 0; --i) {\r\n                    var node = newNodeList[i];\r\n                    dx = x - node.x;\r\n                    dy = y - node.y;\r\n                    let hover_cons = node.hasOwnProperty(\"hover_cons\")?node.hover_cons:1;\r\n                    let outer_radius_node = node.radius * 2 * hover_cons;\r\n                    if (dx * dx + dy * dy < outer_radius_node * outer_radius_node) {\r\n                \r\n                        //node.x = transform.applyX(node.x);\r\n                        //node.y = transform.applyY(node.y);\r\n                \r\n                        return node;\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n            function judgeHoveredFlag(d:any, bool:boolean){\r\n                if(!d.hasOwnProperty(\"hovered\") || d[\"hovered\"]===false ){\r\n                    if(bool === false){\r\n                        return false;\r\n                    }else{\r\n                        return true;\r\n                    }\r\n                }else{\r\n                    if(bool === true){\r\n                        return false;\r\n                    }else{\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            var mouseCoordinates:any = null;\r\n            function zoomed(this:any) {\r\n                ///console.log(\"zooming\")\r\n                var xy = d3.mouse(this);\r\n                mouseCoordinates = xy;\r\n                transform = d3.event.transform;\r\n                updateTransform(transform);\r\n                simulationUpdate();\r\n              }\r\n            function hiddenTooltip(){\r\n                d3.select(\"#force_directed_graph\").select(\"#tooltip\").style('opacity', 0);\r\n\r\n            }\r\n            function handleMouseMove(this:any, obj:any=null, defaultUpdateFlag:boolean=false){\r\n                //let judgeObj = this;\r\n                var xy:any;\r\n                if(obj){\r\n                    xy = mouseCoordinates;\r\n                }else{\r\n                    xy = d3.mouse(this);\r\n                    mouseCoordinates = xy;\r\n                }\r\n                var updateFlag = defaultUpdateFlag;\r\n\r\n                if(xy){\r\n                    var selected = determineSubject(xy[0],xy[1]);\r\n                    //console.log(\"mousemove\", selected);\r\n                    if(selected){\r\n                        updateFlag = true;\r\n                        //updateFlag = updateFlag || judgeHoveredFlag(d, true);\r\n                        let target_id = selected.id;\r\n\r\n                        //if (nodeData){\r\n                        //    console.log(nodeData);\r\n                        d3.select(\"#force_directed_graph\").select('#tooltip')\r\n                            .style('opacity', 0.8)\r\n                            .style('top', (xy[1] + 5) + 'px')\r\n                            .style('left', (xy[0] + 5) + 'px')\r\n                            .html(target_id);\r\n                        //} else {\r\n                        //    d3.select('#tooltip')\r\n                        //        .style('opacity', 0);\r\n                        //}\r\n                \r\n                        let neighbor_id = neighborSet[selected.id];\r\n                        tempData.nodes.forEach((d:any)=>{\r\n                            if(target_id === d.id){\r\n                                d.hovered = true;\r\n                                d.hover_cons = 3;\r\n                            }else  if(neighbor_id.indexOf(d.id)>=0){\r\n                                //updateFlag = updateFlag || judgeHoveredFlag(d, true);\r\n                                d.hovered = true;\r\n                                d.hover_cons = 2;\r\n                            }else{   \r\n                                //updateFlag = updateFlag || judgeHoveredFlag(d, false);\r\n                                d.hovered = false;\r\n                                d.hover_cons = 1;\r\n                            }\r\n                        })\r\n                        \r\n                    }else{\r\n                        tempData.nodes.forEach((d:any)=>{\r\n                            updateFlag = updateFlag || judgeHoveredFlag(d, false);\r\n                            d.hovered = false;\r\n                            d.hover_cons = 1;\r\n                        })\r\n                        hiddenTooltip();\r\n                    }\r\n                }else{\r\n                    tempData.nodes.forEach((d:any)=>{\r\n                        updateFlag = updateFlag || judgeHoveredFlag(d, false);\r\n                        d.hovered = false;\r\n                        d.hover_cons = 1;\r\n                    })\r\n                    hiddenTooltip();\r\n                }\r\n                \r\n                if(updateFlag){\r\n                    middleCanvasSimulationUpdate()\r\n                }\r\n            }\r\n            function handleMouseOut(this:any, obj:any=null, defaultUpdateFlag:boolean=false){\r\n                var updateFlag = defaultUpdateFlag;\r\n                mouseCoordinates = null;\r\n                tempData.nodes.forEach((d:any)=>{\r\n                    updateFlag = updateFlag || judgeHoveredFlag(d, false);\r\n                    d.hovered = false;\r\n                    d.hover_cons = 1;\r\n                })\r\n                hiddenTooltip();\r\n                if(updateFlag){\r\n                    middleCanvasSimulationUpdate()\r\n                }\r\n            }\r\n            function handleMouseClick(this:any, obj:any=null, defaultUpdateFlag:boolean=false){\r\n                //console.log(\"Nodes Click\", d3.event.defaultPrevented)\r\n                if (d3.event.defaultPrevented) return; // zoomed\r\n                //console.log(\"Nodes Click\", d.id);\r\n                //let judgeObj = this;\r\n                var xy:any;\r\n                if(obj){\r\n                    xy = mouseCoordinates;\r\n                }else{\r\n                    xy = d3.mouse(this);\r\n                    mouseCoordinates = xy;\r\n                }\r\n\r\n                if(xy){\r\n                    var selected = determineSubject(xy[0],xy[1]);\r\n                    if(selected){\r\n                        onNodeClick(selected.id);\r\n                    }\r\n                }else{\r\n\r\n                }\r\n                \r\n                //d3.event.stopPropagation();\r\n            }\r\n            d3.select(event_canvas)\r\n            //    .call(d3.drag().subject(dragsubject).on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\",dragended))\r\n                .call(d3.zoom().scaleExtent([1 / 10, 8]).on(\"zoom\", zoomed))\r\n            \r\n        \r\n        /*\r\n          function dragsubject() {\r\n            var i,\r\n            x = transform.invertX(d3.event.x),\r\n            y = transform.invertY(d3.event.y),\r\n            dx,\r\n            dy;\r\n            for (i = tempData.nodes.length - 1; i >= 0; --i) {\r\n              var node = tempData.nodes[i];\r\n              dx = x - node.x;\r\n              dy = y - node.y;\r\n        \r\n              if (dx * dx + dy * dy < radius * radius) {\r\n        \r\n                node.x =  transform.applyX(node.x);\r\n                node.y = transform.applyY(node.y);\r\n        \r\n                return node;\r\n              }\r\n            }\r\n          }\r\n        \r\n        \r\n          function dragstarted() {\r\n            if (!d3.event.active) simulation.alphaTarget(0.3).restart();\r\n            d3.event.subject.fx = transform.invertX(d3.event.x);\r\n            d3.event.subject.fy = transform.invertY(d3.event.y);\r\n          }\r\n        \r\n          function dragged() {\r\n            d3.event.subject.fx = transform.invertX(d3.event.x);\r\n            d3.event.subject.fy = transform.invertY(d3.event.y);\r\n        \r\n          }\r\n        \r\n          function dragended() {\r\n            if (!d3.event.active) simulation.alphaTarget(0);\r\n            d3.event.subject.fx = null;\r\n            d3.event.subject.fy = null;\r\n          }\r\n        */\r\n          if(enabledForceDirected){\r\n            simulation\r\n                .nodes(tempData.nodes)\r\n                .on(\"tick\", simulationUpdate);\r\n\r\n            simulation.force(\"link\")\r\n                .links(tempData.links);\r\n\r\n            }else{\r\n                simulation.stop();\r\n                simulation\r\n                    .nodes(tempData.nodes);\r\n\r\n                simulation.force(\"link\")\r\n                    .links(tempData.links);\r\n                    simulationUpdate();\r\n            }\r\n            function drawCircleStroke(context:any, color:any, radius:any, x:any, y:any, lineWidth:number){\r\n                context.lineWidth = lineWidth\r\n                context.strokeStyle = color;\r\n                context.beginPath();\r\n                context.arc(x, y, radius, 0, 2 * Math.PI, true);\r\n                context.stroke();\r\n            }\r\n            \r\n            function drawCircle(context:any, color:any, radius:any, x:any, y:any){\r\n                context.beginPath();\r\n                context.arc(x, y, radius, 0, 2 * Math.PI, true);\r\n                context.fillStyle = color;\r\n                context.fill();\r\n            }\r\n            \r\n            function drawOnePie(context:any, color:any, radius:any, x:any, y:any, startAngle:any, endAngle:any){\r\n                context.beginPath();\r\n                context.moveTo(x,y);\r\n                context.arc(x, y, radius, startAngle, endAngle);\r\n                context.fillStyle = color;\r\n                context.closePath();\r\n                context.fill();\r\n            }\r\n            function drawNodeGlyph(context:any, colorlist:any, inner_radius:any, radius:any, outer_radius:any, x:any, y:any, enableStroke:boolean=false){\r\n                \r\n                drawCircle(context, colorlist[4], outer_radius, x, y);\r\n                if(enableStroke){\r\n                    drawCircleStroke(context, \"#000\", outer_radius, x, y, 2);\r\n                }\r\n                drawOnePie(context, colorlist[1], outer_radius, x, y, (-150)/180*Math.PI, (-30)/180*Math.PI);\r\n                drawOnePie(context, colorlist[2], outer_radius, x, y, (-30)/180*Math.PI, (+90)/180*Math.PI);\r\n                drawOnePie(context, colorlist[3], outer_radius, x, y, (+90)/180*Math.PI, (+210)/180*Math.PI);\r\n                drawCircle(context, colorlist[4], radius, x, y);\r\n                drawCircle(context, colorlist[0], inner_radius, x, y);\r\n            }\r\n            function drawLine(context:any, color:any, x1:any, y1:any, x2:any, y2:any){\r\n                context.strokeStyle = color;\r\n                context.beginPath();\r\n                context.moveTo(x1, y1);\r\n                context.lineTo(x2, y2);\r\n                context.stroke();\r\n            }\r\n            function simulationUpdate(){\r\n              context.save();\r\n        \r\n              context.clearRect(0, 0, graphWidth, height);\r\n              context.translate(transform.x, transform.y);\r\n              context.scale(transform.k, transform.k);\r\n        \r\n              tempData.links.filter((d:any)=>{\r\n                if(d.source.highlight && d.target.highlight){\r\n                    return false;\r\n                }else{\r\n                    return true;\r\n                }\r\n              }).forEach(function(d:any) {\r\n                    drawLine(context, d.color, d.source.x, d.source.y, d.target.x, d.target.y);\r\n                });\r\n        \r\n                // Draw the nodes\r\n                tempData.nodes.filter((d:any)=>{\r\n                    return !d[\"highlight\"];\r\n                }\r\n                ).forEach(function(d:any, i:any) {\r\n                    let node_inner_radius = d.radius - radius_gap;\r\n                    let node_radius = d.radius;\r\n                    let node_outer_radius = d.radius * 2;\r\n                    drawNodeGlyph(context, d.color, node_inner_radius, node_radius, node_outer_radius, d.x, d.y);\r\n                });\r\n                \r\n                tempData.links.filter((d:any)=>{\r\n                    if(d.source.highlight && d.target.highlight){\r\n                        return true;\r\n                    }else{\r\n                        return false;\r\n                    }\r\n                }).forEach(function(d:any) {\r\n                    drawLine(context, d.color, d.source.x, d.source.y, d.target.x, d.target.y);\r\n                });\r\n                tempData.nodes.filter((d:any)=>{\r\n                    return d[\"highlight\"];\r\n                    \r\n                }).forEach(function(d:any,i:any){\r\n                    let node_inner_radius = d.radius - radius_gap;\r\n                    let node_radius = d.radius;\r\n                    let node_outer_radius = d.radius * 2;\r\n                    drawNodeGlyph(context, d.color, node_inner_radius, node_radius, node_outer_radius, d.x, d.y);\r\n\r\n                })\r\n                context.restore();\r\n                \r\n                handleMouseMove(middleCanvas, true);\r\n                //middleCanvasSimulationUpdate();\r\n                //console.log(\"middleCanvas\",middleCanvas);\r\n        //        transform = d3.zoomIdentity;\r\n            }\r\n            function middleCanvasSimulationUpdate(){\r\n                let judgeHovered = (d:any)=>{\r\n                    if(d.hasOwnProperty(\"hovered\") && d[\"hovered\"]){\r\n                        return true;\r\n                    }else{\r\n                        return false;\r\n                    }\r\n                }\r\n                middle_context.save();\r\n                \r\n                middle_context.clearRect(0, 0, graphWidth, height);\r\n                middle_context.translate(transform.x, transform.y);\r\n                middle_context.scale(transform.k, transform.k);\r\n                tempData.links.filter((d:any)=>{\r\n                    if(judgeHovered(d.source) && judgeHovered(d.target)){\r\n                        return true;\r\n                    }else{\r\n                        return false;\r\n                    }\r\n                }).forEach(function(d:any) {\r\n                    drawLine(middle_context, d.real_color, d.source.x, d.source.y, d.target.x, d.target.y);\r\n                });\r\n                // Draw the hovered nodes\r\n                tempData.nodes.filter((d:any)=>{\r\n                    return judgeHovered(d);\r\n                }).sort(order_determine).forEach(function(d:any, i:any) {\r\n                    let node_inner_radius = d.radius - radius_gap;\r\n                    let node_radius = d.radius;\r\n                    let node_outer_radius = d.radius * 2;\r\n                    drawNodeGlyph(middle_context, d.real_color, node_inner_radius*d.hover_cons, node_radius*d.hover_cons, node_outer_radius*d.hover_cons, d.x, d.y, true);\r\n                });\r\n                middle_context.restore();\r\n            }\r\n          }\r\n        }\r\n        mappingGraph(this.props.graph_json);\r\n        //})\r\n\r\n            \r\n     }\r\n \r\n    public render() {\r\n        //let {width, height} = this.props;\r\n     \r\n        return (\r\n            <div id=\"force_directed_graph\">\r\n                <canvas id=\"bottom\" className=\"AbsPos\" />\r\n                <canvas id=\"middle\" className=\"AbsPos\"/>\r\n                <svg\r\n                    id=\"svgChart\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    className=\"AbsPos\"\r\n                >\r\n                    <g id=\"ForceDirectedLegend\">\r\n\r\n                    </g>\r\n                    <g id=\"ForceDirectedColorLegend\">\r\n\r\n                    </g>\r\n                </svg>\r\n                <div id=\"tooltip\" className=\"AbsPos\" />\r\n                <canvas id=\"event\" className=\"AbsPos\"/>\r\n                \r\n            </div>\r\n            \r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\n","// Color Helper\r\n\r\nconst d3_10color = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\", \"#e377c2\", \"#7f7f7f\", \"#bcbd22\", \"#17becf\"];\r\n\r\nconst COLORS: string[] = [\r\n    \"#1A7AB1\",\r\n    \"#ADC8E6\",\r\n    \"#FF772D\",\r\n    \"#FFB87F\",\r\n    \"#2AA13A\",\r\n    \"#98E090\",\r\n    \"#FF9398\",\r\n    \"#9467B9\",\r\n    \"#C5B0D3\",\r\n    \"#C49B95\",\r\n    \"#E474C0\",\r\n    \"#F7B4D1\",\r\n    \"#BCBC3D\",\r\n    \"#07C1CD\"\r\n    ]\r\n\r\nconst GREEN: string[] = [\r\n    \"#498B77\",\r\n    \"#89C2AE\",\r\n    \"#C1D6D3\"\r\n]\r\nconst BLUE: string[] = [\r\n    \"#3E97C7\",\r\n    \"#72B3CF\",\r\n    \"#8FCCDD\",\r\n    \"#C8DADE\"\r\n\r\n]\r\nconst ORANGE: string[] = [\r\n    \"#E96206\",\r\n    \"#F79143\",\r\n    \"#F6AD76\",\r\n    \"#F7CEA7\"\r\n]\r\nconst PINK: string[] = [\r\n    \"#F6B1C3\",\r\n    \"#F07F93\",\r\n    \"#DE4863\",\r\n    \"#BC0F46\"\r\n\r\n]\r\nconst RED: string[] = [\"#DC143C\"];\r\nconst YELLOW : string[] = ['#fee08b'];\r\nconst GRAY: string[] = ['#999999'];\r\nconst getLinearColor = (ColorList: string[], step:number) => {\r\n    let totalColor = ColorList.length;\r\n    let divide = 1/ (totalColor - 1);\r\n    let location = Math.floor(step / divide);\r\n    if(location == totalColor - 1){\r\n        location = location - 1;\r\n    }\r\n    let offset = step - location * divide;\r\n    let adjusted_offset = offset / divide;\r\n    return getGradientColor(ColorList[location], ColorList[location+1], adjusted_offset);\r\n}\r\nconst getGradientColor = (startColor : string,endColor :string,step : number) => {\r\n    let colorRgb = (sColor : string)=>{\r\n        var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\r\n        var sColor = sColor.toLowerCase();\r\n        if(sColor && reg.test(sColor)){\r\n            if(sColor.length === 4){\r\n                var sColorNew = \"#\";\r\n                for(var i=1; i<4; i+=1){\r\n                    sColorNew += sColor.slice(i,i+1).concat(sColor.slice(i,i+1));\r\n                }\r\n                sColor = sColorNew;\r\n            }\r\n            var sColorChange = [];\r\n            for(var i=1; i<7; i+=2){\r\n                sColorChange.push(parseInt(\"0x\"+sColor.slice(i,i+2)));\r\n            }\r\n            return sColorChange;\r\n        }else{\r\n            return sColor;\r\n        }\r\n    };\r\n    startColor = startColor.replace(/\\s+/g,\"\");\r\n    endColor = endColor.replace(/\\s+/g,\"\");\r\n    let startRGB : any = colorRgb(startColor);//转换为rgb数组模式\r\n    //console.log(startRGB);\r\n    let startR = startRGB[0];\r\n    let startG = startRGB[1];\r\n    let startB = startRGB[2];\r\n\r\n    let endRGB : any = colorRgb(endColor);\r\n    //console.log(endRGB);\r\n\r\n    let endR = endRGB[0];\r\n    let endG = endRGB[1];\r\n    let endB = endRGB[2];\r\n    if(step>1){\r\n        console.log(\"out of range step: \", step);\r\n        step = 1;\r\n    }else if(step<0){\r\n        console.log(\"out of range step: \", step);\r\n        step = 0;\r\n    }\r\n    let sR = (endR-startR)*step;//总差值\r\n    let sG = (endG-startG)*step;\r\n    let sB = (endB-startB)*step;\r\n    var R = parseInt((sR+startR));\r\n    var G = parseInt((sG+startG));\r\n    var B = parseInt((sB+startB));\r\n    var strHex = \"#\";\r\n    var aColor = new Array();\r\n    aColor[0] = R;\r\n    aColor[1] = G;\r\n    aColor[2] = B;\r\n    for(let j=0; j<3; j++){\r\n        let hex : string = Number(aColor[j]).toString(16);\r\n        let shex : string = Number(aColor[j])<10 ? '0'+hex :hex;\r\n        if(shex === \"0\"){\r\n            shex += shex;\r\n        }\r\n        strHex += shex;\r\n    }\r\n    return strHex;\r\n}\r\n\r\n\r\nconst EChartsColor = [\r\n    \"#c23531\",\r\n    \"#2f4554\",\r\n    \"#61a0a8\",\r\n    \"#d48265\",\r\n    \"#91c7ae\",\r\n    \"#749f83\"\r\n]\r\n\r\nconst DefaultColor = BLUE[1];\r\nconst StartColor = BLUE[0];\r\nconst EndColor = RED[0];\r\nconst getCoraNodeColor = ( node_label:number,color_encode:number = 2) =>{\r\n    if(color_encode === 1 || color_encode === 2 || color_encode === 3){\r\n        return d3_10color[node_label];\r\n    }else if(color_encode === 5){\r\n        if(node_label){\r\n            return GREEN[0];\r\n        }else{\r\n            return RED[0];\r\n        }\r\n    }\r\n    \r\n}\r\nconst getCoraTextColor = (node_label:number) =>{\r\n    if(node_label === 0){\r\n\r\n        // Train\r\n        return BLUE[0];\r\n    }else{\r\n        return GRAY[0];\r\n    }\r\n}\r\n\r\nconst getInfectionNodeColor = (show_mode:number, node_features:any, color_mode = 0) => {\r\n    if(show_mode == 1){\r\n        // Input Graph\r\n        // Assume size of node_features  = 4\r\n        if(node_features[0] == 1){\r\n            // Sick\r\n            return RED[0];\r\n        }else if(node_features[0] == -1 && node_features[1] == -1){\r\n            // Normal\r\n            return BLUE[0];\r\n        }else if(node_features[0] == -1 && node_features[1] == 1){\r\n            // Immune\r\n            return GREEN[0];\r\n        }\r\n    }else if (show_mode == 2){\r\n        // Grouth Truth\r\n        if(node_features[0] == 1){\r\n            // Label : Sick\r\n            return RED[0];\r\n        }else if(node_features[0] == 0){\r\n            // Label : Normal\r\n            return BLUE[0];\r\n        }\r\n    }else if (show_mode == 3){\r\n        // Model Output\r\n        let value = (1/(1+Math.exp(-node_features[0])));\r\n        return getLinearColor([StartColor,\"#FFFFFF\", EndColor], value);\r\n    }else if(show_mode==4){\r\n        // Explaination\r\n        if(color_mode === 0){\r\n            // LRP & Node Classification\r\n            let value = (1/(1+Math.exp(-node_features)));\r\n            return getLinearColor([StartColor,\"#FFFFFF\", EndColor], value);\r\n        }else if(color_mode === 1){\r\n            // SA / GBP \r\n            let value = node_features;\r\n            if(value>1){\r\n                console.log(\"Out of Range Value: \", value);\r\n                value = 1;\r\n            }else if(value < 0){\r\n                console.log(\"Out of Range Value: \", value);\r\n                value = 0;\r\n            }\r\n            return getLinearColor([\"#FFFFFF\", EndColor], value);\r\n        }else if(color_mode === 2){\r\n            // Graph Classification\r\n            let value = node_features;\r\n            if(value>1){\r\n                console.log(\"Out of Range Value: \", value);\r\n                value = 1;\r\n            }else if(value < 0){\r\n                console.log(\"Out of Range Value: \", value);\r\n                value = 0;\r\n            }\r\n            return getLinearColor([StartColor,\"#FFFFFF\", EndColor], value);\r\n        }\r\n        \r\n    }\r\n    return DefaultColor;\r\n}\r\nconst getInfectionEdgeColor = (show_mode:number, edge_features:any, color_mode =0 ) => {\r\n    if(show_mode == 1 || show_mode == 2 || show_mode == 3){\r\n        // Input Graph / Ground Truth / Model Output\r\n        // Assume size of node_features  = 4\r\n        if(edge_features[0] == 1){\r\n            // Virtual\r\n            return BLUE[2];\r\n        }else if(edge_features[0] == -1){\r\n            // Normal\r\n            return GRAY[0];\r\n        }\r\n    }else if(show_mode==4){\r\n        // Explaination\r\n        //let value = (1/(1+Math.exp(-edge_features)));\r\n        //return getLinearColor([StartColor,\"#DDDDDD\", EndColor], value);\r\n        if(color_mode === 0){\r\n            // LRP\r\n            let value = (1/(1+Math.exp(-edge_features)));\r\n            return getLinearColor([StartColor,\"#DDDDDD\", EndColor], value);\r\n        }else if(color_mode === 1){\r\n            // SA / GBP\r\n            let value = edge_features;\r\n            if(value>1){\r\n                console.log(\"Out of Range Value: \", value);\r\n                value = 1;\r\n            }else if(value < 0){\r\n                console.log(\"Out of Range Value: \", value);\r\n                value = 0;\r\n            }\r\n            return getLinearColor([\"#DDDDDD\", EndColor], value);\r\n        }\r\n    }\r\n    return DefaultColor;\r\n}\r\n\r\n// Transform Data Helper\r\nfunction constructNeighborSet(graph_in:any){\r\n    let senders = graph_in.senders;\r\n    let receivers = graph_in.receivers;\r\n    let node_num = graph_in.feature.length;\r\n    let NeighborSet:any = {};\r\n    for(let i = 0; i<node_num ;i++){\r\n        NeighborSet[i] = [];\r\n    }\r\n    for(let i = 0; i< receivers.length; i++){\r\n        let nowreceiver = receivers[i];\r\n        if(nowreceiver in NeighborSet){\r\n        }else{\r\n            NeighborSet[nowreceiver] = []\r\n        }\r\n        NeighborSet[nowreceiver].push(senders[i]);\r\n    }\r\n    return NeighborSet;\r\n}\r\nfunction constructPathDict(message_passing:any){\r\n    let senders = message_passing.senders;\r\n    let receivers = message_passing.receivers;\r\n    let values = message_passing.values;\r\n    let PathDict:any = {};\r\n    for(let i = 0; i< receivers.length; i++){\r\n        let nowreceiver = receivers[i];\r\n        if(nowreceiver in PathDict){\r\n        }else{\r\n            PathDict[nowreceiver] = {}\r\n        }\r\n        PathDict[nowreceiver][senders[i]] = values[i];\r\n    }\r\n    return PathDict;\r\n}\r\nfunction getTrainColor(node_id:any, train_set:any){\r\n    if(train_set.has(node_id)){\r\n        return \"#000\";\r\n    }else{\r\n        return \"#fff\";\r\n    }\r\n}\r\nfunction getNodeStatisticStr(selectedNodeLength: number, totalNodeLength: number){\r\n    let str : string = \"\" + selectedNodeLength + \"/\"+ totalNodeLength;\r\n    let percentage : number ;\r\n    if(totalNodeLength === 0){\r\n\r\n    }else{\r\n        percentage = selectedNodeLength / totalNodeLength * 100;\r\n        str = str + \" (\" + percentage.toFixed(2) +\"%)\"\r\n    }\r\n    return str;\r\n}\r\nconst plainOptions = ['Train', 'Valid', 'Test','Others'];\r\nconst defaultCheckedList = ['Train', 'Valid', 'Test', 'Others'];\r\nfunction getInspectCategoryOptions(){\r\n    return plainOptions;\r\n}\r\nfunction getDefaultInspectCategoryOptions(){\r\n    return defaultCheckedList;\r\n}\r\n\r\nfunction compareSelectedNodeIdList(list_a:any, list_b:any){\r\n    if(list_a.length === list_b.length){\r\n        for(let i = 0; i<list_a.length; i++){\r\n            if(list_a[i] === list_b[i]){\r\n\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }else{\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction getLayoutMode(){\r\n    // 1 ---> Graph View In Center\r\n    // 2 ---> Parallel Coordinates in Row\r\n    // 3 ---> Only Graph View\r\n    return 3;\r\n}\r\n\r\nexport { RED,YELLOW, EChartsColor, getInfectionNodeColor,\r\n     getInfectionEdgeColor, getCoraNodeColor,getCoraTextColor,\r\n     constructNeighborSet, getLayoutMode, constructPathDict,getTrainColor,\r\n     getInspectCategoryOptions, getDefaultInspectCategoryOptions, compareSelectedNodeIdList,getNodeStatisticStr }\r\n","\r\nimport * as React from \"react\";\r\n//import ForceDirectedGraph from \"./ForceDirectedGraph\";\r\nimport ForceDirectedGraphCanvas from \"./ForceDirectedGraphCanvas\";\r\nimport { Select, Button,  Tag, InputNumber } from 'antd';\r\nimport {getInfectionNodeColor, getInfectionEdgeColor, getCoraNodeColor, \r\n    constructNeighborSet,getLayoutMode,getTrainColor, getNodeStatisticStr} from '../../../helper';\r\nconst Option = Select.Option;\r\n//const d3 = require(\"d3\");\r\n\r\nexport interface IProps {\r\n    graph_object:any,\r\n    show_mode:number, \r\n    explained_node:number, \r\n    onExplainNodeChange:any, \r\n    onShowModeChange:any,\r\n    model:number,\r\n    modelList:any[],\r\n    selectedNodeIdList:any[],\r\n    selectedMessagePassingNodeIdList:any[],\r\n    showSource: boolean,\r\n    width: number,\r\n    height: number,\r\n    changeSpecificNodeIdList : any,\r\n    changeSelectInspectNode:any,\r\n    select_inspect_node : number,\r\n    changePrevGraphJson: any,\r\n    changeShowSource:any,\r\n    extendedMode: any,\r\n    changeExtendedMode:any\r\n}\r\nexport interface IState {\r\n    enableForceDirected: boolean,\r\n}\r\n\r\nexport default class GraphView extends React.Component<IProps, IState>{\r\n    public prevGraphJson:any = null;\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.onEnableForceDirected = this.onEnableForceDirected.bind(this);\r\n        this.onExtendedModeChange = this.onExtendedModeChange.bind(this);\r\n        this.onNodeClick = this.onNodeClick.bind(this);\r\n        this.onChangeSelectInspectNode = this.onChangeSelectInspectNode.bind(this);\r\n        this.state = {\r\n            enableForceDirected : false,\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        \r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n\r\n        \r\n     }\r\n     public onNodeClick(node_id:number){\r\n        let {showSource} = this.props;\r\n        //console.log(\"onNodeClick node_id, showSource, select_inspect_node\", node_id, showSource, select_inspect_node);\r\n        if(showSource === false){\r\n            this.props.changeSelectInspectNode(node_id);\r\n            this.props.changeShowSource(true);\r\n            this.props.changeExtendedMode(3);\r\n        }else{\r\n            //if(select_inspect_node === node_id){\r\n            //    this.props.changeShowSource(false);\r\n            //}else{\r\n                this.props.changeSelectInspectNode(node_id);\r\n            //}\r\n        }\r\n        \r\n         \r\n     }\r\n     public constructGraphJson(graph_object:any, show_mode:number, explained_node:number, \r\n        onExplainNodeChange:any, onShowModeChange:any, selectedNodeIdList:any, enableForceDirected:boolean, \r\n        select_inspect_node:number, showSource:boolean, embedding_layout_select:number, width:number, height:number){\r\n        let selectStr = selectedNodeIdList.join(\"_\");\r\n        //let {width, height} = this.props;\r\n\r\n        let common = graph_object;\r\n        let individual = graph_object;\r\n        let graph_name; \r\n        let layout_mode = getLayoutMode();\r\n        if(layout_mode === 3){\r\n            common = graph_object.common;\r\n            individual = graph_object.individual;\r\n            graph_name = common.name+\"_\"+common.dataset_id+\"_\"+(show_mode)+\"_\"+common.data_type_id+\"_SELECTED_\"+selectStr+\"_SELECTEDEND_\"+enableForceDirected+\"_\"+width+\"_\"+height+\"_\"+embedding_layout_select+\"_\";\r\n        }else{\r\n            graph_name = graph_object.name+\"_\"+graph_object.dataset_id+\"_\"+(graph_object.model)\r\n            +\"_\"+graph_object.explain_id \r\n            +\"_\"+(graph_object.graph)+\"_\"+(show_mode)+\"_\"+graph_object.data_type_id+\"_SELECTED_\"+selectStr+\"_SELECTEDEND_\"+enableForceDirected+\"_\"+width+\"_\"+height+\"_\";\r\n        }\r\n\r\n        \r\n\r\n        \r\n        if(show_mode == 4){\r\n            graph_name = graph_name+\"_\"+explained_node;\r\n        }\r\n        let graph_in = common.graph_in;\r\n        let graph_target = common.graph_target;\r\n        let graph_explaination = common.graph_explaination;\r\n        let graph_layout = common.graph_layout;\r\n        let mask = common.mask;\r\n        let train_mask_set = new Set(mask.train);\r\n        let graph_out ;\r\n\r\n        if(layout_mode === 3){\r\n            graph_out = {\r\n                \"GCN\": individual[\"GCN\"][\"graph_out\"],\r\n                \"MLP\": individual[\"MLP\"][\"graph_out\"],\r\n                \"GCN_Identity_features\": individual[\"GCN_Identity_features\"][\"graph_out\"]\r\n            }\r\n        }else{\r\n            graph_out = common.graph_out\r\n        }\r\n        if(selectedNodeIdList.length === 0){\r\n            //console.log(\"The num of SelectedNode is 0\")\r\n            if(layout_mode === 3){\r\n                selectedNodeIdList = []\r\n                for(let i = 0; i<graph_layout.length;i++){\r\n                    selectedNodeIdList.push(i);\r\n                }\r\n            }else{\r\n                return {\"success\":false};\r\n            }\r\n            \r\n        }\r\n        let new_graph_layout;// = graph_layout;\r\n\r\n        if(embedding_layout_select>=0){\r\n            let embedding = common.embedding;\r\n            let mapping:any = {\r\n                \"0\": \"input\",\r\n                \"1\": \"hidden\",\r\n                \"2\": \"output\"\r\n            }\r\n            new_graph_layout = embedding[mapping[\"\"+embedding_layout_select]];\r\n        }else{\r\n            new_graph_layout = graph_layout;\r\n        }\r\n       \r\n        function get_boundingbox(graph_layout:any[]){\r\n            if(graph_layout.length === 0){\r\n                return {\r\n                    \"xmin\":0,\r\n                    \"xmax\":0,\r\n                    \"ymin\":0,\r\n                    \"ymax\":0\r\n                }\r\n            }else{\r\n                let xmin = graph_layout[0][0];\r\n                let xmax = graph_layout[0][0];\r\n                let ymin = graph_layout[0][1];\r\n                let ymax = graph_layout[0][1];\r\n                for(let i = 0; i< graph_layout.length; i++){\r\n                    let nowx = graph_layout[i][0];\r\n                    let nowy = graph_layout[i][1];\r\n                    if(xmin > nowx){\r\n                        xmin = nowx;\r\n                    }\r\n                    if(xmax < nowx){\r\n                        xmax = nowx;\r\n                    }\r\n                    if(ymin > nowy){\r\n                        ymin = nowy;\r\n                    }\r\n                    if(ymax < nowy){\r\n                        ymax = nowy;\r\n                    }\r\n                }\r\n                return {\r\n                    \"xmin\":xmin,\r\n                    \"xmax\":xmax,\r\n                    \"ymin\":ymin,\r\n                    \"ymax\":ymax\r\n                }\r\n            }\r\n        }\r\n        function transform_graphlayout(graph_layout:any[]){\r\n            if(graph_layout.length === 0){\r\n                return graph_layout;\r\n            }else{\r\n                let bounding_box = get_boundingbox(graph_layout);\r\n                //let canvas_centerx = 300;\r\n                //let canvas_centery = 300;\r\n                //let width = Swidth;\r\n                //let height = Sheight;\r\n                let margin = 20;\r\n                if(graph_layout.length >= 100){\r\n                    margin = 20;\r\n                }\r\n                \r\n                let realwidth = width - 2*margin;\r\n                let realheight = height - 2*margin;\r\n                let gap_x = bounding_box[\"xmax\"] - bounding_box[\"xmin\"];\r\n                let gap_y = bounding_box[\"ymax\"] - bounding_box[\"ymin\"];\r\n                if(gap_x === 0){\r\n                    gap_x = 1e-16;\r\n                }\r\n                if(gap_y === 0){\r\n                    gap_y = 1e-16;\r\n                }\r\n                let realscale = Math.min(realwidth / gap_x, realheight / gap_y);\r\n                let left = margin + (realwidth - realscale * gap_x) / 2;\r\n                let top = margin + (realheight - realscale * gap_y) / 2; \r\n                let xmin = bounding_box[\"xmin\"];\r\n                let ymin = bounding_box[\"ymin\"];\r\n                let new_graph_layout = [];\r\n                for(let i = 0; i< graph_layout.length; i++){\r\n                    let nowx = graph_layout[i][0];\r\n                    let nowy = graph_layout[i][1];\r\n                    let locx = left+ (nowx - xmin) * realscale;\r\n                    let locy = top + (nowy - ymin) * realscale;\r\n                    new_graph_layout.push([locx,locy]);\r\n                }\r\n                return new_graph_layout;\r\n            }\r\n        }\r\n\r\n        \r\n\r\n        let enable_forceDirected = enableForceDirected;\r\n        if(new_graph_layout.length > 0){\r\n            //enable_forceDirected = false;\r\n            new_graph_layout = transform_graphlayout(new_graph_layout);\r\n            //console.log(\"Transforming graph layout...\")\r\n        }else{\r\n            \r\n        }\r\n        let data_type = common.data_type_id;\r\n        let task = common.task;\r\n        function transform_node_feature(value:number, max:number, min:number){\r\n            return (value - min) / (max-min+1e-16);\r\n        }\r\n        if(data_type == 1){\r\n            let node_num = graph_in.node_features.length;\r\n            let edge_num = graph_in.edge_features.length;\r\n            let source_list = graph_in.senders;\r\n            let target_list = graph_in.receivers;\r\n            \r\n            let nodes_json = [];\r\n            let links_json = [];\r\n            let links_color_json = [];\r\n            let color_mode = 1;\r\n            if(graph_explaination.type===\"LRP\" && task == \"node_classification\"){\r\n                color_mode = 0;\r\n            }\r\n            if(task == \"graph_classification\"){\r\n                color_mode = 2;\r\n                if(show_mode == 2 || show_mode == 3){\r\n                    console.log(\"out of range show_mode for graph_classification task\", show_mode);\r\n                    onShowModeChange(1);\r\n                    return {\"success\":false};\r\n                }\r\n                \r\n            }\r\n            if(explained_node >= node_num){\r\n                console.log(\"out of range explained_node:\" , explained_node );\r\n                onExplainNodeChange(0);\r\n                return {\"success\":false}\r\n            }\r\n    \r\n            let node_max, node_min, edge_max, edge_min;\r\n            node_max = node_min = edge_max = edge_min = 0;\r\n            if(task == \"graph_classification\"){\r\n                explained_node = 0;\r\n                let node_explain = graph_explaination.node_importance[explained_node];\r\n                let edge_explain = graph_explaination.edge_importance[explained_node];\r\n                let node_absmax = 0;\r\n                let edge_absmax = 0;\r\n                for(let i = 0 ; i < node_explain.length; i++){\r\n                    if(node_absmax < Math.abs(node_explain[i])){\r\n                        node_absmax = Math.abs(node_explain[i]);\r\n                    }\r\n                }\r\n                for(let i = 0 ; i < edge_explain.length; i++){\r\n                    if(edge_absmax < Math.abs(edge_explain[i]))\r\n                    {\r\n                        edge_absmax = Math.abs(edge_explain[i]);\r\n                    }\r\n                }\r\n                node_max = node_absmax;\r\n                node_min = -node_absmax;\r\n                edge_max = edge_absmax;\r\n                edge_min = -edge_absmax;\r\n            }else{\r\n                let node_explain = graph_explaination.node_importance[explained_node];\r\n                let edge_explain = graph_explaination.edge_importance[explained_node];\r\n                \r\n                node_max = Math.max(...node_explain);\r\n                node_min = Math.min(...node_explain);\r\n                edge_max = Math.max(...edge_explain);\r\n                edge_min = Math.min(...edge_explain);\r\n            }\r\n            \r\n            \r\n            for(let i = 0; i<node_num;i++){\r\n                let color = \"#999\";\r\n                if(show_mode == 1){\r\n                    color = getInfectionNodeColor(show_mode,graph_in.node_features[i]);\r\n                }else if(show_mode == 2){\r\n                    color = getInfectionNodeColor(show_mode,graph_target.node_features[i]);\r\n                }else if(show_mode == 3){\r\n                    color = getInfectionNodeColor(show_mode,graph_out.node_features[i]);\r\n                }else if(show_mode == 4){\r\n                    let feature = graph_explaination.node_importance[explained_node][i];\r\n                    \r\n                    if(graph_explaination.type===\"SA\" || graph_explaination.type===\"GBP\" || task == \"graph_classification\"){\r\n                        feature = transform_node_feature(feature, node_max, node_min);\r\n                    }   \r\n    \r\n                    color = getInfectionNodeColor(show_mode,feature, color_mode);\r\n                }\r\n                let node_object:any = {\r\n                    \"id\":i,\r\n                    \"group\":1,\r\n                    \"color\":color\r\n                    \r\n                }\r\n\r\n                if(enable_forceDirected === false){\r\n                    node_object[\"x\"] = graph_layout[i][0];\r\n                    node_object[\"y\"] = graph_layout[i][1];\r\n                }\r\n                nodes_json.push(node_object);\r\n            }\r\n            for(let i = 0; i<edge_num;i++){\r\n                let link_color;\r\n                if(show_mode == 1 || show_mode == 2 || show_mode == 3){\r\n                    link_color = getInfectionEdgeColor(show_mode,graph_in.edge_features[i]);\r\n                }else{\r\n                    let feature = graph_explaination.edge_importance[explained_node][i];\r\n                    \r\n                    if(graph_explaination.type===\"SA\" || graph_explaination.type===\"GBP\" ){\r\n                        feature = transform_node_feature(feature, edge_max, edge_min);\r\n                    }  \r\n                    link_color = getInfectionEdgeColor(show_mode, feature);\r\n                }\r\n                if(links_color_json.indexOf(link_color)>=0){\r\n                    \r\n                }else{\r\n                    links_color_json.push(link_color);\r\n                }\r\n                links_json.push({\r\n                    \"source\": source_list[i],\r\n                    \"target\": target_list[i],\r\n                    \"value\":1,\r\n                    \"color\":link_color\r\n                })\r\n            }\r\n            let graph_json = {\r\n                \"success\":true,\r\n                \"name\":graph_name,\r\n                \"nodes\":nodes_json,\r\n                \"links\":links_json,\r\n                \"links_color\":links_color_json,\r\n                \"nodenum\":node_num,\r\n                \"edgenum\":edge_num,\r\n                \"enable_forceDirected\":enable_forceDirected\r\n            }\r\n            return graph_json;\r\n        }else if(data_type == 2){\r\n            let source_list = graph_in.senders;\r\n            let target_list = graph_in.receivers;\r\n            \r\n            let node_num = graph_target.node_features.length;\r\n            let enablePrevGraphLayout = false;\r\n            let prevGraphJson = this.prevGraphJson;\r\n            if(prevGraphJson && prevGraphJson[\"success\"]){\r\n                if(prevGraphJson[\"nodes\"].length === node_num){\r\n                    enablePrevGraphLayout = true;\r\n                }\r\n            }\r\n            //let node_num = selectedNodeIdList.length;\r\n            let edge_num = graph_in.senders.length;\r\n            let nodes_json = [];\r\n            let links_json = [];\r\n            let links_color_json = [];\r\n            //var color_func = d3.scaleOrdinal(d3.schemeCategory10);\r\n            for(let i = 0; i<node_num;i++){\r\n                let label ;\r\n                let index = i;\r\n                //let index = selectedNodeIdList[i];\r\n                /*if(show_mode == 3){\r\n                    label = graph_out.node_features[index];\r\n                }else if(show_mode == 1 || show_mode == 2){\r\n                    label = graph_target.node_features[index];\r\n                }else if(show_mode == 5){\r\n                    label = graph_out.node_features[index] === graph_target.node_features[index];\r\n                }\r\n                let color = getCoraNodeColor(label, show_mode);*/\r\n                let color:any ;\r\n                let real_color:any;\r\n                let highlight = 1;\r\n                if(layout_mode === 3){\r\n                    let ground_truth_label = graph_target.node_features[index];\r\n                    label = ground_truth_label;\r\n                    let GCN_prediction_label = graph_out.GCN.node_features[index];   //\r\n                    let MLP_prediction_label = graph_out.MLP.node_features[index]; \r\n                    let GCN_Identity_features_prediction_label = graph_out.GCN_Identity_features.node_features[index]; \r\n                    // Ground Truth Color / Prediction Color\r\n                    color = [getCoraNodeColor(ground_truth_label, 2), \r\n                        getCoraNodeColor(GCN_prediction_label,3),\r\n                        getCoraNodeColor(MLP_prediction_label,3),\r\n                        getCoraNodeColor(GCN_Identity_features_prediction_label,3),\r\n                        getTrainColor(index, train_mask_set)\r\n                    ];    //\r\n                    real_color = color.slice();\r\n                    if(selectedNodeIdList.indexOf(index)>=0){\r\n                \r\n                    }else{\r\n                        color = [\"#ddd\",\"#ddd\",\"#ddd\",\"#ddd\",\"#ddd\"];\r\n                        highlight = 0;\r\n                    }\r\n                }else{\r\n                    let ground_truth_label = graph_target.node_features[index];\r\n                    label = ground_truth_label;\r\n                    let prediction_label = graph_out.node_features[index];   //\r\n                    //let TF_label = (graph_out.node_features[index] === graph_target.node_features[index])?1:0;   //\r\n                    // Ground Truth Color / Prediction Color\r\n                    color = [   getCoraNodeColor(ground_truth_label, 2), \r\n                                getCoraNodeColor(prediction_label, 3), \r\n                                getCoraNodeColor(prediction_label, 3),\r\n                                getCoraNodeColor(prediction_label, 3)];    //\r\n                    real_color = color.slice();\r\n                    if(selectedNodeIdList.indexOf(index)>=0){\r\n                \r\n                    }else{\r\n                        color = [\"#ddd\",\"#ddd\",\"#ddd\",\"#ddd\"];\r\n                    }\r\n                }\r\n                let radius = 3;\r\n                if(index === select_inspect_node && showSource === true){\r\n                    radius = 6;\r\n                }\r\n                let node_object:any = {\r\n                    \"id\":index,\r\n                    \"group\":label,\r\n                    \"color\":color,\r\n                    \"real_color\":real_color,\r\n                    \"radius\":radius,\r\n                    \"highlight\":highlight\r\n                }\r\n                \r\n                if(enablePrevGraphLayout){\r\n                    node_object[\"x\"] = prevGraphJson[\"nodes\"][i][\"x\"];\r\n                    node_object[\"y\"] = prevGraphJson[\"nodes\"][i][\"y\"];\r\n                }else if(enable_forceDirected === false){\r\n                    node_object[\"x\"] = new_graph_layout[i][0];\r\n                    node_object[\"y\"] = new_graph_layout[i][1];\r\n                }\r\n                nodes_json.push(node_object);\r\n            }\r\n            for(let i = 0; i<edge_num;i++){\r\n                let link_color = \"#eee\";\r\n                if(selectedNodeIdList.indexOf(source_list[i])>=0){\r\n                    if(selectedNodeIdList.indexOf(target_list[i])>=0){\r\n                        link_color = \"#bbb\";\r\n                    }\r\n                }\r\n                if(links_color_json.indexOf(link_color)>=0){\r\n                    \r\n                }else{\r\n                    links_color_json.push(link_color);\r\n                }\r\n                \r\n                links_json.push({\r\n                    \"source\": source_list[i],\r\n                    \"target\": target_list[i],\r\n                    \"value\":1,\r\n                    \"color\":link_color,\r\n                    \"real_color\":\"#bbb\"\r\n                })\r\n                \r\n            }\r\n            let getColorLegend = () =>{\r\n                let graph_info = common.graph_additional_info;\r\n                let num_class = graph_info.num_class;\r\n                let label = [];\r\n                if(Object.keys(graph_info).indexOf(\"idx_to_class\")>=0){\r\n                    let idx_to_class = graph_info.idx_to_class;\r\n                    for(let i = 0; i< num_class;i++){\r\n                        label.push({\r\n                            \"text\":\"\"+i+\":\"+idx_to_class[i],\r\n                            \"color\":getCoraNodeColor(i,2)\r\n                        })\r\n                    }\r\n                }else{\r\n                    for(let i = 0; i< num_class;i++){\r\n                        label.push({\r\n                            \"text\":i,\r\n                            \"color\":getCoraNodeColor(i,2)\r\n                        })\r\n                    }\r\n                }\r\n                return label;\r\n            }\r\n            let P1_name = individual.GCN.real_model_name;\r\n            let P2_name = individual.MLP.real_model_name;\r\n            let P3_name = individual.GCN_Identity_features.real_model_name;\r\n            let pie_name = [P1_name, P2_name, P3_name];\r\n            let graph_json = {\r\n                \"success\":true,\r\n                \"name\":graph_name,\r\n                \"nodes\":nodes_json,\r\n                \"links\":links_json,\r\n                \"links_color\":links_color_json,\r\n                \"nodenum\":node_num,\r\n                \"edgenum\":edge_num,\r\n                \"enable_forceDirected\":enable_forceDirected,\r\n                \"colorLegend\":getColorLegend(),\r\n                \"pieLegend\":{\r\n                    \"pie_name\":pie_name\r\n                }\r\n            }\r\n            return graph_json;\r\n        }else{\r\n            console.log(\"Unknown data type : \", data_type )\r\n            return {\"success\":false}; \r\n        }\r\n\r\n\r\n        \r\n    }\r\n    public onEnableForceDirected(checked:boolean){\r\n        this.setState({\r\n            enableForceDirected: checked\r\n        })\r\n    }\r\n    public onExtendedModeChange(e:any){\r\n        /*this.setState({\r\n            extendedMode: e.target.value\r\n        })*/\r\n        this.props.changeExtendedMode(e);\r\n        /*this.setState({\r\n            extendedMode: e\r\n        })*/\r\n    }\r\n    public constructExtendedSelectedNodeIdList(selectedNodeIdList:any, NeighborSet:any){\r\n        if(selectedNodeIdList.length === 0){\r\n            return [];\r\n        }else{\r\n            \r\n            let new_selectedNodeIdList = selectedNodeIdList.slice();\r\n            for(let i = 0 ; i<selectedNodeIdList.length; i++){\r\n                let nodeId = selectedNodeIdList[i];\r\n                new_selectedNodeIdList = new_selectedNodeIdList.concat(NeighborSet[nodeId])\r\n            }\r\n\r\n            new_selectedNodeIdList = Array.from(new Set(new_selectedNodeIdList));\r\n            return new_selectedNodeIdList;\r\n        }\r\n        \r\n    }\r\n    public onChangeSelectInspectNode(node_id:any, node_num:number){\r\n        let new_node_id:number = parseInt(node_id);\r\n        if(!new_node_id || new_node_id<0){\r\n            new_node_id = 0;\r\n        }\r\n        if(new_node_id>=node_num){\r\n            new_node_id = node_num - 1;\r\n        }\r\n        console.log(\"graphview, new_node_id\", new_node_id);\r\n        this.props.changeSelectInspectNode(new_node_id);\r\n    }\r\n    public render() {\r\n        let {graph_object, show_mode, explained_node, onExplainNodeChange, onShowModeChange\r\n            , model, modelList, selectedNodeIdList, selectedMessagePassingNodeIdList, showSource, select_inspect_node, width, height, extendedMode} = this.props;\r\n        //console.log(\"GraphView\", graph_object);\r\n        //console.log(\"GraphView\", selectedNodeIdList);\r\n        let onNodeClick = this.onNodeClick;\r\n        let specificNodeIdList = selectedNodeIdList;\r\n        if(showSource){\r\n            //specificNodeIdList = selectedMessagePassingNodeIdList;\r\n            specificNodeIdList = [select_inspect_node];\r\n        }\r\n\r\n        let common = graph_object;\r\n        if(getLayoutMode() === 3){\r\n            common = graph_object.common;\r\n        }\r\n\r\n        // One Hop\r\n        let graph_in = common.graph_in;\r\n        let NeighborSet = constructNeighborSet(graph_in);\r\n        if(extendedMode === 2){\r\n            specificNodeIdList = this.constructExtendedSelectedNodeIdList(specificNodeIdList, NeighborSet);\r\n        }else if(extendedMode === 3){\r\n            specificNodeIdList = this.constructExtendedSelectedNodeIdList(specificNodeIdList, NeighborSet);\r\n            specificNodeIdList = this.constructExtendedSelectedNodeIdList(specificNodeIdList, NeighborSet);\r\n        }\r\n        this.props.changeSpecificNodeIdList(specificNodeIdList);\r\n        /*function find_model_name(model:number | null){\r\n            if(model){\r\n                for(let i = 0; i < modelList.length; i++){\r\n                    if(modelList[i].id === model){\r\n                        return modelList[i].name;\r\n                    }\r\n                }\r\n            }\r\n            return \"\";\r\n        } */           \r\n        //console.log(\"GraphView showSource\", showSource);\r\n\r\n\r\n        let embedding_layer_select:number = -1;\r\n        let ForceDirectedWidth = width - 10;\r\n        let ForceDirectedHeight = height - 50;\r\n        let graph_json:any = this.constructGraphJson(graph_object, show_mode, explained_node, \r\n            onExplainNodeChange, onShowModeChange, specificNodeIdList, this.state.enableForceDirected, \r\n            select_inspect_node,showSource, embedding_layer_select, ForceDirectedWidth, ForceDirectedHeight);\r\n        graph_json[\"NeighborSet\"] = NeighborSet;\r\n        if(graph_json[\"success\"]){\r\n            this.prevGraphJson = graph_json;\r\n            //this.props.changePrevGraphJson(this.prevGraphJson);\r\n        }\r\n        \r\n            \r\n        //console.log(\"GraphView graph_json\", graph_json)\r\n        if(graph_json[\"success\"]){\r\n            //let nodenum = graph_object.graph_in.node_features.length;\r\n            let nodenum: number = graph_json[\"nodenum\"];\r\n            let task = common.task;\r\n            let options  = [\r\n                [1,\"Input Feature\"],\r\n                [2,\"Ground Truth\"],\r\n                [3,\"Model Output\"],\r\n                [4,\"Explaination\"],\r\n                [5,\"True / False\"]];\r\n            if(task == \"node_classification\"){\r\n                if(common.data_type_id == 2){\r\n                    options = [\r\n                        [1,\"Input Feature\"],\r\n                        [2,\"Ground Truth\"],\r\n                        [3,\"Model Output\"],\r\n                        [5,\"True / False\"]];\r\n                }\r\n            }else if(task == \"graph_classification\"){\r\n                options = [\r\n                    [1,\"Input Feature\"],\r\n                    [4,\"Explaination\"]]\r\n            }\r\n            let extendedOptions = [\r\n                [1,\"None\"],\r\n                [2,\"One Hop\"],\r\n                [3,\"Two Hop\"]];\r\n            let generateExplainSelect = (nodenum:number, explained_node:number, onExplainNodeChange:any) =>{\r\n                let arr = [];\r\n                for(let i = 0; i<nodenum; i++){\r\n                    arr.push(i);\r\n                }\r\n                return (<Select\r\n                        placeholder=\"Select an explain mode\"\r\n                        value={explained_node}\r\n                        style={{ width: '100px' }}\r\n                        onChange={onExplainNodeChange}\r\n                    >\r\n                        { arr.map((value:number)=>(\r\n                                <Option key={value} value={value}>{value}</Option>\r\n                        ))}\r\n                        \r\n                    </Select>);\r\n            }\r\n            /*\r\n            let generateMoreInfo = (task:any) => {\r\n                \r\n                if(task == \"graph_classification\"){\r\n                    return <div> Ground Truth: <Tag>{graph_object.graph_target.global_features[0]} </Tag>\r\n                    Model Output: <Tag>{graph_object.graph_out.global_features[0]}</Tag> </div>\r\n                }else{\r\n                    return <div />\r\n                }\r\n            }*/\r\n            let generateTagColor = () =>{\r\n                let graph_info = common.graph_additional_info;\r\n                let num_class = graph_info.num_class;\r\n                let label = [];\r\n                if(Object.keys(graph_info).indexOf(\"idx_to_class\")>=0){\r\n                    let idx_to_class = graph_info.idx_to_class;\r\n                    for(let i = 0; i< num_class;i++){\r\n                        label.push(idx_to_class[i]);\r\n                    }\r\n                }else{\r\n                    for(let i = 0; i< num_class;i++){\r\n                        label.push(i);\r\n                    }\r\n                }\r\n                let tag = label.map((d:any,i:any)=>{\r\n                    return <Tag key={i} color={getCoraNodeColor(i,2)}>{d}</Tag>\r\n                })\r\n                return tag;\r\n            }\r\n            /**\r\n             * {(show_mode==1||show_mode==2||show_mode==3)?(generateTagColor()):\"\"}\r\n                    {(show_mode==5)? (<Tag color={getCoraNodeColor(1,5)}>True</Tag>):\"\"}\r\n                    {(show_mode==5)? (<Tag color={getCoraNodeColor(0,5)}>False</Tag>):\"\"}\r\n                    {show_mode==4&&task == \"node_classification\"?\"Explained Node:\":\"\"}\r\n                    {show_mode==4&&task == \"node_classification\"?generateExplainSelect(nodenum, explained_node, onExplainNodeChange):<div/>}\r\n                    \r\n             */\r\n            let stopLayout = () =>{\r\n                this.onEnableForceDirected(false);\r\n            }\r\n            let startLayout = () =>{\r\n                this.onEnableForceDirected(true);\r\n            }\r\n            \r\n            return (            \r\n            <div style={{width: \"100%\", height:\"\"+(this.props.height - 10)+\"px\", overflowX: \"hidden\"}}>\r\n                <div className=\"ViewTitle\">Graph View\r\n                    <div style={{float:'right'}}>\r\n                    {(showSource)?[<span key={\"span\"+1}>Id:</span>,\r\n                    <InputNumber min={0} max={nodenum} size=\"small\" value={select_inspect_node} onChange={(e:any)=> {this.onChangeSelectInspectNode(e,nodenum);}} />,\r\n                    <span key={\"span\"+3}>&nbsp;</span>,\r\n                    <Button size=\"small\" onClick={()=>{this.props.changeShowSource(false);this.props.changeExtendedMode(1);}}>X</Button> ]:[<span key={\"span\"+2}></span>]}\r\n                    {/*<Checkbox checked={this.state.enableForceDirected} onChange={this.onEnableForceDirected}>Enable Force Directed Layout</Checkbox>*/}\r\n                    \r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                    Extended:&nbsp;\r\n                    <Select\r\n                        placeholder=\"Select an extended mode\"\r\n                        value={extendedMode}\r\n                        style={{ width: '90px' }}\r\n                        onChange={this.onExtendedModeChange}\r\n                        size=\"small\"\r\n                    >\r\n                        {extendedOptions.map((d:any)=>(\r\n                            <Option value={d[0]} key={d[0]}>\r\n                                {d[1]}\r\n                            </Option>\r\n                        ))}\r\n                        </Select>\r\n                   {/* <Radio.Group onChange={this.onExtendedModeChange} value={this.state.extendedMode}>\r\n                        {extendedOptions.map((d:any)=>(\r\n                            <Radio value={d[0]} key={d[0]}>\r\n                                {d[1]}\r\n                            </Radio>\r\n                        ))}\r\n                        </Radio.Group> */}\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                    {(this.state.enableForceDirected)?\r\n                        <Button type=\"primary\" size=\"small\" onClick={stopLayout}>Stop Layout</Button>:\r\n                        <Button type=\"default\" size=\"small\" onClick={startLayout}>Start Layout</Button>}\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                    #Nodes: <Tag>{getNodeStatisticStr(specificNodeIdList.length, nodenum)} </Tag>\r\n                    {/*Legend:&nbsp;(show_mode==1||show_mode==2||show_mode==3)?(generateTagColor()):\"\"*/}\r\n                    \r\n                    </div>\r\n                </div>\r\n                {/*Model name: <Tag>{find_model_name(model)}</Tag>   \r\n                Graph name: <Tag>{graph_object.name}</Tag>  {generateMoreInfo(task)}*/}\r\n                <div className=\"ViewBox\">\r\n                    <div>{/*Select Show Mode:\r\n                    <Select\r\n                        placeholder=\"Select a show mode\"\r\n                        value={show_mode}\r\n                        style={{ width: '25%' }}\r\n                        onChange={onShowModeChange}\r\n                    >\r\n                        {options.map((d:any)=>(\r\n                            <Option value={d[0]} key={d[0]}>\r\n                                {d[1]}\r\n                            </Option>\r\n                        ))}\r\n                        </Select>*/}\r\n                    \r\n                    \r\n                    {/*<Checkbox checked={this.state.enableOneHop} onChange={this.onEnableOneHop}>Enable One Hop Extended</Checkbox>*/}\r\n                    </div>\r\n                    \r\n                    <div\r\n                    style={{\r\n                        width: '100%',\r\n                        }}\r\n                    >\r\n                    <ForceDirectedGraphCanvas graph_json={graph_json} width={ForceDirectedWidth} height={ForceDirectedHeight} onNodeClick={onNodeClick}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            )}else{\r\n                return <div />\r\n            }\r\n    }\r\n}\r\n\r\n","import GraphView from './GraphView'\r\nexport default GraphView;\r\n\r\n\r\n","import {MODEL_CHANGE, GRAPH_CHANGE, INIT_MODEL_LIST, EXPLAIN_METHOD_ID_CHANGE,\r\n    DATASET_ID_CHANGE, INIT_DATASET_LIST, INIT_EXPLAIN_LIST, INIT_GRAPH_LIST, FILTERS_CHANGE,\r\n    SELECTED_NODE_ID_LIST_CHANGE, SELECTED_MESSAGE_PASSING_NODE_ID_LIST_CHANGE,\r\n    SHOW_SOURCE_CHANGE, SPECIFIC_NODE_ID_LIST_CHANGE, SELECT_INSPECT_NODE_CHANGE,\r\n    CLEAR_ID_INFO,  PREV_GRAPH_JSON_CHANGE, MATRIX_FILTERS_CHANGE, MATRIX_ROW_FILTERS_CHANGE\r\n,INSPECT_CATEGORY_LIST_CHANGE, PSJSON_CHANGE, PSSELECTEDNODES_CHANGE, EXTENDED_MODE_CHANGE} from '../constants';\r\n\r\n// Define Change Model Methods\r\nexport const changeModel = (model:number | null) =>({\r\n    type: MODEL_CHANGE,\r\n    model: model\r\n})\r\n\r\n// Define Change Model Methods\r\nexport const changeDataset = (dataset_id:number | null) =>({\r\n    type: DATASET_ID_CHANGE,\r\n    dataset_id: dataset_id\r\n})\r\n\r\n// Define Change Model Methods\r\nexport const changeExplainMethod = (explain_id:number | null) =>({\r\n    type: EXPLAIN_METHOD_ID_CHANGE,\r\n    explain_id: explain_id\r\n})\r\n\r\nexport const changeGraph = (graph:number | null) =>({\r\n    type: GRAPH_CHANGE,\r\n    graph: graph\r\n})\r\nexport const changeFilters = (filters: any) =>({\r\n    type: FILTERS_CHANGE,\r\n    filters: filters\r\n})\r\nexport const changeMatrixFilters = (MatrixFilters: any) =>({\r\n    type: MATRIX_FILTERS_CHANGE,\r\n    matrixFilters: MatrixFilters\r\n})\r\nexport const changeMatrixRowFilters = (MatrixRowFilters: any) =>({\r\n    type: MATRIX_ROW_FILTERS_CHANGE,\r\n    matrixRowFilters: MatrixRowFilters\r\n})\r\nexport const changeSelectedNodeIdList = (selectedNodeIdList: any) =>({\r\n    type: SELECTED_NODE_ID_LIST_CHANGE,\r\n    selectedNodeIdList: selectedNodeIdList\r\n})\r\nexport const changeInspectCategoryList = (inspectCategoryList: any) =>({\r\n    type: INSPECT_CATEGORY_LIST_CHANGE,\r\n    inspectCategoryList: inspectCategoryList\r\n})\r\nexport const changeExtendedMode = (extendedMode: number) =>({\r\n    type: EXTENDED_MODE_CHANGE,\r\n    extendedMode: extendedMode\r\n})\r\nexport const changePSJson = (PSJson: any) =>({\r\n    type: PSJSON_CHANGE,\r\n    PSJson: PSJson\r\n})\r\nexport const changePSSelectedNodes = (PSSelectedNodes:number) =>({\r\n    type: PSSELECTEDNODES_CHANGE,\r\n    PSSelectedNodes: PSSelectedNodes\r\n})\r\nexport const changeMessagePassingSelectedNodeIdList = (selectedMessagePassingNodeIdList: any) =>({\r\n    type: SELECTED_MESSAGE_PASSING_NODE_ID_LIST_CHANGE,\r\n    selectedMessagePassingNodeIdList: selectedMessagePassingNodeIdList\r\n})\r\n\r\nexport const changeSpecificNodeIdList = (specificNodeIdList: any) =>({\r\n    type: SPECIFIC_NODE_ID_LIST_CHANGE,\r\n    specificNodeIdList: specificNodeIdList\r\n})\r\n\r\nexport const changeSelectInspectNode = (select_inspect_node:any)=>({\r\n    type: SELECT_INSPECT_NODE_CHANGE,\r\n    select_inspect_node: select_inspect_node\r\n})\r\n\r\nexport const changeShowSource = (showSource: boolean) =>({\r\n    type: SHOW_SOURCE_CHANGE,\r\n    showSource: showSource\r\n})\r\nexport const changePrevGraphJson = (prevGraphJson: any) =>({\r\n    type: PREV_GRAPH_JSON_CHANGE,\r\n    prevGraphJson: prevGraphJson\r\n})\r\n\r\nexport const clearIdInfo = () =>({\r\n    type: CLEAR_ID_INFO\r\n})\r\n\r\nexport const initModelList = (modelList:any) =>({\r\n    type: INIT_MODEL_LIST,\r\n    modelList: modelList\r\n})\r\n\r\nexport const initDatasetList = (datasetList:any) =>({\r\n    type: INIT_DATASET_LIST,\r\n    datasetList: datasetList\r\n})\r\nexport const initExplainList = (explainList:any) =>({\r\n    type: INIT_EXPLAIN_LIST,\r\n    explainList: explainList\r\n})\r\nexport const initGraphList = (graphList:any) =>({\r\n    type: INIT_GRAPH_LIST,\r\n    graphList: graphList\r\n})\r\n\r\n\r\n/*import { DECREMENT, INCREMENT } from '../constants';\r\n\r\nexport interface IINCREMENTAction {\r\n    type: INCREMENT;\r\n}\r\n\r\nexport interface IDECREMENTAction {\r\n    type: DECREMENT;\r\n}\r\n\r\n// 定义 modifyAction 类型，包含 IINCREMENTAction 和 IDECREMENTAction 接口类型\r\nexport type ModifyAction = IINCREMENTAction | IDECREMENTAction;\r\n\r\n\r\n// 增加 state 次数的方法\r\nexport const increment = (): IINCREMENTAction => ({\r\n    type: INCREMENT,\r\n})\r\n\r\n// 减少 state 次数的方法\r\nexport const decrement = (): IDECREMENTAction => ({\r\n    type: DECREMENT\r\n})*/\r\n","\r\n// Define Change Model Constant\r\nexport const MODEL_CHANGE = \"MODEL_CHANGE\";\r\nexport type MODEL_CHANGE = typeof MODEL_CHANGE;\r\n\r\n// Define Change Model Constant\r\nexport const DATASET_ID_CHANGE = \"DATASET_ID_CHANGE\";\r\nexport type DATASET_ID_CHANGE = typeof DATASET_ID_CHANGE;\r\n\r\n// Define Change Model Constant\r\nexport const EXPLAIN_METHOD_ID_CHANGE = \"EXPLAIN_METHOD_ID_CHANGE\";\r\nexport type EXPLAIN_METHOD_ID_CHANGE = typeof EXPLAIN_METHOD_ID_CHANGE;\r\n\r\n\r\nexport const GRAPH_CHANGE = \"GRAPH_CHANGE\";\r\nexport type GRAPH_CHANGE = typeof GRAPH_CHANGE;\r\n\r\nexport const INIT_MODEL_LIST = \"INIT_MODEL_LIST\";\r\nexport type INIT_MODEL_LIST = typeof INIT_MODEL_LIST;\r\n\r\nexport const INIT_DATASET_LIST = \"INIT_DATASET_LIST\";\r\nexport type INIT_DATASET_LIST = typeof INIT_DATASET_LIST;\r\n\r\nexport const INIT_EXPLAIN_LIST = \"INIT_EXPLAIN_LIST\";\r\nexport type INIT_EXPLAIN_LIST = typeof INIT_EXPLAIN_LIST;\r\n\r\nexport const INIT_GRAPH_LIST = \"INIT_GRAPH_LIST\";\r\nexport type INIT_GRAPH_LIST = typeof INIT_GRAPH_LIST;\r\n\r\nexport const FILTERS_CHANGE = \"FILTERS_CHANGE\";\r\nexport type FILTERS_CHANGE = typeof FILTERS_CHANGE;\r\n\r\nexport const SELECTED_NODE_ID_LIST_CHANGE = \"SELECTED_NODE_ID_LIST_CHANGE\";\r\nexport type SELECTED_NODE_ID_LIST_CHANGE = typeof SELECTED_NODE_ID_LIST_CHANGE;\r\n\r\nexport const SELECTED_MESSAGE_PASSING_NODE_ID_LIST_CHANGE = \"SELECTED_MESSAGE_PASSING_NODE_ID_LIST_CHANGE\";\r\nexport type SELECTED_MESSAGE_PASSING_NODE_ID_LIST_CHANGE = typeof SELECTED_MESSAGE_PASSING_NODE_ID_LIST_CHANGE;\r\n\r\nexport const SHOW_SOURCE_CHANGE = \"SHOW_SOURCE_CHANGE\";\r\nexport type SHOW_SOURCE_CHANGE = typeof SHOW_SOURCE_CHANGE;\r\n\r\nexport const SPECIFIC_NODE_ID_LIST_CHANGE = \"SPECIFIC_NODE_ID_LIST_CHANGE\";\r\nexport type SPECIFIC_NODE_ID_LIST_CHANGE = typeof SPECIFIC_NODE_ID_LIST_CHANGE;\r\n\r\n\r\nexport const SELECT_INSPECT_NODE_CHANGE = \"SELECT_INSPECT_NODE_CHANGE\";\r\nexport type SELECT_INSPECT_NODE_CHANGE = typeof SELECT_INSPECT_NODE_CHANGE;\r\n\r\nexport const PREV_GRAPH_JSON_CHANGE = \"PREV_GRAPH_JSON_CHANGE\";\r\nexport type PREV_GRAPH_JSON_CHANGE = typeof PREV_GRAPH_JSON_CHANGE;\r\n\r\n\r\nexport const CLEAR_ID_INFO = \"CLEAR_ID_INFO\";\r\nexport type CLEAR_ID_INFO = typeof CLEAR_ID_INFO;\r\n\r\nexport const MATRIX_FILTERS_CHANGE = \"MATRIX_FILTERS_CHANGE\";\r\nexport type MATRIX_FILTERS_CHANGE = typeof MATRIX_FILTERS_CHANGE;\r\n\r\nexport const MATRIX_ROW_FILTERS_CHANGE = \"MATRIX_ROW_FILTERS_CHANGE\";\r\nexport type MATRIX_ROW_FILTERS_CHANGE = typeof MATRIX_ROW_FILTERS_CHANGE;\r\n\r\nexport const INSPECT_CATEGORY_LIST_CHANGE = \"INSPECT_CATEGORY_LIST_CHANGE\";\r\nexport type INSPECT_CATEGORY_LIST_CHANGE = typeof INSPECT_CATEGORY_LIST_CHANGE;\r\n\r\nexport const PSJSON_CHANGE = \"PSJSON_CHANGE\";\r\nexport type PSJSON_CHANGE = typeof PSJSON_CHANGE;\r\n\r\nexport const PSSELECTEDNODES_CHANGE = \"PSSELECTEDNODES_CHANGE\";\r\nexport type PSSELECTEDNODES_CHANGE = typeof PSSELECTEDNODES_CHANGE;\r\n\r\nexport const EXTENDED_MODE_CHANGE = \"EXTENDED_MODE_CHANGE\";\r\nexport type EXTENDED_MODE_CHANGE = typeof EXTENDED_MODE_CHANGE;\r\n/*// 定义增加 state 类型常量\r\nexport const INCREMENT = \"INCREMENT\";\r\nexport type INCREMENT = typeof INCREMENT;\r\n\r\n// 定义减少 state 类型常量\r\nexport const DECREMENT = \"DECREMENT\";\r\nexport type DECREMENT = typeof DECREMENT;\r\n*/","import GraphView from '../components/DataRuns/GraphView/'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\nimport {changeSpecificNodeIdList, changeSelectInspectNode, changePrevGraphJson, changeShowSource, changeExtendedMode} from '../actions';\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    selectedNodeIdList : state.selectedNodeIdList,\r\n    selectedMessagePassingNodeIdList: state.selectedMessagePassingNodeIdList,\r\n    showSource: state.showSource,\r\n    select_inspect_node: state.select_inspect_node,\r\n    extendedMode : state.extendedMode\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeSpecificNodeIdList:  (specificNodeIdList:any) => dispatch(changeSpecificNodeIdList(specificNodeIdList)),\r\n    changeSelectInspectNode : (select_inspect_node:number) => dispatch(changeSelectInspectNode(select_inspect_node)),\r\n    changePrevGraphJson: (prevGraphJson:any) => dispatch(changePrevGraphJson(prevGraphJson)),\r\n    changeShowSource: (showSource:boolean) => dispatch(changeShowSource(showSource)),\r\n    changeExtendedMode: (extendedMode:any) => dispatch(changeExtendedMode(extendedMode))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphView);\r\n\r\n\r\n\r\n","\r\nimport './RadialTree.css'\r\nimport * as React from \"react\";\r\nconst d3 = require(\"d3\");\r\n\r\nexport interface IProps {\r\n    graph_json : any,\r\n    id: number,\r\n    x:number,\r\n    y:number,\r\n    width:number,\r\n    height:number,\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class RadialTree extends React.Component<IProps, IState>{\r\n    private TAB = \"RadialTree_\"\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n        this.renderD3();\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n        //console.log('Component did update!')\r\n        if(prevProps.graph_json.name !== this.props.graph_json.name){\r\n            d3.selectAll(\"#RadialTree\"+this.props.id).remove();\r\n            this.renderD3();\r\n        }\r\n\r\n        \r\n     }\r\n\r\n    public renderD3(){\r\n        let RadialData = this.props.graph_json.RadialData;\r\n        var width = this.props.width;\r\n        var height = this.props.height;\r\n        var tree_radius = Math.min(width / 2, height / 2) - 40;\r\n        let radius = 2.5;\r\n        let font_size = 7;\r\n        if(RadialData.length >= 50){\r\n            radius = 2.5;\r\n            font_size = 7;\r\n        }\r\n        var top_svg = d3.select(\"#\"+this.TAB+this.props.id);\r\n        var svg = top_svg.append(\"g\")\r\n            .attr(\"id\",\"RadialTree\"+this.props.id)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height);\r\n        var rect = svg.append(\"rect\")\r\n                    .attr(\"width\", width)\r\n                    .attr(\"height\", height)\r\n                    .attr(\"fill\", \"white\")\r\n        \r\n        var g = svg.append(\"g\").attr(\"transform\", \"translate(\" + (width / 2) + \",\" + (height / 2) + \")\");\r\n        top_svg.call(d3.zoom()\r\n            .extent([[0, 0], [width, height]])\r\n            .scaleExtent([0.1, 8])\r\n            .on(\"zoom\", zoomed));\r\n        \r\n        function zoomed() {\r\n        svg.attr(\"transform\", d3.event.transform);\r\n        }        \r\n        var stratify = d3.stratify()\r\n            .parentId(function(d:any) { return d.id.substring(0, d.id.lastIndexOf(\".\")); });\r\n\r\n        var tree = d3.tree()\r\n            .size([360 , tree_radius ])\r\n            .separation(function(a:any, b:any) { return (a.parent === b.parent ? 1 : 2) / a.depth; });\r\n        \r\n        function project(x:any, y:any) {\r\n            var angle = (x - 90) / 180 * Math.PI, radius = y;\r\n            return [radius * Math.cos(angle), radius * Math.sin(angle)];\r\n        }\r\n        \r\n        var stratified_data = stratify(RadialData);\r\n        //console.log(stratified_data);\r\n        var root = tree(stratified_data);\r\n\r\n        var link = g.selectAll(\".link\")\r\n            .data(root.descendants().slice(1))\r\n            .enter().append(\"path\")\r\n            .attr(\"class\", \"link\")\r\n            .attr(\"stroke\", function(d:any){return d.data.link_color;})\r\n            .attr(\"d\", function(d:any) {\r\n                return \"M\" + project(d.x, d.y)\r\n                    + \"C\" + project(d.x, (d.y + d.parent.y) / 2)\r\n                    + \" \" + project(d.parent.x, (d.y + d.parent.y) / 2)\r\n                    + \" \" + project(d.parent.x, d.parent.y);\r\n            });\r\n\r\n        var node = g.selectAll(\".node\")\r\n            .data(root.descendants())\r\n            .enter().append(\"g\")\r\n            .attr(\"class\", function(d:any) { return \"node\" + (d.children ? \" node--internal\" : \" node--leaf\"); })\r\n            .attr(\"transform\", function(d:any) { return \"translate(\" + project(d.x, d.y) + \")\"; });\r\n\r\n        node.append(\"circle\")\r\n            .attr(\"r\", radius)\r\n            .attr(\"fill\", function(d:any){ return d.data.color;});\r\n\r\n        node.append(\"text\")\r\n            .attr(\"dy\", \".31em\")\r\n            .attr(\"x\", function(d:any) { return d.x < 180 === !d.children ? 6 : -6; })\r\n            .attr(\"fill\", function(d:any){return d.data.text_color;})\r\n            .style(\"font-size\", \"\"+font_size+\"px\")\r\n            .style(\"text-anchor\", function(d:any) { return d.x < 180 === !d.children ? \"start\" : \"end\"; })\r\n            .attr(\"transform\", function(d:any) { return \"rotate(\" + (d.x < 180 ? d.x - 90 : d.x + 90) + \")\"; })\r\n            .text(function(d:any) { return d.id.substring(d.id.lastIndexOf(\".\") + 1); });\r\n    \r\n\r\n\r\n        \r\n        \r\n    }\r\n    public render() {\r\n        return (\r\n            <g\r\n            transform={\"translate(\"+this.props.x+\",\"+this.props.y+\")\"}\r\n            style={{ height: \"\"+this.props.height+\"px\", width: \"\"+this.props.width+\"px\" }}\r\n            id={this.TAB+this.props.id}\r\n            >\r\n            </g>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n","\r\nimport * as React from \"react\";\r\nimport ScatterPlot from \"./ScatterPlot\";\r\nimport PathGraph from \"./PathGraph\";\r\nimport RadialTree from \"./RadialTree\";\r\nimport { Select, Row, Col, Upload, Icon, Button, message, Tag, Checkbox } from 'antd';\r\nimport {getCoraNodeColor, getInfectionEdgeColor, getCoraTextColor, getLayoutMode, constructPathDict} from '../../../helper';\r\nimport { changeShowSource } from \"../../../actions\";\r\nconst Option = Select.Option;\r\nconst d3 = require(\"d3\");\r\n\r\nexport interface IProps {\r\n    graph_object:any,\r\n    show_mode:number, \r\n    explained_node:number, \r\n    onExplainNodeChange:any, \r\n    onShowModeChange:any,\r\n    model:number,\r\n    modelList:any[],\r\n    changeMessagePassingNodeIdList:any,\r\n    changeShowSource:any,\r\n    showSource:boolean,\r\n    width:number,\r\n    height:number,\r\n    select_inspect_node:number,\r\n    changeSelectInspectNode:any\r\n}\r\nexport interface IState {\r\n    color_encode: number\r\n}\r\n\r\nexport default class MessagePassingView extends React.Component<IProps, IState>{\r\n\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.onSelectNodeChange = this.onSelectNodeChange.bind(this);\r\n        this.onColorEncodeChange = this.onColorEncodeChange.bind(this);\r\n        this.onShowSourceChange = this.onShowSourceChange.bind(this);\r\n        this.state = {\r\n            color_encode : 2\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n\r\n        \r\n     }\r\n     public onSelectNodeChange(select_inspect_node: number) {\r\n        this.props.changeSelectInspectNode(select_inspect_node);\r\n        //this.setState({\r\n        //    select_node:select_node\r\n        //})\r\n    }\r\n    public onColorEncodeChange(color_encode: number) {\r\n        this.setState({\r\n            color_encode:color_encode\r\n        })\r\n    }\r\n    public constructRadialTreeJson(graph_object:any,select_node:number=0,color_encode:number=2,level:number=2,width=600,height=600,margin=100,exceedingmargin=20){\r\n        let graph_name = graph_object.name+\"_\"+graph_object.dataset_id+\"_\"+(graph_object.model)\r\n                +\"_\"+graph_object.explain_id \r\n                +\"_\"+(graph_object.graph)+\"_\"+graph_object.data_type_id+\"_\"+select_node+\"_\"+color_encode;\r\n        \r\n        let graph_in = graph_object.graph_in;\r\n        let graph_target = graph_object.graph_target;\r\n        let graph_out = graph_object.graph_out;\r\n        let graph_explaination = graph_object.graph_explaination;\r\n        let explaination_type = graph_explaination.type;\r\n        let mask = graph_object.mask;\r\n        let train_mask = mask.train;\r\n\r\n        if(explaination_type !== \"MessagePassing\"){\r\n            console.log(\"Unsupported explaination type , \", explaination_type);\r\n            return {\"success\": false};\r\n        }\r\n        let node_num = graph_target.node_features.length;\r\n        if(!(select_node >= 0 && select_node < node_num)){\r\n            console.log(\"Out of the range,  select_node , \", select_node);\r\n            return {\"success\": false};\r\n        }\r\n        //let embedding = graph_object.embedding;\r\n        //let show_embedding = embedding[show_layer];\r\n        \r\n        let message_passing = graph_object.message_passing;\r\n        \r\n        let PathDict = constructPathDict(message_passing);\r\n        \r\n        //console.log(\"Radial Data PathDict\", PathDict)\r\n        function getColor(node_id:number){\r\n            let label = graph_target.node_features[node_id];\r\n            if(color_encode === 2){\r\n                label = graph_target.node_features[node_id];\r\n            }else if(color_encode === 3){\r\n                label = graph_out.node_features[node_id];\r\n            }else if(color_encode === 5){\r\n                label = graph_target.node_features[node_id]===graph_out.node_features[node_id];\r\n                \r\n            }\r\n            return getCoraNodeColor(label, color_encode);\r\n        }\r\n        function getTextColor(node_id:number){\r\n            let isTrain = train_mask.indexOf(node_id);\r\n            if(isTrain>=0){\r\n                // Train Node\r\n                return getCoraTextColor(0);\r\n            }else{\r\n                return getCoraTextColor(1);\r\n            }\r\n        }\r\n        function transform_node_feature(value:number, max:number, min:number){\r\n            return (value - min) / (max-min+1e-16);\r\n        }\r\n        \r\n        function constructRadialLevel(PathDict:any, select_node:number, level:number){\r\n            let RadialData:any[] = []; // id, data_id, level, value, color\r\n            let valuelist : any[] = [];\r\n            \r\n            RadialData.push(\r\n                {\r\n                    \"id\":\"\"+select_node,\r\n                    \"data_id\":select_node,\r\n                    \"level\":0,\r\n                    \"value\":0,\r\n                    \"color\":getColor(select_node),\r\n                    \"text_color\":getTextColor(select_node)\r\n                }\r\n                );\r\n            for(let i = 0; i<RadialData.length; i++)\r\n            {\r\n                let nownode_entry = RadialData[i];\r\n                let nownode_level = nownode_entry.level;\r\n                if(nownode_level>=level){\r\n                    break;\r\n                }\r\n                let nownode = nownode_entry.data_id;\r\n                let succnodes = Object.keys(PathDict[nownode]);\r\n                for(let k = 0; k< succnodes.length; k ++ ){\r\n                    let succnode = parseInt(succnodes[k]);\r\n                    let value = PathDict[nownode][succnode];\r\n                    valuelist.push(value);\r\n                    RadialData.push(\r\n                        {\r\n                            \"id\":\"\"+nownode_entry.id+\".\"+succnode,\r\n                            \"data_id\":succnode,\r\n                            \"level\":nownode_level+1,\r\n                            \"value\":value,\r\n                            \"color\":getColor(succnode),\r\n                            \"text_color\":getTextColor(succnode)\r\n                        });\r\n                    }\r\n            }\r\n            let valuemin = Math.min(...valuelist);\r\n            let valuemax = Math.max(...valuelist);\r\n            for(let i = 0; i < RadialData.length; i++){\r\n                if(RadialData[i].level>=1){\r\n                    let feature = RadialData[i].value;\r\n                    feature = transform_node_feature(feature, valuemax, valuemin);\r\n                    RadialData[i].link_color = getInfectionEdgeColor(4, feature, 1);\r\n                }else{\r\n                    RadialData[i].link_color = \"#999999\";\r\n                }\r\n            }\r\n            //console.log(RadialData);\r\n            return RadialData;\r\n        }\r\n        \r\n        let data_type = graph_object.data_type_id;\r\n        let task = graph_object.task;\r\n        let RadialData = constructRadialLevel(PathDict, select_node, level);\r\n        if(data_type === 2){\r\n            let graph_json = {\r\n                \"success\":true,\r\n                \"name\":graph_name,\r\n                \"RadialData\":RadialData,\r\n                \"nodenum\":RadialData.length\r\n            }\r\n           \r\n            return graph_json;\r\n        }else{\r\n            console.log(\"Unknown data type : \", data_type )\r\n            return {\"success\":false}; \r\n        }\r\n        \r\n    }\r\n\r\n\r\n\r\n     public constructPathGraphJson(graph_object:any,select_node:number=0,color_encode:number=2,level:number=2,width=600,height=600,margin=100,exceedingmargin=20){\r\n        let graph_name = graph_object.name+\"_\"+graph_object.dataset_id+\"_\"+(graph_object.model)\r\n                +\"_\"+graph_object.explain_id \r\n                +\"_\"+(graph_object.graph)+\"_\"+graph_object.data_type_id+\"_\"+select_node+\"_\"+color_encode;\r\n        \r\n        let graph_in = graph_object.graph_in;\r\n        let graph_target = graph_object.graph_target;\r\n        let graph_out = graph_object.graph_out;\r\n        let graph_explaination = graph_object.graph_explaination;\r\n        let explaination_type = graph_explaination.type;\r\n        if(explaination_type !== \"MessagePassing\"){\r\n            console.log(\"Unsupported explaination type , \", explaination_type);\r\n            return {\"success\": false};\r\n        }\r\n        let node_num = graph_target.node_features.length;\r\n        if(!(select_node >= 0 && select_node < node_num)){\r\n            console.log(\"Out of the range,  select_node , \", select_node);\r\n            return {\"success\": false};\r\n        }\r\n        //let embedding = graph_object.embedding;\r\n        //let show_embedding = embedding[show_layer];\r\n        \r\n        let message_passing = graph_object.message_passing;\r\n        function constructPathDict(message_passing:any){\r\n            let senders = message_passing.senders;\r\n            let receivers = message_passing.receivers;\r\n            let values = message_passing.values;\r\n            let PathDict:any = {};\r\n            for(let i = 0; i< receivers.length; i++){\r\n                let nowreceiver = receivers[i];\r\n                if(nowreceiver in PathDict){\r\n                }else{\r\n                    PathDict[nowreceiver] = {}\r\n                }\r\n                PathDict[nowreceiver][senders[i]] = values[i];\r\n            }\r\n            return PathDict;\r\n        }\r\n        let PathDict = constructPathDict(message_passing);\r\n        \r\n        function constructPathLevel(PathDict:any, select_node:number, level:number){\r\n            let PathLevel = [];\r\n            let sourcelist = [];\r\n            let targetlist = [];\r\n            let valuelist = [];\r\n            // Level 0\r\n            let nodeid_idx = 0;\r\n            let nodeid_dict:any = {};\r\n            function getNodeIdx(node_id:string){\r\n                if(node_id in nodeid_dict){\r\n                    return nodeid_dict[node_id];\r\n                }else{\r\n                    nodeid_dict[node_id] = nodeid_idx;\r\n                    nodeid_idx = nodeid_idx + 1;\r\n                    return nodeid_dict[node_id];\r\n                }\r\n            }\r\n            PathLevel.push([select_node]);\r\n            getNodeIdx(\"\"+select_node+\"_0\");\r\n            for(let i = 0; i<level; i++){\r\n                let existingLevel = PathLevel[i];\r\n                let nowlevel = i+1;\r\n                let newPathLevel:any[] = [];\r\n                for(let j = 0; j < existingLevel.length; j++){\r\n                    let nownode = existingLevel[j];\r\n                    let nownode_idx = getNodeIdx(\"\"+nownode+\"_\"+i);\r\n                    let succnodes = Object.keys(PathDict[nownode]);\r\n                    for(let k = 0; k< succnodes.length; k ++ ){\r\n                        let succnode = parseInt(succnodes[k]);\r\n                        let succnode_idx ;\r\n                        if(newPathLevel.indexOf(succnode)>=0){\r\n                            succnode_idx = getNodeIdx(\"\"+succnode+\"_\"+nowlevel);\r\n                        }else{\r\n                            newPathLevel.push(succnode);\r\n                            succnode_idx = getNodeIdx(\"\"+succnode+\"_\"+nowlevel);\r\n                        }\r\n                        sourcelist.push(succnode_idx);\r\n                        targetlist.push(nownode_idx);\r\n                        valuelist.push(PathDict[nownode][succnode]);\r\n                    }\r\n                }\r\n                PathLevel.push(newPathLevel);\r\n            }\r\n            let return_package = {\r\n                \"PathLevel\" : PathLevel,\r\n                \"sourcelist\" : sourcelist,\r\n                \"targetlist\" : targetlist,\r\n                \"valuelist\" : valuelist,\r\n                \"nodeid_dict\" : nodeid_dict\r\n            }\r\n            return return_package;\r\n        }\r\n        \r\n        let data_type = graph_object.data_type_id;\r\n        let task = graph_object.task;\r\n        let return_package = constructPathLevel(PathDict, select_node, level);\r\n        function transform_node_feature(value:number, max:number, min:number){\r\n            return (value - min) / (max-min+1e-16);\r\n        }\r\n        if(data_type == 2){\r\n           \r\n            let PathLevel = return_package[\"PathLevel\"];\r\n            let sourcelist = return_package[\"sourcelist\"];\r\n            let targetlist = return_package[\"targetlist\"];\r\n            let valuelist = return_package[\"valuelist\"];\r\n            let valuemin = Math.min(...valuelist);\r\n            let valuemax = Math.max(...valuelist);\r\n            let nodeid_dict = return_package[\"nodeid_dict\"];\r\n            //console.log(return_package);\r\n\r\n            //let node_num = graph_target.node_features.length;\r\n            \r\n            let edge_num = sourcelist.length;\r\n            let nodes_json = [];\r\n            let links_json = [];\r\n            //var color_func = d3.scaleOrdinal(d3.schemeCategory10);\r\n            let links_color_json:any[] = [];\r\n            for(let i = 0; i < PathLevel.length; i ++){\r\n                let thisPathLevel = PathLevel[i];\r\n                let x = 700-(i*300+20);\r\n                let totalnum = thisPathLevel.length + 2;\r\n                let height = 300;\r\n                let y_gap = height / totalnum;\r\n                let y_start = 0 + y_gap;\r\n                for(let j = 0; j<thisPathLevel.length;j++){\r\n                    let y = y_start + y_gap* j;\r\n                    let nownodeid = thisPathLevel[j];\r\n                    let nownode_idx = nodeid_dict[\"\"+nownodeid+\"_\"+i];\r\n                    let label = graph_target.node_features[nownodeid];\r\n                    if(color_encode === 2){\r\n                        label = graph_target.node_features[nownodeid];\r\n                    }else if(color_encode === 3){\r\n                        label = graph_out.node_features[nownodeid];\r\n                    }\r\n                    //let color = \"#999\";\r\n                    let node_object:any = {\r\n                        \"id\":nownode_idx,\r\n                        \"data_id\":nownodeid,\r\n                        \"group\":label,\r\n                        \"color\":getCoraNodeColor(label),\r\n                        \"x\":x,\r\n                        \"y\":y\r\n                    }\r\n                    nodes_json.push(node_object);\r\n                }\r\n            }\r\n            \r\n            for(let i = 0; i<edge_num;i++){\r\n                let link_color = \"#999\";\r\n                \r\n                let feature = valuelist[i];\r\n                feature = transform_node_feature(feature, valuemax, valuemin);\r\n                link_color = getInfectionEdgeColor(4, feature, 1);\r\n                \r\n                if(links_color_json.indexOf(link_color)>=0){\r\n                    \r\n                }else{\r\n                    links_color_json.push(link_color);\r\n                }\r\n\r\n\r\n\r\n\r\n                links_json.push({\r\n                    \"source\": sourcelist[i],\r\n                    \"target\": targetlist[i],\r\n                    \"value\":1,\r\n                    \"color\":link_color\r\n                })\r\n            }\r\n            let graph_json = {\r\n                \"success\":true,\r\n                \"name\":graph_name,\r\n                \"nodes\":nodes_json,\r\n                \"links\":links_json,\r\n                \"links_color\":links_color_json,\r\n                \"nodenum\":nodes_json.length,\r\n                \"edgenum\":edge_num,\r\n            }\r\n           \r\n            return graph_json;\r\n        }else{\r\n            console.log(\"Unknown data type : \", data_type )\r\n            return {\"success\":false}; \r\n        }\r\n\r\n\r\n        \r\n    }\r\n    public getAccuracy(mask:any[], ground_truth:any[], output:any[]){\r\n        let error:number = 0;\r\n        for(let i = 0; i< mask.length; i++){\r\n            let ground_truth_n = ground_truth[mask[i]];\r\n            let model_output = output[mask[i]];\r\n            if(ground_truth_n !== model_output){\r\n                error = error +1;\r\n            }\r\n        }\r\n        return 1 - error / mask.length;\r\n    }\r\n    public getMisclassified(graph_object:any){\r\n        let Misclassified = [];\r\n        let graph_target = graph_object.graph_target;\r\n        let graph_out = graph_object.graph_out; \r\n        let node_num = graph_target.node_features.length;\r\n        for(let i = 0; i< node_num; i++){\r\n            let ground_truth = graph_target.node_features[i];\r\n            let model_output = graph_out.node_features[i];\r\n            if(ground_truth !== model_output){\r\n                Misclassified.push([i,ground_truth, model_output]);\r\n            }\r\n        }\r\n        let overall_accuracy = 1- Misclassified.length / node_num;\r\n        let mask = graph_object.mask;\r\n\r\n        let gt = graph_target.node_features;\r\n        let ot = graph_out.node_features;\r\n        let train_accuracy = this.getAccuracy(mask.train, gt, ot);\r\n        let test_accuracy = this.getAccuracy(mask.test, gt, ot);\r\n        let valid_accuracy = this.getAccuracy(mask.valid, gt, ot);\r\n        return {\r\n            \"overall_accuracy\":overall_accuracy,\r\n            \"train_accuracy\":train_accuracy,\r\n            \"test_accuracy\":test_accuracy,\r\n            \"valid_accuracy\":valid_accuracy,\r\n            \"Misclassified\": Misclassified\r\n        };\r\n    }\r\n\r\n\r\n    public notifyMessagePassingNodeIdList(RadialTree_json:any){\r\n        if(RadialTree_json[\"success\"]){\r\n            let RadialData = RadialTree_json[\"RadialData\"];\r\n            let selectedMessagePassingNodeIdList = RadialData.map((d:any)=>{\r\n                return d.data_id;\r\n            })\r\n            selectedMessagePassingNodeIdList = Array.from(new Set(selectedMessagePassingNodeIdList));\r\n            //console.log(\"notify MP NodeIdList\", selectedMessagePassingNodeIdList)\r\n            this.props.changeMessagePassingNodeIdList(selectedMessagePassingNodeIdList);\r\n        }else{\r\n            // notify []\r\n            //console.log(\"notify MP NodeIdList\", [])\r\n            this.props.changeMessagePassingNodeIdList([]);\r\n        }\r\n    }\r\n    public onShowSourceChange(e:any){\r\n        this.props.changeShowSource(e.target.checked);\r\n    }\r\n    public render() {\r\n        let {graph_object, model, modelList} = this.props;\r\n\r\n\r\n        let box_height = 250;\r\n        let box_width = 250;\r\n        let box_margin = 20;\r\n        //console.log(\"MessagePassingView\", graph_object);\r\n        let accuracy_package = this.getMisclassified(graph_object);\r\n        //console.log(\"MisClassified: \",accuracy_package);\r\n        function find_model_name(model:number | null){\r\n            if(model){\r\n                for(let i = 0; i < modelList.length; i++){\r\n                    if(modelList[i].id === model){\r\n                        return modelList[i].name;\r\n                    }\r\n                }\r\n            }\r\n            return \"\";\r\n        }\r\n        let explanation_type = graph_object.graph_explaination.type;\r\n        let graph_target = graph_object.graph_target;\r\n        let graph_out = graph_object.graph_out;\r\n        let select_node = this.props.select_inspect_node;\r\n        //console.log(\"Select Node:\", select_node);\r\n        //console.log(\"Select node target/output:\", graph_target.node_features[select_node], graph_out.node_features[select_node]);\r\n        if(explanation_type == \"MessagePassing\"){\r\n            \r\n            let RadialTree_json:any = this.constructRadialTreeJson(graph_object,select_node,this.state.color_encode);\r\n            this.notifyMessagePassingNodeIdList(RadialTree_json);\r\n            let {width, height} = this.props;\r\n            let margin = 20;\r\n            let svgwidth = \"\"+width+\"px\";\r\n            let svgheight = \"\"+height+\"px\";\r\n            //let start_x = 20;\r\n            //let start_y = 350;\r\n            let pathgraph_start_x = margin;\r\n            let pathgraph_start_y = margin;\r\n            let pathgraph_width = width - margin;\r\n            let pathgraph_height = height - margin;\r\n            let nodenum = graph_object.graph_target.node_features.length;\r\n            let colorOptions = [\r\n                [2, \"Ground Truth\"],\r\n                [3, \"Model Output\"],\r\n                [5, \"True / False\"]\r\n            ]\r\n            let generateColorSelect = (options:any[], color_encode:number, onColorEncodeChange:any) =>{\r\n                return (<Select\r\n                        placeholder=\"Select a color\"\r\n                        value={color_encode}\r\n                        style={{ width: '200px' }}\r\n                        onChange={onColorEncodeChange}\r\n                    >\r\n                        { options.map((value:any)=>(\r\n                                <Option key={value[0]} value={value[0]}>{value[1]}</Option>\r\n                        ))}\r\n                        \r\n                    </Select>);\r\n            }\r\n            \r\n            let generateSelect = (nodenum:number, select_node:number, onSelectNodeChange:any) =>{\r\n                let arr = [];\r\n                for(let i = 0; i<nodenum; i++){\r\n                    arr.push(i);\r\n                }\r\n                return (<Select\r\n                        showSearch\r\n                        placeholder=\"Select a node\"\r\n                        value={select_node}\r\n                        style={{ width: '100px' }}\r\n                        onChange={onSelectNodeChange}\r\n                    >\r\n                        { arr.map((value:number)=>(\r\n                                <Option key={value} value={value}>{value}</Option>\r\n                        ))}\r\n                        \r\n                    </Select>);\r\n            }\r\n            let generateTagColor = () =>{\r\n\r\n                let tag = [0,1,2,3,4,5,6].map((d:any)=>{\r\n                    return <Tag key={d} color={getCoraNodeColor(d,2)}>{d}</Tag>\r\n                })\r\n                return tag;\r\n            }\r\n            let layout_mode : any = getLayoutMode();\r\n            return (            \r\n            <div>\r\n                <div className=\"ViewTitle\">Message Passing View</div>\r\n                <div className=\"ViewBox\">\r\n                    {/*Model name: <Tag>{find_model_name(model)}</Tag>   \r\n                    Graph name: <Tag>{graph_object.name}</Tag>  */}\r\n                    Select Node: {generateSelect(nodenum,select_node,this.onSelectNodeChange)}\r\n                    Color Encode: {generateColorSelect(colorOptions, this.state.color_encode, this.onColorEncodeChange)}\r\n                    {/*(this.state.color_encode===2||this.state.color_encode===3)?(generateTagColor()):\"\"*/}\r\n                    {(this.state.color_encode===5)? (<Tag color={getCoraNodeColor(1,5)}>True</Tag>):\"\"}\r\n                    {(this.state.color_encode===5)? (<Tag color={getCoraNodeColor(0,5)}>False</Tag>):\"\"}\r\n                    Text Encode: <Tag color={getCoraTextColor(0)}>Train</Tag>   <Tag color={getCoraTextColor(1)}>Others</Tag>   \r\n                    <Checkbox checked={this.props.showSource} onChange={this.onShowSourceChange}>Show Select Node in Graph View</Checkbox>\r\n                    {/*<div>\r\n                        Overall Accuracy: <Tag>{accuracy_package[\"overall_accuracy\"].toFixed(4)}</Tag>\r\n                        Train Accuracy: <Tag>{accuracy_package[\"train_accuracy\"].toFixed(4)}</Tag>\r\n                        Valid Accuracy: <Tag>{accuracy_package[\"valid_accuracy\"].toFixed(4)}</Tag>\r\n                        Test Accuracy: <Tag>{accuracy_package[\"test_accuracy\"].toFixed(4)}</Tag>\r\n                    </div>*/}\r\n                    <div\r\n                    style={{\r\n                        height: svgheight,\r\n                        width: svgwidth,\r\n                        borderTop: \".6px solid rgba(0,0,0, 0.4)\"\r\n                        }}\r\n                    >\r\n                        <svg\r\n                        style={{ height: '100%', width: '100%' }}\r\n                        id={\"TopSVGChart\"}\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        >\r\n                            {(layout_mode === 1?(<RadialTree x={pathgraph_start_x - pathgraph_width / 2} y={pathgraph_start_y - pathgraph_height /2 } width={pathgraph_width * 2} height={pathgraph_height * 2}\r\n                                graph_json={RadialTree_json} id={1} > </RadialTree>):\r\n                                (<RadialTree x={pathgraph_start_x} y={pathgraph_start_y} width={pathgraph_width} height={pathgraph_height}\r\n                                    graph_json={RadialTree_json} id={1} > </RadialTree>))}\r\n                            {/*<PathGraph x={pathgraph_start_x} y={pathgraph_start_y} width={pathgraph_width} height={pathgraph_height}\r\n                                graph_json={PathGraph_json} id={1} > </PathGraph>*/}\r\n                            {/*<ScatterPlot x={start_x} y={start_y} width={box_width} height={box_height}\r\n                                graph_json={scatter_plot_input_json} id={1} caption={\"Input Layer\"}> </ScatterPlot>\r\n                            <ScatterPlot x={start_x+(box_width+20)*1} y={start_y} width={box_width} height={box_height}\r\n                                graph_json={scatter_plot_hidden_json} id={2} caption={\"Hidden Layer\"}> </ScatterPlot>\r\n                            <ScatterPlot x={start_x+(box_width+20)*2} y={start_y} width={box_width} height={box_height}\r\n                    graph_json={scatter_plot_output_json} id={3} caption={\"Output Layer\"}> </ScatterPlot>*/}\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n            </div>)\r\n        }else{\r\n                return <div>Please choose message passing explanation method.</div>\r\n        }\r\n        //return <div>Message Passing View</div>\r\n    //}\r\n    }\r\n}\r\n\r\n","import MessagePassingView from './MessagePassingView'\r\nexport default MessagePassingView;\r\n\r\n\r\n","\r\nimport './ScatterPlot.css'\r\nimport * as React from \"react\";\r\nconst d3 = require(\"d3\");\r\n\r\nexport interface IProps {\r\n    graph_json : any,\r\n    id: number,\r\n    x:number,\r\n    y:number,\r\n    width:number,\r\n    height:number,\r\n    caption:string\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class ScatterPlot extends React.Component<IProps, IState>{\r\n    private TAB : string= \"ScatterPlot_\";\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n        this.renderD3();\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n        //console.log('Component did update!')\r\n        if(prevProps.graph_json.name !== this.props.graph_json.name || prevProps.id !== this.props.id){\r\n            //d3.selectAll(\"#ScatterPlot_sub_\"+prevProps.id).remove();\r\n            this.renderD3();\r\n        }\r\n\r\n        \r\n     }\r\n\r\n    public renderD3(){\r\n        var nodenum = this.props.graph_json.nodenum;\r\n        var configuration = {\r\n            \"radius\":15,\r\n            \"showlabel\": true,\r\n            \"width\": this.props.width,\r\n            \"height\": this.props.height\r\n        }\r\n        console.log(\"ScatterPlot\" , nodenum)\r\n        if(nodenum >= 100){\r\n            configuration = {\r\n                \"radius\":1,\r\n                \"showlabel\": false,\r\n                \"width\": this.props.width,\r\n                \"height\": this.props.height\r\n            }\r\n        }\r\n        var top_top_svg = d3.select(\"#TopSVGChart_ScatterPlot\")\r\n        var top_svg = d3.select(\"#\"+this.TAB);\r\n        var width = configuration[\"width\"];\r\n        var height = configuration[\"height\"];\r\n        \r\n        var svg = top_svg.select(\"#ScatterPlot_sub\");\r\n            \r\n            svg.attr(\"width\", width)\r\n            .attr(\"height\", height);\r\n            top_top_svg.call(d3.zoom()\r\n        .extent([[0, 0], [width, height]])\r\n        .scaleExtent([0.1, 8])\r\n        .on(\"zoom\", zoomed));\r\n        function zoomed() {\r\n            top_svg.attr(\"transform\", d3.event.transform);\r\n            }      \r\n        //var width = +svg.attr(\"width\"),\r\n        //    height = +svg.attr(\"height\");\r\n        //console.log(width,height)\r\n       // <rect x=\"50\" y=\"20\" width=\"150\" height=\"150\"\r\n        //style=\"fill:blue;stroke:pink;stroke-width:5;fill-opacity:0.1;stroke-opacity:0.9\" />\r\n        /*svg.append(\"rect\")\r\n            .attr(\"x\",0)\r\n            .attr(\"y\",0)\r\n            .attr(\"width\", this.props.width)\r\n            .attr(\"height\", this.props.height)\r\n            .attr(\"fill\",\"white\")\r\n            .attr(\"stroke\",\"black\")\r\n            .attr(\"stroke-width\",2)\r\n            .attr(\"fill-opacity\",0.1)\r\n            .attr(\"stroke-opacity\",0.4);*/\r\n        /*svg.append(\"text\")\r\n            .attr(\"x\",this.props.width/2)\r\n            .attr(\"y\",-20)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(this.props.caption);*/\r\n        \r\n       let trans = d3.transition()\r\n                    .duration(1000)\r\n                    .ease(d3.easeLinear);\r\n        function mappingGraph(graph:any) {\r\n            \r\n            var nodes = svg.select('g.nodes')\r\n                .selectAll(\"g\")\r\n                .data(graph.nodes,function(d:any){\r\n                    return d.id;\r\n                });\r\n                console.log(\"EmbeddingView nodes enter update exit\");\r\n                console.log(nodes.enter().size());\r\n                console.log(nodes.size());\r\n                console.log(nodes.exit().size());\r\n                \r\n            var node_enter = nodes.enter().append(\"g\");\r\n            var node_enter_update = nodes.merge(node_enter);\r\n            nodes.exit().remove();\r\n           \r\n            var circles_enter = node_enter.append(\"circle\");\r\n            var circles = nodes.select(\"circle\");\r\n            var circles_enter_update = circles.merge(circles_enter);\r\n           console.log(\"Circles\", circles_enter, circles_enter.size(), circles, circles.size())\r\n            circles_enter_update.transition(trans)\r\n                .attr(\"r\", configuration[\"radius\"])\r\n                .attr(\"fill\", function(d:any) { return d.color; })\r\n                 \r\n            if(configuration[\"showlabel\"]){\r\n                var labels_enter = node_enter.append(\"text\");\r\n                var labels_update = nodes.select(\"text\");\r\n\r\n                    labels_enter.merge(labels_update).text(function(d:any) {\r\n                        return d.id;\r\n                    })\r\n                    .attr(\"fill\",\"#000\")\r\n                    .attr(\"text-anchor\",\"middle\")\r\n                    .attr('x', 0)\r\n                    .attr('y', +4);\r\n                    circles_enter_update.attr(\"stroke\", \"#222\");\r\n            }\r\n            \r\n            var title_enter = node_enter.append(\"title\");\r\n            nodes.select(\"title\").merge(title_enter)\r\n                .text(function(d:any) { return d.id; });\r\n            function ticked() {\r\n                \r\n                node_enter.merge(nodes).transition(trans)\r\n                    .attr(\"transform\", function(d:any) {\r\n                    return \"translate(\" + d.x + \",\" + d.y + \")\";\r\n                    })\r\n            }\r\n            ticked();\r\n            \r\n            \r\n            \r\n            \r\n            \r\n        };\r\n        mappingGraph(this.props.graph_json);\r\n        \r\n       \r\n    }\r\n    public render() {\r\n        return (\r\n            <svg\r\n                    style={{ height: '100%', width: '100%' }}\r\n                    id={\"TopSVGChart_ScatterPlot\"}\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                <g\r\n                transform={\"translate(\"+this.props.x+\",\"+this.props.y+\")\"}\r\n                style={{ height: \"\"+this.props.height+\"px\", width: \"\"+this.props.width+\"px\" }}\r\n                id={this.TAB}\r\n                >\r\n                    <g id={\"ScatterPlot_sub\"}>\r\n                        <g className=\"nodes\"></g>\r\n\r\n                    </g>\r\n                </g>\r\n            </svg>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n","import MessagePassingView from '../components/DataRuns/MessagePassingView/'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\nimport { changeMessagePassingSelectedNodeIdList, changeShowSource, changeSelectInspectNode } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    showSource: state.showSource,\r\n    select_inspect_node : state.select_inspect_node\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeMessagePassingNodeIdList:  (selectedMessagePassingNodeIdList:any) => dispatch(changeMessagePassingSelectedNodeIdList(selectedMessagePassingNodeIdList)),\r\n    changeShowSource: (showSource:boolean) => dispatch(changeShowSource(showSource)),\r\n    changeSelectInspectNode : (select_inspect_node:number) => dispatch(changeSelectInspectNode(select_inspect_node))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MessagePassingView);\r\n\r\n\r\n\r\n","\r\nimport * as React from \"react\";\r\nimport ScatterPlot from \"./ScatterPlot\";\r\n//import PathGraph from \"./PathGraph\";\r\n//import RadialTree from \"./RadialTree\";\r\nimport { Select, Row, Col, Upload, Icon, Button, message, Tag, Checkbox } from 'antd';\r\nimport {getCoraNodeColor, getInfectionEdgeColor, getCoraTextColor} from '../../../helper';\r\n//import { changeShowSource } from \"../../../actions\";\r\nconst Option = Select.Option;\r\nconst d3 = require(\"d3\");\r\n\r\nexport interface IProps {\r\n    graph_object:any,\r\n    show_mode:number, \r\n    explained_node:number, \r\n    onExplainNodeChange:any, \r\n    onShowModeChange:any,\r\n    model:number,\r\n    modelList:any[],\r\n    width:number,\r\n    height:number,\r\n    specificNodeIdList: any[]\r\n    //changeMessagePassingNodeIdList:any,\r\n    //changeShowSource:any,\r\n    //showSource:boolean\r\n}\r\nexport interface IState {\r\n    select_node : number,\r\n    color_encode: number,\r\n    embeddinglayer : number\r\n}\r\n\r\nexport default class EmbeddingView extends React.Component<IProps, IState>{\r\n\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.onSelectNodeChange = this.onSelectNodeChange.bind(this);\r\n        this.onColorEncodeChange = this.onColorEncodeChange.bind(this);\r\n        this.onEmbeddingLayerChange = this.onEmbeddingLayerChange.bind(this);\r\n        //this.onShowSourceChange = this.onShowSourceChange.bind(this);\r\n        this.state = {\r\n            select_node : 0,\r\n            color_encode : 2,\r\n            embeddinglayer: 1\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n\r\n        \r\n     }\r\n     public onSelectNodeChange(select_node: number) {\r\n        this.setState({\r\n            select_node:select_node\r\n        })\r\n    }\r\n    public onColorEncodeChange(color_encode: number) {\r\n        this.setState({\r\n            color_encode:color_encode\r\n        })\r\n    }\r\n    public onEmbeddingLayerChange(embeddinglayer: number) {\r\n        console.log(\"onembeddinglayerchange\")\r\n        this.setState({\r\n            embeddinglayer:embeddinglayer\r\n        })\r\n    }\r\n\r\n\r\n    public getAccuracy(mask:any[], ground_truth:any[], output:any[]){\r\n        let error:number = 0;\r\n        for(let i = 0; i< mask.length; i++){\r\n            let ground_truth_n = ground_truth[mask[i]];\r\n            let model_output = output[mask[i]];\r\n            if(ground_truth_n !== model_output){\r\n                error = error +1;\r\n            }\r\n        }\r\n        return 1 - error / mask.length;\r\n    }\r\n    public getMisclassified(graph_object:any){\r\n        let Misclassified = [];\r\n        let graph_target = graph_object.graph_target;\r\n        let graph_out = graph_object.graph_out; \r\n        let node_num = graph_target.node_features.length;\r\n        for(let i = 0; i< node_num; i++){\r\n            let ground_truth = graph_target.node_features[i];\r\n            let model_output = graph_out.node_features[i];\r\n            if(ground_truth !== model_output){\r\n                Misclassified.push([i,ground_truth, model_output]);\r\n            }\r\n        }\r\n        let overall_accuracy = 1- Misclassified.length / node_num;\r\n        let mask = graph_object.mask;\r\n\r\n        let gt = graph_target.node_features;\r\n        let ot = graph_out.node_features;\r\n        let train_accuracy = this.getAccuracy(mask.train, gt, ot);\r\n        let test_accuracy = this.getAccuracy(mask.test, gt, ot);\r\n        let valid_accuracy = this.getAccuracy(mask.valid, gt, ot);\r\n        return {\r\n            \"overall_accuracy\":overall_accuracy,\r\n            \"train_accuracy\":train_accuracy,\r\n            \"test_accuracy\":test_accuracy,\r\n            \"valid_accuracy\":valid_accuracy,\r\n            \"Misclassified\": Misclassified\r\n        };\r\n    }\r\n\r\n\r\n\r\n     public constructScatterPlotJson(graph_object:any,show_layer:string=\"input\",width=600,height=600,margin=100,\r\n     exceedingmargin=20,color_encode:number=2, selectedNodeIdList:any[]=[]){\r\n        let selectedStr = selectedNodeIdList.join(\"_\");\r\n\r\n        let graph_name = graph_object.name+\"_\"+graph_object.dataset_id+\"_\"+(graph_object.model)\r\n                +\"_\"+graph_object.explain_id \r\n                +\"_\"+(graph_object.graph)+\"_\"+graph_object.data_type_id+\"_\"+color_encode+\"_\"+width+\"_\"+height+\"_SELECTED_\"+selectedStr+\"_SELECTED_END_\";\r\n        \r\n        let graph_in = graph_object.graph_in;\r\n        let graph_target = graph_object.graph_target;\r\n        let graph_out = graph_object.graph_out;\r\n        let graph_explaination = graph_object.graph_explaination;\r\n        let explaination_type = graph_explaination.type;\r\n        if(explaination_type !== \"MessagePassing\"){\r\n            console.log(\"Unsupported explaination type , \", explaination_type);\r\n            return {\"success\": false};\r\n        }\r\n        if(selectedNodeIdList.length === 0){\r\n            return {\"success\":false};\r\n\r\n        }\r\n        let embedding = graph_object.embedding;\r\n        let show_embedding = embedding[show_layer];\r\n        function get_boundingbox(graph_layout:any[]){\r\n            if(graph_layout.length === 0){\r\n                return {\r\n                    \"xmin\":0,\r\n                    \"xmax\":0,\r\n                    \"ymin\":0,\r\n                    \"ymax\":0\r\n                }\r\n            }else{\r\n                let xmin = graph_layout[0][0];\r\n                let xmax = graph_layout[0][0];\r\n                let ymin = graph_layout[0][1];\r\n                let ymax = graph_layout[0][1];\r\n                for(let i = 0; i< graph_layout.length; i++){\r\n                    let nowx = graph_layout[i][0];\r\n                    let nowy = graph_layout[i][1];\r\n                    if(xmin > nowx){\r\n                        xmin = nowx;\r\n                    }\r\n                    if(xmax < nowx){\r\n                        xmax = nowx;\r\n                    }\r\n                    if(ymin > nowy){\r\n                        ymin = nowy;\r\n                    }\r\n                    if(ymax < nowy){\r\n                        ymax = nowy;\r\n                    }\r\n                }\r\n                return {\r\n                    \"xmin\":xmin,\r\n                    \"xmax\":xmax,\r\n                    \"ymin\":ymin,\r\n                    \"ymax\":ymax\r\n                }\r\n            }\r\n        }\r\n        function transform_graphlayout(graph_layout:any[],width=600,height=600,margin=100,exceedingmargin=20){\r\n            if(graph_layout.length === 0){\r\n                return graph_layout;\r\n            }else{\r\n                let bounding_box = get_boundingbox(graph_layout);\r\n                \r\n                if(graph_layout.length >= 100){\r\n                    margin = exceedingmargin;\r\n                }\r\n                \r\n                let realwidth = width - 2*margin;\r\n                let realheight = height - 2*margin;\r\n                let gap_x = bounding_box[\"xmax\"] - bounding_box[\"xmin\"];\r\n                let gap_y = bounding_box[\"ymax\"] - bounding_box[\"ymin\"];\r\n                let realscale = Math.min(realwidth / gap_x, realheight / gap_y);\r\n                let left = margin + (realwidth - realscale * gap_x) / 2;\r\n                let top = margin + (realheight - realscale * gap_y) / 2; \r\n                let xmin = bounding_box[\"xmin\"];\r\n                let ymin = bounding_box[\"ymin\"];\r\n                let new_graph_layout = [];\r\n                for(let i = 0; i< graph_layout.length; i++){\r\n                    let nowx = graph_layout[i][0];\r\n                    let nowy = graph_layout[i][1];\r\n                    let locx = left+ (nowx - xmin) * realscale;\r\n                    let locy = top + (nowy - ymin) * realscale;\r\n                    new_graph_layout.push([locx,locy]);\r\n                }\r\n                return new_graph_layout;\r\n            }\r\n        }\r\n        \r\n        let data_type = graph_object.data_type_id;\r\n        let task = graph_object.task;\r\n        function transform_node_feature(value:number, max:number, min:number){\r\n            return (value - min) / (max-min+1e-16);\r\n        }\r\n        show_embedding = transform_graphlayout(show_embedding,width,height,margin,exceedingmargin);\r\n        if(data_type == 2){\r\n           \r\n            \r\n            let node_num = graph_target.node_features.length;\r\n            //let edge_num = graph_in.senders.length;\r\n            let nodes_json = [];\r\n            //var color_func = d3.scaleOrdinal(d3.schemeCategory10);\r\n            for(let i = 0; i<node_num;i++){\r\n                let label = graph_target.node_features[i];\r\n                if(color_encode === 2){\r\n                    label = graph_target.node_features[i];\r\n                }else if(color_encode === 3){\r\n                    label = graph_out.node_features[i];\r\n                }else if(color_encode === 5){\r\n                    label = graph_target.node_features[i] === graph_out.node_features[i];\r\n                }\r\n                let color = getCoraNodeColor(label, color_encode);\r\n                if(selectedNodeIdList.indexOf(i)>=0){\r\n                    \r\n                }else{\r\n                    color = \"#ddd\";\r\n                }\r\n                let node_object:any = {\r\n                    \"id\":i,\r\n                    \"group\":label,\r\n                    \"color\":color,\r\n                    \"x\":show_embedding[i][0],\r\n                    \"y\":show_embedding[i][1]\r\n                }\r\n                nodes_json.push(node_object);\r\n            }\r\n            \r\n            let graph_json = {\r\n                \"success\":true,\r\n                \"name\":graph_name,\r\n                \"nodes\":nodes_json,\r\n                \"nodenum\":node_num,\r\n            }\r\n            return graph_json;\r\n        }else{\r\n            console.log(\"Unknown data type : \", data_type )\r\n            return {\"success\":false}; \r\n        }\r\n\r\n\r\n        \r\n    }\r\n    \r\n    public render() {\r\n        let {graph_object, model, modelList, width, height, specificNodeIdList} = this.props;\r\n        let box_margin = 30;\r\n\r\n        let box_height = height ;\r\n        let box_width = width;\r\n        let svgheight = \"\"+height+\"px\";\r\n        let accuracy_package = this.getMisclassified(graph_object);\r\n        function find_model_name(model:number | null){\r\n            if(model){\r\n                for(let i = 0; i < modelList.length; i++){\r\n                    if(modelList[i].id === model){\r\n                        return modelList[i].name;\r\n                    }\r\n                }\r\n            }\r\n            return \"\";\r\n        }\r\n        let explanation_type = graph_object.graph_explaination.type;\r\n        let graph_target = graph_object.graph_target;\r\n        let graph_out = graph_object.graph_out;\r\n        let select_node = this.state.select_node;\r\n        //console.log(\"Select Node:\", select_node);\r\n        //console.log(\"Select node target/output:\", graph_target.node_features[select_node], graph_out.node_features[select_node]);\r\n        if(explanation_type == \"MessagePassing\"){\r\n            \r\n            //let PathGraph_json:any = this.constructPathGraphJson(graph_object,this.state.select_node,this.state.color_encode);\r\n            //let RadialTree_json:any = this.constructRadialTreeJson(graph_object,this.state.select_node,this.state.color_encode);\r\n            //this.notifyMessagePassingNodeIdList(RadialTree_json);\r\n            //let start_x = (width-box_width)/2;\r\n            //let start_y = 50;\r\n            let start_x = 0;\r\n            let start_y = 0;\r\n            let nodenum = graph_object.graph_target.node_features.length;\r\n            let colorOptions = [\r\n                [2, \"Ground Truth\"],\r\n                [3, \"Model Output\"],\r\n                [5, \"True / False\"]\r\n            ]\r\n            let embeddingOptions = [\r\n                [1, \"Input Layer\"],\r\n                [2, \"Hidden Layer\"],\r\n                [3, \"Output Layer\"]\r\n            ]\r\n            let generateColorSelect = (options:any[], color_encode:number, onColorEncodeChange:any) =>{\r\n                return (<Select\r\n                        placeholder=\"Select a color\"\r\n                        value={color_encode}\r\n                        style={{ width: '200px' }}\r\n                        onChange={onColorEncodeChange}\r\n                    >\r\n                        { options.map((value:any)=>(\r\n                                <Option key={value[0]} value={value[0]}>{value[1]}</Option>\r\n                        ))}\r\n                        \r\n                    </Select>);\r\n            }\r\n            let generateEmbeddingLayerSelect = (options:any[], embeddinglayer:number, onEmbeddingLayerChange:any) =>{\r\n                return (<Select\r\n                        placeholder=\"Select a embedding layer\"\r\n                        value={embeddinglayer}\r\n                        style={{ width: '200px' }}\r\n                        onChange={onEmbeddingLayerChange}\r\n                    >\r\n                        { options.map((value:any)=>(\r\n                                <Option key={value[0]} value={value[0]}>{value[1]}</Option>\r\n                        ))}\r\n                        \r\n                    </Select>);\r\n            }\r\n            let generateSelect = (nodenum:number, select_node:number, onSelectNodeChange:any) =>{\r\n                let arr = [];\r\n                for(let i = 0; i<nodenum; i++){\r\n                    arr.push(i);\r\n                }\r\n                return (<Select\r\n                        showSearch\r\n                        placeholder=\"Select a node\"\r\n                        value={select_node}\r\n                        style={{ width: '100px' }}\r\n                        onChange={onSelectNodeChange}\r\n                    >\r\n                        { arr.map((value:number)=>(\r\n                                <Option key={value} value={value}>{value}</Option>\r\n                        ))}\r\n                        \r\n                    </Select>);\r\n            }\r\n            let generateEmbeddingView = (embeddinglayer:number)=>{\r\n                console.log(\"embeddinglayer\", embeddinglayer);\r\n                let title = [\"\", \"input\", \"hidden\", \"output\"];\r\n                box_width = box_width * 2;\r\n                box_height = box_height * 2;\r\n                let scatter_plot_json = this.constructScatterPlotJson(graph_object,title[embeddinglayer],box_width,box_height,box_margin,box_margin,this.state.color_encode, specificNodeIdList);\r\n                //width = width * 10;\r\n                //height = height * 10;\r\n                if(scatter_plot_json[\"success\"]){\r\n                    if(embeddinglayer === 1){\r\n\r\n                        return <ScatterPlot x={0} y={0} width={width} height={height}\r\n                        graph_json={scatter_plot_json} id={1} caption={\"Input Layer\"}> </ScatterPlot>\r\n                    }else if(embeddinglayer === 2){\r\n    \r\n                        return <ScatterPlot x={0} y={0} width={width} height={height} \r\n                        graph_json={scatter_plot_json} id={2} caption={\"Hidden Layer\"}> </ScatterPlot>\r\n                    }else if(embeddinglayer === 3){\r\n    \r\n                        return <ScatterPlot x={0} y={0} width={width} height={height}\r\n                    graph_json={scatter_plot_json} id={3} caption={\"Output Layer\"}> </ScatterPlot>\r\n                    }else{\r\n                        return <div />\r\n                    }\r\n                }else{\r\n                    return <div />\r\n                }\r\n                \r\n            }\r\n            return (            \r\n            <div>\r\n                <div className=\"ViewTitle\">Embedding View</div>\r\n                <div className=\"ViewBox\">\r\n                    Select Embedding Layer:\r\n                    {generateEmbeddingLayerSelect(embeddingOptions,this.state.embeddinglayer,this.onEmbeddingLayerChange)}\r\n                    Select Color Encode:\r\n                    {generateColorSelect(colorOptions, this.state.color_encode, this.onColorEncodeChange)}\r\n                    <div\r\n                    style={{\r\n                        height: svgheight,\r\n                        width: '100%',\r\n                        borderTop: \".6px solid rgba(0,0,0, 0.4)\"\r\n                        }}\r\n                    >\r\n                        \r\n                            {generateEmbeddingView(this.state.embeddinglayer)}\r\n                            \r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>)\r\n        }else{\r\n                return <div>Please choose message passing explanation method.</div>\r\n        }\r\n        //return <div>Message Passing View</div>\r\n    //}\r\n    }\r\n}\r\n\r\n","import EmbeddingView from './EmbeddingView'\r\nexport default EmbeddingView;\r\n\r\n\r\n","\r\nimport './Matrix.css'\r\nimport * as React from \"react\";\r\nimport { timeSaturday } from 'd3';\r\nconst d3 = require(\"d3\");\r\n\r\nexport interface IProps {\r\n  feature_matrix_json : any,\r\n  layout_config:any,\r\n  id:number,\r\n  MatrixFilters:any,\r\n  MatrixRowFilters:any,\r\n  changeMatrixFilters:any\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class Matrix extends React.Component<IProps, IState>{\r\n    private TAB : string= \"Matrix_\";\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n        this.renderD3();\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n         //console.log('Component did update!')\r\n         if(prevProps.feature_matrix_json.name !== this.props.feature_matrix_json.name ||\r\n           prevProps.MatrixFilters.refreshnumber !== this.props.MatrixFilters.refreshnumber ||\r\n           prevProps.MatrixRowFilters.refreshnumber !== this.props.MatrixRowFilters.refreshnumber){\r\n          ///d3.selectAll(\"#FeatureMatrix_\"+this.props.id).remove();\r\n          this.renderD3();\r\n      }\r\n\r\n\r\n        \r\n     }\r\n\r\n    public renderD3(){\r\n        //console.log(\"Matrix filters:\", this.props.MatrixFilters)\r\n        //console.log(this.props.MatrixRowFilters);\r\n        let {feature_matrix_json} = this.props;\r\n        let layout_config = this.props.layout_config;\r\n        let showSource = feature_matrix_json.showSource;\r\n        let margin = { top: 0, right: 30, bottom: 100, left: 0 },\r\n          width = layout_config.width - margin.left - margin.right,\r\n          y_axis = feature_matrix_json[\"y_axis\"], // y_axis_name\r\n          x_axis = feature_matrix_json[\"x_axis\"], // x_axis_name\r\n          data = feature_matrix_json[\"matrix\"],\r\n          type = feature_matrix_json[\"type\"],\r\n          color_info = feature_matrix_json[\"color_info\"];\r\n        \r\n        let matrixFilters = this.props.MatrixFilters;\r\n      let matrixRowFilters = this.props.MatrixRowFilters;\r\n      function transformDataTwoFilters(data:any, indexFilters:any, rowFilters:any){\r\n        let newData:any = [];\r\n        let rowTest = new Set(rowFilters);\r\n        let rowMap:any = {}\r\n        for(let i = 0 ;i<rowFilters.length;i++){\r\n          rowMap[rowFilters[i]] = i;\r\n        }\r\n        for(let i = 0; i<data.length; i++){\r\n          \r\n          if(data[i][\"x\"]>=indexFilters[0]&&data[i][\"x\"]<indexFilters[1]){\r\n            let curr_row_id = data[i][\"y\"];\r\n            if(rowTest.has(curr_row_id)){\r\n              newData.push({\r\n                \"x\":data[i][\"x\"] - indexFilters[0],\r\n                \"y\":rowMap[curr_row_id],\r\n                \"value\":data[i][\"value\"]\r\n              })\r\n            }\r\n            \r\n          }\r\n        }\r\n        return newData;\r\n      }\r\n      function transformDataOneFilter(data:any, indexFilters:any){\r\n        let newData:any = [];\r\n        \r\n        for(let i = 0; i<data.length; i++){\r\n          \r\n          if(data[i][\"x\"]>=indexFilters[0]&&data[i][\"x\"]<indexFilters[1]){\r\n              newData.push({\r\n                \"x\":data[i][\"x\"] - indexFilters[0],\r\n                \"y\":data[i][\"y\"],\r\n                \"value\":data[i][\"value\"]\r\n              })\r\n            \r\n            \r\n          }\r\n        }\r\n        return newData;\r\n      }\r\n      function transformYaxis(row_filters:any, y_axis:any){\r\n        let new_y_axis:any[] = [];\r\n        for(let i = 0; i<row_filters.length; i++){\r\n          new_y_axis.push(y_axis[row_filters[i]]);\r\n        }\r\n        return new_y_axis;\r\n      }\r\n      let max_row_num_block = Math.max(1, Math.floor(width / 15));\r\n        \r\n      if(!matrixFilters.hasOwnProperty(\"index\")){\r\n        matrixFilters[\"index\"] = [0,max_row_num_block];\r\n      }\r\n        /*if(matrixFilters[\"index\"][1] - matrixFilters[\"index\"][0] >=100){\r\n          x_axis = [];\r\n          y_axis = [];\r\n          data = [];\r\n        }else{*/\r\n          if(matrixFilters[\"index\"][1] - matrixFilters[\"index\"][0] >=max_row_num_block){\r\n            matrixFilters[\"index\"][1] = matrixFilters[\"index\"][0] + max_row_num_block;\r\n          }\r\n          let y_axis_color = color_info[\"y_axis_color\"];\r\n          if(matrixRowFilters.hasOwnProperty(\"row_index\")&&showSource){\r\n            x_axis = x_axis.slice(matrixFilters[\"index\"][0], matrixFilters[\"index\"][1]);\r\n            y_axis = transformYaxis(matrixRowFilters[\"row_index\"], y_axis);\r\n            y_axis_color = transformYaxis(matrixRowFilters[\"row_index\"], y_axis_color);\r\n            data = transformDataTwoFilters(data, matrixFilters[\"index\"], matrixRowFilters[\"row_index\"]);\r\n          }else{\r\n            x_axis = x_axis.slice(matrixFilters[\"index\"][0], matrixFilters[\"index\"][1]);\r\n            data = transformDataOneFilter(data, matrixFilters[\"index\"]);\r\n          }\r\n          \r\n          if(!showSource&& y_axis.length!==y_axis_color.length){\r\n            y_axis = [];\r\n            x_axis = [];\r\n            data = [];\r\n          }\r\n          \r\n        //}\r\n        \r\n        let gridSize = Math.floor(width / (max_row_num_block));\r\n        let height = gridSize * y_axis.length + 20;\r\n      \r\n\r\n       let buckets:any , colors:any;\r\n       if(feature_matrix_json[\"distance_select\"] === 1 && type === \"discrete\"){\r\n        buckets = 2;\r\n        colors =  [\"#ffffd9\",\"#081d58\"]\r\n      }else{\r\n         \r\n          buckets = 9;\r\n          colors = [\"#ffffd9\",\"#edf8b1\",\"#c7e9b4\",\"#7fcdbb\",\"#41b6c4\",\"#1d91c0\",\"#225ea8\",\"#253494\",\"#081d58\"]\r\n      \r\n       }\r\n      //console.log(feature_matrix_json);\r\n      function constructFakeData(){\r\n          let fakedata:any = [];\r\n          for(let i = 0; i<x_axis.length; i ++){\r\n            for(let j =0 ;j<y_axis.length; j++){\r\n              fakedata.push({\r\n                \"x\":i,\r\n                \"y\":j,\r\n                \"value\":0\r\n              })\r\n            }\r\n          }\r\n          return fakedata;\r\n      }\r\n      let fakedata = constructFakeData(); \r\n      let final_data:any;\r\n      if(type === \"discrete\"){\r\n         final_data = fakedata.concat(data);\r\n      }else{\r\n        final_data = data;\r\n      }\r\n      let data_max = d3.max(final_data, (d:any) => d.value);\r\n      let data_min = d3.min(final_data, (d:any) => d.value);\r\n      //console.log(\"Data Max Min\", data_max, data_min)\r\n      const top_svg = d3.select(\"#FeatureMatrix_\"+this.props.id)\r\n          .attr(\"width\", width + margin.left + margin.right)\r\n          .attr(\"height\", height + margin.top + margin.bottom)\r\n          .attr(\"transform\", \"translate(\" + layout_config.x + \",\" + layout_config.y + \")\");\r\n      const svg = top_svg.select(\"#Matrix\")\r\n          .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n      // Axis Label Definition //\r\n      // --------- y axis ------------- //\r\n      if(showSource){\r\n        y_axis = [];\r\n      }\r\n        const y_axis_labels = svg.selectAll(\".y_axisLabel\")\r\n                              .data(y_axis,function(d:any){\r\n                                return d;\r\n                              });\r\n      let radius = Math.min(5,gridSize/4);\r\n      let radius_gap = 0.3;\r\n      let transform_x = -radius*2 - radius_gap;\r\n      let transform_y = radius*2;\r\n      let y_axis_label_enter = y_axis_labels.enter().append(\"g\").attr(\"class\", \"y_axisLabel\");\r\n\r\n          y_axis_label_enter.merge(y_axis_labels).attr(\"transform\",(d:any, i:any) => \"translate(\"+transform_x+\",\" + (i * gridSize + transform_y) + \")\");\r\n          y_axis_labels.exit().remove();\r\n      let y_axis_label_color = \"#000\";\r\n      function getArc(radius:number){\r\n        return d3.arc()\r\n        .innerRadius(radius)\r\n        .outerRadius(radius*2);\r\n    }\r\n      if(color_info[\"enable_y_axis_color\"])\r\n      {\r\n        let y_axis_color = color_info[\"y_axis_color\"];\r\n        \r\n        var arc_data = [{\r\n          \"index\":0,\r\n          \"value\":1/3\r\n        }, {\r\n            \"index\":1,\r\n            \"value\":1/3\r\n        }, {\r\n            \"index\":2,\r\n            \"value\":1/3\r\n        }];\r\n        var ori_arcs = d3.pie()\r\n        .startAngle((-60/180) * Math.PI)\r\n        .endAngle((2-60/180) * Math.PI)\r\n        .value(function(a:any){\r\n            return a.value;\r\n        })\r\n        .sort(function(a:any, b:any) {\r\n            return a.index<b.index;\r\n        });\r\n        var arcs = ori_arcs(arc_data);\r\n        \r\n\r\n        var outer_circles_enter = y_axis_label_enter.append(\"circle\").attr(\"class\",\"outer_circle\");\r\n        var outer_circles = y_axis_labels.select(\"circle.outer_circle\");\r\n        var outer_circles_enter_update = outer_circles_enter.merge(outer_circles);\r\n        \r\n        outer_circles_enter_update//.transition(trans)\r\n                    .attr(\"r\", function(d:any){\r\n                        return radius*2\r\n                    })\r\n                   .attr(\"fill\", function(d:any,i:any) { return y_axis_color[i][4]; });\r\n\r\n        \r\n        let overall_background = [];\r\n        for (let i = 0; i < 3; i++){\r\n            let background_enter = y_axis_label_enter.append(\"path\").attr(\"class\",\"arc_\"+i)\r\n            let background = y_axis_labels.select(\"path.arc_\"+i);\r\n            let background_enter_update  = background_enter.merge(background);\r\n            background_enter_update\r\n            .style(\"fill\", function(d:any,j:any){\r\n                return y_axis_color[j][i+1]\r\n            })\r\n            .attr(\"d\", function(d:any){\r\n                return getArc(radius)(arcs[i])\r\n            });\r\n            overall_background.push(background_enter_update);\r\n\r\n        }\r\n        \r\n        \r\n        var inner_circles_enter = y_axis_label_enter.append(\"circle\").attr(\"class\",\"inner_circle\");\r\n        var inner_circles = y_axis_labels.select(\"circle.inner_circle\");\r\n        var inner_circles_enter_update = inner_circles_enter.merge(inner_circles);\r\n        //console.log(\"circles enter update\", circles_enter.size(), inner_circles, circles.size(), circles);\r\n        //console.log(\"merge\", circles_enter.merge(circles));\r\n        \r\n        inner_circles_enter_update//.transition(trans)\r\n                    .attr(\"r\", function(d:any){\r\n                        return radius - radius_gap;\r\n                    })\r\n                    .attr(\"fill\", function(d:any,i:any) { return y_axis_color[i][0]; });\r\n                    \r\n      }\r\n      \r\n      \r\n      /*\r\n      \r\n      let rect_width = 36;\r\n      let rect_height = gridSize; \r\n      \r\n      if(color_info[\"enable_y_axis_color\"])\r\n      {\r\n        let y_axis_color = color_info[\"y_axis_color\"];\r\n        y_axis_label_color = \"#fff\";\r\n        \r\n        let y_axis_rect =  y_axis_labels.append(\"rect\")\r\n                .attr(\"x\", -rect_width )\r\n                .attr(\"y\", 0)\r\n                .attr(\"rx\", 4)\r\n                .attr(\"ry\", 4)\r\n                .attr(\"class\", \"hour bordered\")\r\n                .attr(\"width\", rect_width)\r\n                .attr(\"height\", rect_height)\r\n                .style(\"fill\", function(d:any, i:any){\r\n                  return y_axis_color[i];\r\n                })\r\n                .attr(\"class\", \"y-axis-rect bordered\");\r\n      }\r\n      */\r\n     \r\n     let y_axis_label_text_enter = y_axis_label_enter.append(\"text\");\r\n\r\n     y_axis_label_text_enter.merge(y_axis_labels.select(\"text\"))\r\n            .text(function (d:any) { return d; })\r\n            .style(\"text-anchor\", \"end\")\r\n            .style(\"font-size\", \"9pt\")\r\n            .style(\"font-family\", \"Consolas, courier\")\r\n            .style(\"fill\", y_axis_label_color)\r\n            .style(\"dominant-baseline\",\"central\")\r\n            .attr(\"transform\", \"translate(\"+transform_x+\",\" + 0 + \")\")\r\n            .attr(\"class\", \"y-axis\");\r\n            \r\n      // --------- x axis ------------- //\r\n      const x_axis_label = svg.selectAll(\".x_axisLabel\").data(x_axis, function(d:any){\r\n        return d;\r\n      });\r\n      \r\n      let x_axis_label_enter = x_axis_label.enter().append(\"g\").attr(\"class\",\"x_axisLabel\");\r\n        x_axis_label_enter.merge(x_axis_label).attr(\"transform\",(d:any, i:any) => \"translate(\" + i * gridSize + \",0)\")\r\n        x_axis_label.exit().remove();\r\n      let x_axis_label_color = \"#000\";\r\n      /*\r\n      if(color_info[\"enable_x_axis_color\"])\r\n      {\r\n        let x_axis_color = color_info[\"x_axis_color\"];\r\n        x_axis_label_color = \"#fff\";\r\n        let x_axis_rect =  x_axis_label.append(\"rect\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"y\", -rect_width)\r\n            .attr(\"rx\", 4)\r\n            .attr(\"ry\", 4)\r\n            .attr(\"class\", \"hour bordered\")\r\n            .attr(\"width\", rect_height)\r\n            .attr(\"height\", rect_width)\r\n            .style(\"fill\", function(d:any, i:any){\r\n              return x_axis_color[i];\r\n            })\r\n            \r\n            .attr(\"class\", \"x-axis-rect bordered\");\r\n       \r\n      }\r\n      */\r\n      let x_axis_label_text_enter = x_axis_label_enter.append(\"text\");\r\n\r\n        x_axis_label_text_enter.merge(x_axis_label.select(\"text\"))\r\n          .text((d:any) => d)\r\n          .style(\"text-anchor\", \"begin\")\r\n          .style(\"font-size\", \"9pt\")\r\n          .style(\"font-family\", \"Consolas, courier\")\r\n          .style(\"fill\", x_axis_label_color)\r\n          .attr(\"transform\", \r\n            \"translate(\"+gridSize*0.25+\", -2)rotate(-45)\"\r\n          )\r\n          .attr(\"class\", \"x-axis\");\r\n\r\n      // \"translate(\"+gridSize*0.75+\", -2)rotate(-90)\"\r\n        \r\n      let color_domain = [];\r\n      let step = (data_max-data_min) / (buckets-1);\r\n      for(let i = 0; i< buckets; i++){\r\n        color_domain.push(i*step+data_min);\r\n      }\r\n      const colorScale = d3.scaleLinear()\r\n                          .domain(color_domain)\r\n                          .range(colors);\r\n\r\n      const cards = svg.selectAll(\".hour\")\r\n          .data(final_data, (d:any) => d.x+':'+d.y);\r\n\r\n      //cards.append(\"title\");\r\n      function getCardColor(value:number, y:number){\r\n        if(value > 0){\r\n          return y_axis_color[y][0];\r\n        }else{\r\n          return colors[0];\r\n        }\r\n      }\r\n      let cards_rect_enter = cards.enter().append(\"rect\").attr(\"class\", \"hour bordered\");\r\n\r\n          cards_rect_enter.merge(cards)\r\n          .attr(\"x\", (d:any) => (d.x) * gridSize)\r\n          .attr(\"y\", (d:any) => (d.y) * gridSize)\r\n          .attr(\"rx\", 4)\r\n          .attr(\"ry\", 4)\r\n          \r\n          .attr(\"width\", gridSize)\r\n          .attr(\"height\", gridSize)\r\n          .attr(\"opacity\", (d:any)=> d.value)\r\n          .style(\"fill\", (d:any) => getCardColor(d.value, d.y))\r\n          .on(\"mouseover\", function(d:any){return tooltip.style(\"visibility\", \"visible\").text(d.value.toFixed(4));})\r\n          .on(\"mousemove\", function(d:any){return tooltip.style(\"top\", (d3.event.pageY-10)+\"px\").style(\"left\",(d3.event.pageX+10)+\"px\");})\r\n          .on(\"mouseout\", function(d:any){return tooltip.style(\"visibility\", \"hidden\");});\r\n      //cards.select(\"title\").text((d:any) => d.value);\r\n\r\n      cards.exit().remove();\r\n      // Define the div for the tooltip\r\n      \r\n      var tooltip = d3.select(\"body\")\r\n                  .select(\"#tooltip_matrix\")\r\n                  .style(\"position\", \"absolute\")\r\n                  .style(\"z-index\", \"10\")\r\n                  .style(\"visibility\", \"hidden\")\r\n                  //.style(\"background\",\"lightsteelblue\"\t)\r\n                  .text(\"a simple tooltip\");\r\n      /*\r\n      const legend = svg.selectAll(\".legend\")\r\n          .data([0].concat(colorScale.quantiles()), (d:any) => d);\r\n*/\r\n/*\r\n      const legend = svg.selectAll(\".legend\")\r\n      .data(color_domain, (d:any) => d);\r\n      const legend_g = legend.enter().append(\"g\")\r\n          .attr(\"class\", \"legend\");\r\n\r\n      legend_g.append(\"rect\")\r\n        .attr(\"x\", (d:any, i:any) => legendElementWidth * i)\r\n        .attr(\"y\", height)\r\n        .attr(\"width\", legendElementWidth)\r\n        .attr(\"height\", gridSize / 2)\r\n        .style(\"fill\", (d:any, i:any) => colors[i]);\r\n\r\n      legend_g.append(\"text\")\r\n        .attr(\"class\", \"mono\")\r\n        .text((d:any) => d.toFixed(1))\r\n        .attr(\"x\", (d:any, i:any) => legendElementWidth * i)\r\n        .attr(\"y\", height + gridSize*2);\r\n\r\n      legend.exit().remove();\r\n      */\r\n       \r\n\r\n       \r\n    }\r\n    public render() {\r\n        return (\r\n            <g\r\n              id={\"FeatureMatrix_\"+this.props.id}\r\n            >\r\n                <g id=\"Matrix\"></g>\r\n            </g>\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\n","import EmbeddingView from '../components/DataRuns/EmbeddingView'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    specificNodeIdList : state.specificNodeIdList\r\n\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmbeddingView);\r\n\r\n\r\n\r\n","import Matrix from '../components/DataRuns/FeatureMatrixView/Matrix';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeMatrixFilters} from '../actions';\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    MatrixFilters: state.matrixFilters,\r\n    MatrixRowFilters: state.matrixRowFilters\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeMatrixFilters: (MatrixFilters:any) => dispatch(changeMatrixFilters(MatrixFilters))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Matrix);\r\n","\r\nimport './Matrix.css'\r\nimport * as React from \"react\";\r\nimport { timeSaturday } from 'd3';\r\nconst d3 = require(\"d3\");\r\n\r\nexport interface IProps {\r\n  feature_matrix_json : any,\r\n  layout_config:any,\r\n  id:number,\r\n  MatrixFilters:any,\r\n  changeMatrixFilters:any\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class BrushBarChart extends React.Component<IProps, IState>{\r\n    private TAB : string= \"BrushBarChart_\";\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.updateMatrixFilters = this.updateMatrixFilters.bind(this);\r\n        this.state = {\r\n\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n        this.renderD3();\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n         //console.log('Component did update!')\r\n         if(prevProps.feature_matrix_json.name !== this.props.feature_matrix_json.name){\r\n          d3.selectAll(\"#\"+this.TAB+this.props.id).remove();\r\n          this.renderD3();\r\n      }\r\n\r\n\r\n        \r\n     }\r\n   public updateMatrixFilters(filters:any){\r\n     let matrixfilters = Object.assign({}, this.props.MatrixFilters);\r\n     matrixfilters[\"refreshnumber\"] = matrixfilters[\"refreshnumber\"] + 1;\r\n     matrixfilters[\"index\"] = filters[\"index\"];\r\n     this.props.changeMatrixFilters(matrixfilters);\r\n   }\r\n    public renderD3(){\r\n      let fdata:any = this.props.feature_matrix_json.selectedFeatureStatistics;\r\n      let layout_config = this.props.layout_config;\r\n      const svg = d3.select(\"#chart_\"+this.props.id).append(\"g\").attr(\"id\", this.TAB+this.props.id)\r\n        .attr(\"width\",layout_config.width)\r\n        .attr(\"height\",layout_config.height)\r\n        .attr(\"transform\", \"translate(\" + layout_config.x + \",\" + layout_config.y + \")\"),\r\n        margin = { top: 20, right: 30, bottom: 0, left: 0 },\r\n        width = +layout_config.width- margin.left - margin.right,\r\n        height = +layout_config.height - margin.top - margin.bottom;\r\n      let max_row_num_block = this.props.layout_config.max_row_num_block;\r\n      const x = d3.scaleBand().range([0, width]).padding(0.1),\r\n        x2 = d3.scaleBand().range([0, width]).padding(0.1),\r\n        y = d3.scaleLinear().range([height, 0]),\r\n        y2 = d3.scaleLinear().range([height, 0]);\r\n            \r\n      let brush:any, zoom:any, ref_data:any, data:any, nbFt:any, mean_value:any;\r\n      let  context:any;\r\n      let current_range:any;\r\n        ref_data = fdata.map((ft:any,index:any)=>{\r\n          return {\r\n            \"id\": index,\r\n            \"ratio\": ft\r\n          }\r\n        })\r\n      data = [].concat(ref_data);\r\n\r\n      nbFt = data.length;\r\n\r\n      //let updateMatrixFilters = this.updateMatrixFilters;\r\n      var updateMatrixFilters = this.updateMatrixFilters;\r\n      function brushed(this:any){\r\n        if (d3.event.sourceEvent && d3.event.sourceEvent.type === \"zoom\") return; // ignore brush-by-zoom\r\n        var s = d3.event.selection || x2.range();\r\n        current_range = [Math.round(s[0] / (width/nbFt)), Math.round(s[1] / (width/nbFt))];\r\n        x.domain(data.slice(current_range[0], current_range[1]).map((ft:any) => ft.id));\r\n        if(current_range[1]-current_range[0]>=max_row_num_block+1){\r\n          current_range[1] = current_range[0] + max_row_num_block;\r\n          d3.select(this).call(brush.move, current_range.map((d:any)=>{\r\n            return d*width/nbFt;\r\n          }))\r\n        }else{\r\n          updateContext(current_range[0], current_range[1]);\r\n        \r\n          updateMatrixFilters({\r\n            \"index\":[current_range[0], current_range[1]]\r\n          })\r\n        }\r\n        \r\n        \r\n        //console.log(\"change range\", current_range[0], current_range[1]);\r\n      }\r\n      brush = d3.brushX()\r\n          .extent([[0, 0], [width, height]])\r\n          .on(\"brush end\", brushed);\r\n    \r\n      \r\n    \r\n      /*svg.append(\"defs\").append(\"clipPath\")\r\n          .attr(\"id\", \"clip\")\r\n          .append(\"rect\")\r\n          .attr(\"width\", width)\r\n          .attr(\"height\", height);*/\r\n      context = svg.append(\"g\")\r\n          .attr(\"class\", \"context\")\r\n          .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n        x.domain(data.map((ft:any) => ft.id));\r\n        y.domain([0, d3.max(data, (d:any) => d.ratio)]);\r\n        x2.domain(x.domain());\r\n        y2.domain(y.domain());\r\n    \r\n      updateMiniBars();\r\n    \r\n      context.append(\"g\")\r\n          .attr(\"class\", \"brush\")\r\n          .call(brush)\r\n          .call(brush.move, x2.range());\r\n      \r\n     \r\n      function updateMiniBars(){\r\n          let mini_bars = context.selectAll(\".bar\")\r\n              .data(data);\r\n        \r\n          mini_bars\r\n              .attr(\"x\", (d:any) => x2(d.id))\r\n              .attr(\"width\", x2.bandwidth())\r\n              .attr(\"y\", (d:any) => y2(d.ratio))\r\n              .attr(\"height\", (d:any) => height - y2(d.ratio))\r\n              .style('fill', (d:any) =>  'steelblue');\r\n        \r\n          mini_bars\r\n              .enter()\r\n              .insert(\"rect\")\r\n              .attr(\"class\", \"bar\")\r\n              .attr(\"x\", (d:any) => x2(d.id))\r\n              .attr(\"width\", x2.bandwidth())\r\n              .attr(\"y\", (d:any) => y2(d.ratio))\r\n              .attr(\"height\", (d:any) => height - y2(d.ratio))\r\n              .style('fill', (d:any) =>  'steelblue' );\r\n          mini_bars.exit().remove();\r\n        \r\n      }\r\n      \r\n      \r\n      \r\n      function updateContext(min:any, max:any) {\r\n        context.selectAll(\".bar\")\r\n            .style('fill-opacity', (_:any, i:any) => i >= min && i < max ? '1' : '0.3');\r\n      }\r\n      \r\n      \r\n       \r\n    }\r\n    public render() {\r\n        return (\r\n            <g id={\"chart_\"+this.props.id} />\r\n            \r\n        )\r\n\r\n    }\r\n}\r\n\r\n","import BrushBarChart from '../components/DataRuns/FeatureMatrixView/BrushBarChart';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeMatrixFilters} from '../actions';\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    MatrixFilters: state.matrixFilters\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeMatrixFilters: (MatrixFilters:any) => dispatch(changeMatrixFilters(MatrixFilters))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BrushBarChart);\r\n","\r\nimport './IndentedTree.css'\r\nimport * as React from \"react\";\r\nimport { timeSaturday } from 'd3';\r\nconst d3 = require(\"d3\");\r\nconst tree = d3.tree;\r\nconst hierarchy = d3.hierarchy;\r\nconst select = d3.select;\r\n\r\nexport interface IProps {\r\n  feature_matrix_json : any,\r\n  layout_config:any,\r\n  MatrixRowFilters:any,\r\n  changeMatrixRowFilters:any,\r\n  id:number\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class BrushBarChart extends React.Component<IProps, IState>{\r\n    private TAB : string= \"IndentedTree_\";\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.updateMatrixFilters = this.updateMatrixFilters.bind(this);\r\n        this.state = {\r\n\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n        this.renderD3();\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n         //console.log('Component did update!')\r\n         if(prevProps.feature_matrix_json.name !== this.props.feature_matrix_json.name ){\r\n          d3.selectAll(\"#IndentedTree\").remove();\r\n          this.renderD3();\r\n      }\r\n\r\n\r\n        \r\n     }\r\n     public updateMatrixFilters(filters:any){\r\n      let matrixfilters = Object.assign({}, this.props.MatrixRowFilters);\r\n      matrixfilters[\"refreshnumber\"] = matrixfilters[\"refreshnumber\"] + 1;\r\n      matrixfilters[\"row_index\"] = filters;\r\n      this.props.changeMatrixRowFilters(matrixfilters);\r\n    }\r\n    public renderD3(){\r\n\r\n      //let tree = d3.tree;\r\n      //let hierarchy = d3.hierarchy;\r\n      //let select = d3.select;\r\n      let fdata:any = this.props.feature_matrix_json.indentedTree;\r\n      \r\n      //console.log(\"Indented Tree\", fdata);\r\n          \r\n      let myTree = new MyTree(fdata,this.props.layout_config,this.updateMatrixFilters);\r\n       \r\n    }\r\n    public render() {\r\n        return (\r\n                <g id=\"hierarchy-container\"> \r\n                </g>\r\n            \r\n        )\r\n\r\n    }\r\n}\r\n\r\nclass MyTree {\r\n  public margin:{left:number, right:number, top:number, bottom:number};  \r\n  public width:number;\r\n  public height:number;\r\n  public barHeight:number;\r\n  public barWidth:number;\r\n  public i:number;\r\n  public duration:number;\r\n  public tree:any;\r\n  public root:any;\r\n  public svg:any;\r\n  public updateMatrixFilters:any;\r\n  constructor(data:any,layout_config:any, updateMatrixFilters:any) {\r\n    this.margin = {top: 10, right: 10, bottom: 20, left: 10};\r\n    this.width = layout_config.width - this.margin.right - this.margin.left;\r\n    this.height = layout_config.width - this.margin.top - this.margin.bottom;\r\n    this.barHeight = layout_config.barHeight;\r\n    this.barWidth = this.width *.8;\r\n    this.i = 0;\r\n    this.duration = 0;\r\n    this.tree = tree().size([this.width, this.height]);\r\n    this.updateMatrixFilters = updateMatrixFilters;\r\n    // this.tree = tree().nodeSize([0, 30]);\r\n\r\n    this.tree = tree().nodeSize([0, 30]); \r\n    this.root = this.tree(hierarchy(data));\r\n    this.root.each((d:any)=> {\r\n      d.name = d.id; //transferring name to a name variable\r\n      d.id = this.i; //Assigning numerical Ids\r\n      this.i++;\r\n    });\r\n    this.root.x0 = this.root.x;\r\n    this.root.y0 = this.root.y\r\n    this.svg = select('#hierarchy-container')\r\n      .attr('width', this.width + this.margin.right + this.margin.left)\r\n      .attr('height', this.height + this.margin.top + this.margin.bottom)\r\n      .attr('transform', 'translate(' + layout_config.x + ',' + layout_config.y + ')')\r\n      .append('g')\r\n      .attr(\"id\",\"IndentedTree\")\r\n      .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')');\r\n\r\n    // this.root.children.forEach(this.collapse);\r\n    this.update(this.root);\r\n  }\r\n  \r\n  \r\n  $onInit() {\r\n    \r\n  }\r\n  \r\n  connector = function(d:any) {\r\n   //curved \r\n   //return \"M\" + d.y + \",\" + d.x +\r\n   //   \"C\" + (d.y + d.parent.y) / 2 + \",\" + d.x +\r\n   //   \" \" + (d.y + d.parent.y) / 2 + \",\" + d.parent.x +\r\n   //   \" \" + d.parent.y + \",\" + d.parent.x;\r\n    //straight\r\n    return \"M\" + d.parent.y + \",\" + d.parent.x\r\n      + \"V\" + d.x + \"H\" + d.y;      \r\n  }\r\n  \r\n  collapse = (d:any) => {\r\n    if (d.children) {\r\n      d._children = d.children;\r\n      d._children.forEach(this.collapse);\r\n      d.children = null;\r\n    }\r\n  };\r\n\r\n  click = (d:any) => {\r\n    if (d.children) {\r\n      d._children = d.children;\r\n      d.children = null;\r\n    } else {\r\n      d.children = d._children;\r\n      d._children = null;\r\n    }\r\n   //console.log(\"click\", this.root);\r\n    this.update(d);\r\n  };\r\n  getRowIdList = (nodesSort:any) =>{\r\n    return nodesSort.map((d:any)=>{\r\n      return d.data.row_id;\r\n    })\r\n  }\r\n  increI = ()=>{\r\n    this.i = this.i + 1;\r\n    return this.i;\r\n  }\r\n  update = (source:any) => {\r\n\r\n    this.width=800;\r\n\r\n    // Compute the new tree layout.\r\n    let nodes = this.tree(this.root)\r\n    let radius = Math.min(5,this.barHeight/4);\r\n    let radius_gap = 0.3;\r\n    let nodesSort:any= [];\r\n    nodes.eachBefore(function (n:any) {\r\n      nodesSort.push(n);\r\n    });\r\n    this.updateMatrixFilters(this.getRowIdList(nodesSort));\r\n    //console.log(\"nodes\",this.getRowIdList(nodesSort));\r\n    this.height = Math.max(500, nodesSort.length * this.barHeight + this.margin.top + this.margin.bottom);\r\n    let links = nodesSort.slice(1);\r\n    // Compute the \"layout\".\r\n    nodesSort.forEach ((n:any,i:any)=> {\r\n      n.x = i *this.barHeight;\r\n    });\r\n\r\n    //d3.select('svg').transition()\r\n      //.duration(this.duration)\r\n      //.attr(\"height\", this.height);\r\n    \r\n    // Update the nodes…\r\n    let increI = this.increI;\r\n    let node = this.svg.selectAll('g.node')\r\n    .data(nodesSort, function (d: any) {\r\n      return d.id || (d.id = increI());\r\n    });\r\n\r\n    // Enter any new nodes at the parent's previous position.\r\n    var nodeEnter = node.enter().append('g')\r\n    .attr('class', 'node')\r\n    .attr('transform', function () {\r\n      return 'translate(' + source.y0 + ',' + source.x0 + ')';\r\n    })\r\n    .on('click', this.click);\r\n\r\n    /*nodeEnter.append('circle')\r\n      .attr('r', 1e-6)\r\n      .style('fill', function (d: any) {\r\n      return d._children ? 'lightsteelblue' : '#fff';\r\n    });*/\r\n    var arc_data = [{\r\n        \"index\":0,\r\n        \"value\":1/3\r\n    }, {\r\n        \"index\":1,\r\n        \"value\":1/3\r\n    }, {\r\n        \"index\":2,\r\n        \"value\":1/3\r\n    }];\r\n    var ori_arcs = d3.pie()\r\n    .startAngle((-60/180) * Math.PI)\r\n    .endAngle((2-60/180) * Math.PI)\r\n    .value(function(a:any){\r\n        return a.value;\r\n    })\r\n    .sort(function(a:any, b:any) {\r\n        return a.index<b.index;\r\n    });\r\n    var arcs = ori_arcs(arc_data);\r\n      function getArc(radius:number){\r\n        return d3.arc()\r\n        .innerRadius(radius)\r\n        .outerRadius(radius*2);\r\n    }\r\n    var outer_circles_enter = nodeEnter.append(\"circle\").attr(\"class\",\"outer_circle\")\r\n                .attr(\"r\", function(d:any){\r\n                    return radius*2;\r\n                })\r\n               .attr(\"fill\", function(d:any) { return d.data.color[4]; });\r\n    \r\n    let overall_background = [];\r\n    for (let i = 0; i < 3; i++){\r\n        let background_enter = nodeEnter\r\n        .append(\"path\")\r\n        .attr(\"class\",\"arc_\"+i)\r\n        .style(\"fill\", function(d:any){\r\n            return d.data.color[i+1]\r\n        })\r\n        .attr(\"d\", function(d:any){\r\n            return getArc(radius)(arcs[i])\r\n        });\r\n        overall_background.push(background_enter);\r\n\r\n    }\r\n    \r\n    \r\n    var inner_circles_enter = nodeEnter.append(\"circle\").attr(\"class\",\"inner_circle\")\r\n                .attr(\"r\", function(d:any){\r\n                    return radius - radius_gap;\r\n                })\r\n                .attr(\"fill\", function(d:any) { return d.data.color[0]; });\r\n    let x_offset = radius * 2 + radius_gap*2;\r\n    let rect_width = 30 - x_offset;\r\n    let rect_height = this.barHeight * 1/2;\r\n    /*let edge_weight_rect =  nodeEnter.append(\"rect\")\r\n    .attr(\"x\", function(d:any){return -rect_width*d.data.edge_weight - x_offset;} )\r\n    .attr(\"y\", -0.5*rect_height)\r\n    .attr(\"width\", function(d:any){return d.data.edge_weight*rect_width;})\r\n    .attr(\"height\", rect_height)\r\n    .style(\"fill\", \"#1f77b4\")\r\n    */\r\n    nodeEnter.append('text')\r\n      .attr('x', function (d: any) {\r\n      return d.children || d._children ? 10 : 10;\r\n    })\r\n      .attr('dy', '.35em')\r\n      .attr('text-anchor', function (d: any) {\r\n      return d.children || d._children ? 'start' : 'start';\r\n    })\r\n      .text(function (d: any) {\r\n      if (d.data.name.length > 20) {\r\n        return d.data.name.substring(0, 20) + '...';\r\n      } else {\r\n        return d.data.name;\r\n      }\r\n    })\r\n      .style('fill-opacity', 1e-6);\r\n    \r\n    nodeEnter.append('svg:title').text(function (d: any) {\r\n      return d.data.name;\r\n    });\r\n\r\n    // Transition nodes to their new position.\r\n    let nodeUpdate = node.merge(nodeEnter)\r\n      //.transition()\r\n      //.duration(this.duration);\r\n    \r\n    nodeUpdate\r\n        .attr('transform', function (d: any) {\r\n        return 'translate(' + d.y + ',' + d.x + ')';\r\n      });\r\n\r\n    /*nodeUpdate.select('circle')\r\n      .attr('r', 4.5)\r\n      .style('fill', function (d: any) {\r\n      return d._children ? 'lightsteelblue' : '#fff';\r\n    });*/\r\n    \r\n    nodeUpdate.select('text')\r\n      .style('fill-opacity', 1);\r\n\r\n    // Transition exiting nodes to the parent's new position (and remove the nodes)\r\n    var nodeExit = node.exit()//.transition()\r\n    //.duration(this.duration);\r\n    \r\n    nodeExit\r\n    /*.attr('transform', function (d:any) {\r\n      return 'translate(' + source.y + ',' + source.x + ')';\r\n    })*/\r\n    .remove();\r\n\r\n    /*nodeExit.select('circle')\r\n      .attr('r', 1e-6);\r\n\r\n    nodeExit.select('text')\r\n      .style('fill-opacity', 1e-6);\r\n    */   \r\n    // Update the links…\r\n    var link = this.svg.selectAll('path.link')\r\n    .data(links, function (d: any) {\r\n      // return d.target.id;\r\n      var id = d.id + '->' + d.parent.id;\r\n      return id;\r\n    }\r\n         );\r\n\r\n    // Enter any new links at the parent's previous position.\r\n    let linkEnter = link.enter().insert('path', 'g')\r\n    .attr('class', 'link')\r\n    /*.attr('d', (d:any) => {\r\n      var o = {x: source.x0, y: source.y0, parent: {x: source.x0, y: source.y0}};\r\n      return this.connector(o);\r\n    });*/\r\n    \r\n    // Transition links to their new position.\r\n    link.merge(linkEnter)//.transition()\r\n      //.duration(this.duration)\r\n      .attr('d', this.connector);\r\n\r\n\r\n    // // Transition exiting nodes to the parent's new position.\r\n    link.exit()//.transition()\r\n      //.duration(this.duration)\r\n      /*.attr('d', (d: any) => {\r\n      var o = {x: source.x, y: source.y, parent: {x: source.x, y: source.y}};\r\n      return this.connector(o);\r\n    })*/\r\n      .remove();\r\n\r\n    // Stash the old positions for transition.\r\n    nodesSort.forEach(function (d: any) {\r\n      d.x0 = d.x;\r\n      d.y0 = d.y;\r\n    });\r\n    \r\n  }\r\n};\r\n","import IndentedTree from '../components/DataRuns/FeatureMatrixView/IndentedTree';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeMatrixRowFilters} from '../actions';\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    MatrixRowFilters: state.matrixRowFilters\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeMatrixRowFilters: (MatrixRowFilters:any) => dispatch(changeMatrixRowFilters(MatrixRowFilters))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IndentedTree);\r\n","import FeatureMatrixView from './FeatureMatrixView'\r\nexport default FeatureMatrixView;\r\n\r\n\r\n","\r\nimport * as React from \"react\";\r\n//import Matrix from \"./Matrix\";\r\n//import BrushBarChart from \"./BrushBarChart\";\r\nimport MatrixContainer from '../../../container/MatrixContainer';\r\nimport BrushBarChartContainer from '../../../container/BrushBarChartContainer';\r\nimport IndentedTreeContainer from '../../../container/IndentedTreeContainer';\r\n//import IndentedTree from \"./IndentedTree\";\r\n//import WordCloud from \"./WordCloud\";\r\n//import PathGraph from \"./PathGraph\";\r\n//import RadialTree from \"./RadialTree\";\r\nimport { Select, Switch } from 'antd';\r\nimport {getCoraNodeColor, getLayoutMode, constructPathDict,getTrainColor} from '../../../helper';\r\n//import { select } from \"d3\";\r\n//import { changeShowSource } from \"../../../actions\";\r\nconst Option = Select.Option;\r\n//const d3 = require(\"d3\");\r\nexport interface IProps {\r\n    graph_object:any,\r\n    show_mode:number, \r\n    explained_node:number, \r\n    onExplainNodeChange:any, \r\n    onShowModeChange:any,\r\n    model:number,\r\n    modelList:any[],\r\n    width:number,\r\n    height:number,\r\n    specificNodeIdList: any[],\r\n    select_inspect_node:number,\r\n    showSource : boolean,\r\n    extendedMode: any\r\n\r\n}\r\nexport interface IState {\r\n    axis_select : number,\r\n    distance_select : number,\r\n    dataSource_select: number,\r\n    color_encode: number,\r\n    enableSorting: boolean\r\n}\r\n\r\nexport default class FeatureMatrixView extends React.Component<IProps, IState>{\r\n\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.onAxisChange = this.onAxisChange.bind(this);\r\n        this.onDistanceChange = this.onDistanceChange.bind(this);\r\n        this.onDataSourceChange = this.onDataSourceChange.bind(this);\r\n        this.onColorEncodeChange = this.onColorEncodeChange.bind(this);\r\n        this.onEnableSort = this.onEnableSort.bind(this);\r\n        this.state = {\r\n            axis_select : 2,\r\n            distance_select: 1,\r\n            dataSource_select : 1,\r\n            color_encode: 2,\r\n            enableSorting: true\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n\r\n        \r\n     }\r\n     public constructFeatureMatrixJson(graph_object:any, selectedNodeIdList:any[], axis_select:number, \r\n        distance_select:number, dataSource_select:number, color_encode:number, select_inspect_node:number, \r\n        showSource:boolean, enableSorting:boolean, width:number, height:number, extendedMode:any){\r\n\r\n        // axis_select : 2, Y Axis\r\n        // distance_select: 1, Detailed Feature\r\n        // dataSource_select : 1, Input Layer\r\n        // color_encode: 2, Ground Truth\r\n        /**\r\n         * let dataSourceOptions = [\r\n                [1, \"Input Layer\"],\r\n                [2, \"Hidden Layer\"],\r\n                [3, \"Output Layer\"]\r\n            ];\r\n            let distanceOptions = [\r\n                [1, \"Detailed Feature\"],\r\n                [2, \"Distance\"]\r\n            ];\r\n\r\n            let axisOptions = [\r\n                [1, \"X Axis\"],\r\n                [2, \"Y Axis\"]\r\n            ];\r\n            let colorOptions = [\r\n                [2, \"Ground Truth\"],\r\n                [3, \"Model Output\"],\r\n                [5, \"True / False\"]\r\n            ]\r\n         */\r\n        let selectedStr = selectedNodeIdList.join(\"_\");\r\n        let common = graph_object;\r\n        let individual = graph_object;\r\n        let graph_name; \r\n        let layout_mode = getLayoutMode();\r\n        if(layout_mode === 3){\r\n            common = graph_object.common;\r\n            individual = graph_object.individual;\r\n            //graph_name = common.name+\"_\"+common.dataset_id+\"_\"+(show_mode)+\"_\"+common.data_type_id+\"_SELECTED_\"+selectStr+\"_SELECTEDEND_\"+enableForceDirected+\"_\"+width+\"_\"+height+\"_\"+embedding_layout_select+\"_\";\r\n            graph_name = common.name+\"_\"+common.dataset_id+\"_\"+common.data_type_id+\"_SELECTED_\"+selectedStr+\"_SELECTED_END_\"\r\n            +axis_select+\"_\"+distance_select+\"_\"+dataSource_select+\"_\"+color_encode+\"_\"+select_inspect_node+\"_\"+enableSorting+\"_\"+width+\"_\"+height;\r\n            if(showSource){\r\n                graph_name = graph_name+\"_\"+extendedMode;\r\n            }\r\n        }else{\r\n            graph_name = graph_object.name+\"_\"+graph_object.dataset_id+\"_\"+(graph_object.model)\r\n            +\"_\"+graph_object.explain_id \r\n            +\"_\"+(graph_object.graph)+\"_\"+graph_object.data_type_id+\"_SELECTED_\"+selectedStr+\"_SELECTED_END_\"\r\n            +axis_select+\"_\"+distance_select+\"_\"+dataSource_select+\"_\"+color_encode;\r\n        }\r\n\r\n        \r\n        \r\n        let graph_in = common.graph_in;\r\n        let graph_target = common.graph_target;\r\n        let graph_out = individual.GCN.graph_out; // \r\n        let graph_explaination = common.graph_explaination;\r\n        let explaination_type = graph_explaination.type;\r\n        if(explaination_type !== \"MessagePassing\"){\r\n            console.log(\"Unsupported explaination type , \", explaination_type);\r\n            return {\"success\": false};\r\n        }\r\n        if(selectedNodeIdList.length === 0){\r\n            return {\"success\":false};\r\n\r\n        }\r\n        let model_state:any = individual.GCN.model_state_dict;\r\n        let message_passing: any = individual.GCN.message_passing;\r\n        let PathDict = constructPathDict(message_passing);\r\n        let train_mask_set = new Set(common.mask.train);\r\n        function getNodeColorInfo(index:number){\r\n            let ground_truth_label = graph_target.node_features[index];\r\n            //let label = ground_truth_label;\r\n            let GCN_prediction_label = individual.GCN.graph_out.node_features[index];   //\r\n            let MLP_prediction_label = individual.MLP.graph_out.node_features[index]; \r\n            let GCN_Identity_features_prediction_label = individual.GCN_Identity_features.graph_out.node_features[index]; \r\n            // Ground Truth Color / Prediction Color\r\n            let color:any = [getCoraNodeColor(ground_truth_label, 2), \r\n                getCoraNodeColor(GCN_prediction_label,3),\r\n                getCoraNodeColor(MLP_prediction_label,3),\r\n                getCoraNodeColor(GCN_Identity_features_prediction_label,3),\r\n                getTrainColor(index, train_mask_set)\r\n            ];    //\r\n            return color;\r\n        }\r\n        function constructIndentedTree(PathDict:any, select_node:number, level:number, max_level:number, row_id:number, edge_weight:number=0){\r\n            if(level >= max_level){\r\n                return {\r\n                    \"name\":\"\"+select_node,\r\n                    \"children\":[],\r\n                    \"row_id\":row_id,\r\n                    \"next_row_id\":row_id+1,\r\n                    \"edge_weight\":edge_weight,\r\n                    \"color\":getNodeColorInfo(select_node)\r\n                }\r\n            }else{\r\n                let succnodes = Object.keys(PathDict[select_node]);\r\n                let children:any = [];\r\n                let curr_row_id = row_id;\r\n                let next_row_id:number = row_id+1;\r\n                for(let k = 0; k< succnodes.length; k ++ ){\r\n                    let succnode = parseInt(succnodes[k]);\r\n                    let local_edge_weight = PathDict[select_node][succnode];\r\n                    let children_package:any = constructIndentedTree(PathDict, succnode, level+1, max_level, next_row_id, local_edge_weight);\r\n                    next_row_id = children_package.next_row_id;\r\n                    children.push(children_package);\r\n                }\r\n                return {\r\n                    \"name\":\"\"+select_node,\r\n                    \"children\":children,\r\n                    \"row_id\":curr_row_id,\r\n                    \"next_row_id\":next_row_id,\r\n                    \"edge_weight\":edge_weight,\r\n                    \"color\":getNodeColorInfo(select_node)\r\n                }\r\n            }\r\n        }\r\n        function sequentialIndentedTree(indentedTreeNode:any){\r\n            let selectedIndetendedTreeId:any[] = [];\r\n            selectedIndetendedTreeId.push(parseInt(indentedTreeNode[\"name\"]));\r\n            for(let i = 0; i<indentedTreeNode.children.length; i++){\r\n                selectedIndetendedTreeId = selectedIndetendedTreeId.concat(sequentialIndentedTree(indentedTreeNode.children[i]));\r\n            }\r\n            return selectedIndetendedTreeId;\r\n        }\r\n        \r\n        let indentedTree:any = {}\r\n        let selectedIndetendedTreeId:any[] = [];\r\n        if(showSource){\r\n            indentedTree = constructIndentedTree(PathDict, select_inspect_node, 0, extendedMode-1, 0);\r\n            selectedIndetendedTreeId = sequentialIndentedTree(indentedTree);\r\n            //console.log(\"Selected Indented Tree Id\", selectedIndetendedTreeId);\r\n            selectedNodeIdList = selectedIndetendedTreeId;\r\n\r\n        }\r\n\r\n\r\n        let features : any;\r\n        let features_value:any = [];\r\n        let selected_model_weight : any[] = [];\r\n        let selected_model_bias : any[] = [];\r\n        if(dataSource_select === 1){\r\n            features = graph_in.feature;\r\n            features_value = graph_in.feature_value;\r\n            //selected_model_weight = model_state[\"gc1.weight\"];\r\n            //selected_model_bias = model_state[\"gc1.bias\"];\r\n        }else if(dataSource_select === 2){\r\n            features = graph_out.hidden_vector;\r\n            //selected_model_weight = model_state[\"gc2.weight\"];\r\n            //selected_model_bias = model_state[\"gc2.bias\"];\r\n        }else if(dataSource_select === 3){\r\n            features = graph_out.output_vector\r\n        }\r\n        let matrix:any[] = [];\r\n        let selectedFeature:any[] = [];\r\n        let selectedFeatureStatistics:any[] = [];\r\n        let distance_mode = distance_select;\r\n        \r\n\r\n        function calculateFeatureDistance(feature1:any, feature2:any){\r\n            let len1 = feature1.length;\r\n            let len2 = feature2.length;\r\n            let common = 0;\r\n            for(let k = 0; k<len1; k++){\r\n                if(feature2.indexOf(feature1[k])>=0){\r\n                    common = common + 1;\r\n                }\r\n            }\r\n            return len1 + len2 - 2* common;\r\n        }\r\n        function calculateEuclideanDistance(feature1:any, feature2:any){\r\n            let len1 = feature1.length;\r\n            //let len2 = feature2.length;\r\n            let dis = 0;\r\n            for(let i = 0; i < len1; i++)\r\n            {\r\n                dis = dis + (feature1[i] - feature2[i]) * (feature1[i] - feature2[i]);\r\n            }\r\n            dis = Math.sqrt(dis);\r\n            return dis;\r\n        }\r\n        let filter_matrix: any[] = [];\r\n        let filter_feature_axis : any[] = [];\r\n        let selectedFilterIdList  : any[] = [];\r\n\r\n\r\n        \r\n\r\n        //let selectNodeList:any[] = [];\r\n        //console.log(\"Feature Matrix Json:\", features, selectedNodeIdList);\r\n        //\r\n        let upper_bound_nodes = 1000;\r\n        if(selectedNodeIdList.length > 0 && selectedNodeIdList.length <= upper_bound_nodes){\r\n            \r\n            if(distance_mode === 2){\r\n                // Calculate distance\r\n                for(let i = 0; i <selectedNodeIdList.length ; i++){\r\n                    let currentSelect:any = selectedNodeIdList[i];\r\n                    //y_axis.push(currentSelect);\r\n                    for(let j = 0;j <selectedNodeIdList.length;j ++){\r\n                        let otherSelect:any = selectedNodeIdList[j];\r\n                        let feature1 = features[currentSelect];\r\n                        let feature2 = features[otherSelect];\r\n                        let distance :any ;\r\n                        if(dataSource_select === 1){\r\n                            distance = calculateFeatureDistance(feature1, feature2);\r\n\r\n                        }else{\r\n                            distance = calculateEuclideanDistance(feature1, feature2);\r\n                        }\r\n                        console.log(\"Distance\", distance);\r\n                        let value_package:any;\r\n                        value_package = {\r\n                            \"x\": i,\r\n                            \"y\": j,\r\n                            \"value\": distance\r\n                        }\r\n                        matrix.push(value_package);\r\n                    }\r\n    \r\n                }\r\n                \r\n                \r\n            }else{\r\n                if(dataSource_select === 1){\r\n                    // Input Layer Embedding\r\n                    let pre_selected_feature:any[] = [];\r\n                    let pre_selected_feature_stats:any[] = [];\r\n                    for(let i = 0; i <selectedNodeIdList.length ; i++){\r\n                        let currentSelect:any = selectedNodeIdList[i];\r\n                        //y_axis.push(currentSelect);\r\n                        for(let j = 0;j <features[currentSelect].length;j ++){\r\n                            let dimension = features[currentSelect][j];\r\n                            if(pre_selected_feature.indexOf(dimension) >= 0){\r\n        \r\n                            }else{\r\n                                pre_selected_feature.push(dimension);\r\n                                pre_selected_feature_stats.push(0);\r\n                            }\r\n                            let feature_index = pre_selected_feature.indexOf(dimension);\r\n                            pre_selected_feature_stats[feature_index] = pre_selected_feature_stats[feature_index] + 1;\r\n                        }\r\n                    }\r\n                    //let enableSorting = 1;\r\n                    if(enableSorting){\r\n                        let sort_selected_feature_stats = pre_selected_feature_stats.map((d:any,i:any)=>{\r\n                            return {\r\n                                \"index\":pre_selected_feature[i],\r\n                                \"value\":d\r\n                            }\r\n                        })\r\n                        sort_selected_feature_stats.sort((a:any,b:any)=>{\r\n                            return a.value > b.value ? -1: 1;\r\n                        })\r\n                        pre_selected_feature = sort_selected_feature_stats.map((d:any)=>{\r\n                            return d.index;\r\n                        })\r\n                        pre_selected_feature_stats = sort_selected_feature_stats.map((d:any)=>{\r\n                            return d.value;\r\n                        })\r\n                    }\r\n                    selectedFeature = pre_selected_feature;\r\n                    selectedFeatureStatistics = pre_selected_feature_stats;\r\n                    for(let i = 0; i <selectedNodeIdList.length ; i++){\r\n                        let currentSelect:any = selectedNodeIdList[i];\r\n                        //y_axis.push(currentSelect);\r\n                        for(let j = 0;j <features[currentSelect].length;j ++){\r\n                            let dimension = features[currentSelect][j];\r\n                            //if(selectedFeature.indexOf(dimension) >= 0){\r\n        \r\n                            //}else{\r\n                            //    selectedFeature.push(dimension);\r\n                            //    selectedFeatureStatistics.push(0);\r\n                            //}\r\n                            let feature_index = selectedFeature.indexOf(dimension);\r\n                            //selectedFeatureStatistics[feature_index] = selectedFeatureStatistics[feature_index] + 1;\r\n                            let currentNodeIndex = i;\r\n                            let value = features_value[currentSelect][j];\r\n                            let value_package:any;\r\n                            if(axis_select === 1){\r\n                                // nodes in x axis\r\n                                value_package = {\r\n                                    \"x\": currentNodeIndex,\r\n                                    \"y\": feature_index,\r\n                                    \"value\": value\r\n                                }\r\n                            }else{\r\n                                value_package = {\r\n                                    \"x\": feature_index,\r\n                                    \"y\": currentNodeIndex,\r\n                                    \"value\": value\r\n                                }\r\n                            }\r\n                            \r\n                            matrix.push(value_package);\r\n                        }\r\n        \r\n                    }\r\n                    \r\n                    \r\n                }else{\r\n                    for(let i = 0; i <selectedNodeIdList.length ; i++){\r\n                        let currentSelect:any = selectedNodeIdList[i];\r\n                        //y_axis.push(currentSelect);\r\n                        for(let j = 0;j <features[currentSelect].length;j ++){\r\n                            let dimension = j;\r\n                            if(selectedFeature.indexOf(dimension) >= 0){\r\n                                \r\n                            }else{\r\n                                selectedFeature.push(dimension);\r\n                                \r\n                            }\r\n                            let feature_index = j;\r\n                            let currentNodeIndex = i;\r\n                            let value_package:any;\r\n                            let feature_value = features[currentSelect][j];\r\n                            if(axis_select === 1){\r\n                                // nodes in x axis\r\n                                value_package = {\r\n                                    \"x\": currentNodeIndex,\r\n                                    \"y\": feature_index,\r\n                                    \"value\": feature_value\r\n                                }\r\n                            }else{\r\n                                value_package = {\r\n                                    \"x\": feature_index,\r\n                                    \"y\": currentNodeIndex,\r\n                                    \"value\": feature_value\r\n                                }\r\n                            }\r\n                            \r\n                            matrix.push(value_package);\r\n                        }\r\n        \r\n                    }\r\n                }\r\n\r\n                // Filter Weight\r\n                if(selected_model_weight.length > 0 && selected_model_bias.length > 0){\r\n                    filter_feature_axis = selectedFeature.slice();\r\n                    filter_feature_axis.push(\"Bias\");\r\n                    for(let j = 0; j< selected_model_weight[0].length; j++){\r\n                        selectedFilterIdList.push(j);\r\n                        for(let i = 0; i<filter_feature_axis.length; i++){\r\n                            let currentFilterIndex = j;\r\n                            let currentFeatureIndex = i;\r\n                            let value : any;\r\n                            if(currentFeatureIndex<filter_feature_axis.length - 1){\r\n                                value = selected_model_weight[i][j];\r\n                            }else{\r\n                                value = selected_model_bias[j];\r\n                            }\r\n                            \r\n                            let value_package:any;\r\n                            if(axis_select === 1){\r\n                                // filters in x axis\r\n                                value_package = {\r\n                                    \"x\": currentFilterIndex,\r\n                                    \"y\": currentFeatureIndex,\r\n                                    \"value\": value\r\n                                }\r\n                            }else{\r\n                                value_package = {\r\n                                    \"x\": currentFeatureIndex,\r\n                                    \"y\": currentFilterIndex,\r\n                                    \"value\": value\r\n                                }\r\n                            }\r\n                            \r\n                            filter_matrix.push(value_package);\r\n                        }\r\n                    \r\n                        \r\n                    }\r\n                }\r\n                \r\n            }\r\n            \r\n        }else{\r\n            return {\"success\": false}\r\n        }\r\n        //if(selectedFeature.length > 500){\r\n        //    return {\"success\": false};\r\n         //}\r\n         //console.log(\"Radial Data PathDict\", PathDict)\r\n        /* function getColor(node_id:number){\r\n            let label = graph_target.node_features[node_id];\r\n            if(color_encode === 2){\r\n                label = graph_target.node_features[node_id];\r\n            }else if(color_encode === 3){\r\n                label = graph_out.node_features[node_id];\r\n            }else if(color_encode === 5){\r\n                label = graph_target.node_features[node_id]===graph_out.node_features[node_id];\r\n                \r\n            }\r\n            return getCoraNodeColor(label, color_encode);\r\n        }*/\r\n        let selectedNodeColor : any[] = [];\r\n        for(let i = 0 ; i<selectedNodeIdList.length ; i++){\r\n            let color = getNodeColorInfo(selectedNodeIdList[i]);\r\n            selectedNodeColor.push(color);\r\n        }\r\n        \r\n        \r\n        \r\n        let data_type = common.data_type_id;\r\n        if(data_type === 2){\r\n            let graph_info = common.graph_additional_info;\r\n            let selectedFeatureLabel:any = [];\r\n            \r\n            if(Object.keys(graph_info).indexOf(\"idx_to_attr\")>=0 && dataSource_select === 1){\r\n                let idx_to_attr = graph_info.idx_to_attr;\r\n                for(let i=0;i<selectedFeature.length; i++){\r\n                    selectedFeatureLabel.push(idx_to_attr[selectedFeature[i]]);\r\n                }\r\n            }else{\r\n                selectedFeatureLabel = selectedFeature;\r\n            }\r\n\r\n\r\n\r\n\r\n            // Filter Graph Json - ------------------------------------------------------\r\n            let filter_graph_json:any = {};\r\n            if(distance_mode === 1){\r\n                if(dataSource_select === 1 || dataSource_select === 2){\r\n                    let filter_x_axis_data : any[] = [];\r\n                    let filter_y_axis_data: any[] = [];\r\n                    let filter_type = \"continuous\";\r\n                    if(axis_select === 1){\r\n                        filter_x_axis_data = selectedFilterIdList;\r\n                        filter_y_axis_data = filter_feature_axis;\r\n                    }else{\r\n                        filter_x_axis_data = filter_feature_axis;\r\n                        filter_y_axis_data = selectedFilterIdList;\r\n                    }\r\n                    let filter_color_info: any = {\r\n                        \"enable_x_axis_color\": false,\r\n                        \"enable_y_axis_color\": false,\r\n                        \"x_axis_color\" : [],\r\n                        \"y_axis_color\" : []\r\n                    }\r\n                \r\n                    filter_graph_json = {\r\n                        \"success\": true,\r\n                        \"name\": graph_name,\r\n                        \"matrix\": filter_matrix,\r\n                        \"x_axis\": filter_x_axis_data,\r\n                        \"y_axis\": filter_y_axis_data,\r\n                        \"distance_select\": distance_select,\r\n                        \"type\": filter_type,\r\n                        \"color_info\": filter_color_info\r\n                    }\r\n                }else{\r\n                    filter_graph_json = {\r\n                        \"success\": false\r\n                    }\r\n                }\r\n            }else{\r\n                filter_graph_json = {\r\n                    \"success\": false\r\n                }\r\n            }\r\n            // Graph Json ------------------------------------------------------------\r\n            let type : any;\r\n            if(dataSource_select === 1){\r\n                type = \"discrete\";\r\n            }else{\r\n                type = \"continuous\";\r\n            }\r\n            \r\n            let graph_json:any, x_axis_data : any, y_axis_data : any;\r\n            let enable_x_axis_color : boolean = false;\r\n            let enable_y_axis_color : boolean = false;\r\n            let x_axis_color:any[] = [];\r\n            let y_axis_color:any[] = [];\r\n            if(distance_mode === 2){\r\n                x_axis_data = selectedNodeIdList;\r\n                y_axis_data = selectedNodeIdList;\r\n                enable_x_axis_color = true;\r\n                enable_y_axis_color = true;\r\n                x_axis_color = selectedNodeColor;\r\n                y_axis_color = selectedNodeColor;\r\n            }else{\r\n                if(axis_select === 1){\r\n                    x_axis_data = selectedNodeIdList;\r\n                    y_axis_data = selectedFeatureLabel;\r\n                    enable_x_axis_color = true;\r\n                    enable_y_axis_color = false;\r\n                    x_axis_color = selectedNodeColor;\r\n                    y_axis_color = [];\r\n                }else{\r\n                    x_axis_data = selectedFeatureLabel;\r\n                    y_axis_data = selectedNodeIdList;\r\n                    enable_x_axis_color = false;\r\n                    enable_y_axis_color = true;\r\n                    x_axis_color = [];\r\n                    y_axis_color = selectedNodeColor;\r\n                }\r\n            }\r\n            let color_info : any = {}\r\n            color_info[\"enable_x_axis_color\"] = enable_x_axis_color;\r\n            color_info[\"enable_y_axis_color\"] = enable_y_axis_color;\r\n            color_info[\"x_axis_color\"] = x_axis_color;\r\n            color_info[\"y_axis_color\"] = y_axis_color;\r\n            graph_json = {\r\n                \"success\":true,\r\n                \"name\":graph_name,\r\n                \"matrix\":matrix,\r\n                \"x_axis\":x_axis_data,\r\n                \"y_axis\":y_axis_data,\r\n                \"distance_select\": distance_select,\r\n                \"type\" : type,\r\n                \"color_info\": color_info,\r\n                \"selectedFeatureStatistics\":selectedFeatureStatistics,\r\n                \"indentedTree\": indentedTree,\r\n                \"filter_graph_json\": filter_graph_json,\r\n                \"showSource\":showSource\r\n            }\r\n            \r\n            return graph_json;\r\n        }else{\r\n            console.log(\"Unknown data type : \", data_type )\r\n            return {\"success\":false}; \r\n        }\r\n\r\n\r\n        \r\n    }\r\n    public onAxisChange(axis_select: number) {\r\n        this.setState({\r\n            axis_select:axis_select\r\n        })\r\n    }\r\n    public onDistanceChange(distance_select: number) {\r\n        this.setState({\r\n            distance_select:distance_select\r\n        })\r\n    }\r\n    public onDataSourceChange(dataSource_select: number){\r\n        this.setState({\r\n            dataSource_select: dataSource_select\r\n        })\r\n    }\r\n    public onColorEncodeChange(color_encode: number){\r\n        this.setState({\r\n            color_encode: color_encode\r\n        })\r\n    }\r\n    public onEnableSort(enableSorting: boolean){\r\n        this.setState({\r\n            enableSorting: enableSorting\r\n        })\r\n    }\r\n    public render() {\r\n        let {graph_object, specificNodeIdList} = this.props;\r\n        let common;\r\n        if(getLayoutMode()===3){\r\n            common = graph_object.common;\r\n        }else{\r\n            common = graph_object;\r\n        }\r\n        let explanation_type = common.graph_explaination.type;\r\n        let feature_matrix_json = this.constructFeatureMatrixJson(graph_object, specificNodeIdList,\r\n             this.state.axis_select, this.state.distance_select, this.state.dataSource_select, this.state.color_encode,\r\n            this.props.select_inspect_node, this.props.showSource, this.state.enableSorting, this.props.width, this.props.height, this.props.extendedMode);\r\n        //let filter_graph_json = feature_matrix_json[\"filter_graph_json\"];\r\n        //console.log(\"Filter_Graph_JSON\",filter_graph_json)\r\n        //console.log(\"Feature Matrix Json\", feature_matrix_json);\r\n        if(explanation_type == \"MessagePassing\" && feature_matrix_json[\"success\"]){\r\n            /*\r\n            let dataSourceOptions = [\r\n                [1, \"Input Layer\"],\r\n                [2, \"Hidden Layer\"],\r\n                [3, \"Output Layer\"]\r\n            ];\r\n            let distanceOptions = [\r\n                [1, \"Detailed Feature\"],\r\n                [2, \"Distance\"]\r\n            ];\r\n\r\n            let axisOptions = [\r\n                [1, \"X Axis\"],\r\n                [2, \"Y Axis\"]\r\n            ];\r\n            let colorOptions = [\r\n                [2, \"Ground Truth\"],\r\n                [3, \"Model Output\"],\r\n                [5, \"True / False\"]\r\n            ]\r\n            let generateSelect = (options:any[], select_num:number, onChange:any, tips:any) =>{\r\n                return (<Select\r\n                        placeholder={tips}\r\n                        value={select_num}\r\n                        style={{ width: '200px' }}\r\n                        onChange={onChange}\r\n                    >\r\n                        { options.map((value:any)=>(\r\n                                <Option key={value[0]} value={value[0]}>{value[1]}</Option>\r\n                        ))}\r\n                        \r\n                    </Select>);\r\n            }*/\r\n            let indentedtreeWidth = 120;\r\n            if(!this.props.showSource){\r\n                indentedtreeWidth = 60;\r\n            }\r\n            let matrixWidth = this.props.width-indentedtreeWidth;\r\n            let matrixRealWidth = matrixWidth - 30;\r\n            let max_row_num_block = Math.max(1, Math.floor((matrixRealWidth) / 15));\r\n            let gridSize = Math.floor((matrixRealWidth) / (max_row_num_block));\r\n            let indentedtreeBarHeight = gridSize;\r\n            let FeatureMatrixHeight = 180 + feature_matrix_json.y_axis.length * indentedtreeBarHeight + 20;\r\n            let BrushBarChartLayoutConfig = {\r\n                \"width\":this.props.width-indentedtreeWidth,\r\n                \"height\":100,\r\n                \"x\":indentedtreeWidth,\r\n                \"y\":0,\r\n                \"max_row_num_block\":max_row_num_block\r\n            }\r\n            let MatrixLayoutConfig = {\r\n                \"width\":this.props.width-indentedtreeWidth,\r\n                \"height\":FeatureMatrixHeight-180,\r\n                \"x\":indentedtreeWidth,\r\n                \"y\":180,\r\n                \"gridSize\":gridSize,\r\n                \"max_row_num_block\":max_row_num_block\r\n            }\r\n            let IndentedTreeLayoutConfig = {\r\n                \"width\":indentedtreeWidth,\r\n                \"height\":FeatureMatrixHeight-180,\r\n                \"x\":0,\r\n                \"y\":180,\r\n                \"barHeight\":indentedtreeBarHeight\r\n            }\r\n            let disableSort = () =>{\r\n                this.onEnableSort(false);\r\n            }\r\n            let enableSort = () =>{\r\n                this.onEnableSort(true);\r\n            }\r\n            let onChangeSort = (e:any) =>{\r\n                console.log(e);\r\n                this.onEnableSort(e);\r\n            }\r\n            //const [top, setTop] = useState(10);\r\n            return (            \r\n            <div >\r\n                <div className=\"ViewTitle\">Feature Matrix View\r\n                <div style={{float:'right'}}>\r\n                    \r\n                    \r\n                    \r\n                    </div>\r\n                \r\n                \r\n                </div>\r\n                <div className=\"ViewBox\" style={{width: \"100%\", height:\"\"+(this.props.height - 40)+\"px\", overflowX: \"scroll\"}}>\r\n                    \r\n                    <div\r\n                    style={{\r\n                        \r\n                        width: '100%',\r\n                        }}\r\n                    >\r\n                    {/*Data Source :\r\n                    {generateSelect(dataSourceOptions, this.state.dataSource_select, this.onDataSourceChange, \"Select the displayed data source.\")}\r\n                    Display info in :\r\n                    {generateSelect(distanceOptions,this.state.distance_select,this.onDistanceChange,\"Select show which mode the matrix display in\")}\r\n                    Show nodes in :\r\n                    {generateSelect(axisOptions,this.state.axis_select,this.onAxisChange, \"Select a nodes in which axis\")}\r\n                    Color encode: \r\n                    {generateSelect(colorOptions,this.state.color_encode, this.onColorEncodeChange, \"Select color encode\")}*/}\r\n                     {/*<WordCloud id={5} feature_matrix_json={feature_matrix_json} width={this.props.width} height={this.props.height}  />*/}\r\n                     {/*(filter_graph_json[\"success\"])?(<Matrix id={2} feature_matrix_json={filter_graph_json} \r\n                            width={this.props.width} height={this.props.height}  />):(<div />)*/}\r\n                        <div\r\n                        style={{\r\n                            \r\n                            width: '100%',\r\n                            height: \"\"+FeatureMatrixHeight+\"px\"\r\n                            }}\r\n                        >\r\n                        \r\n                            <svg\r\n                                        style={{ height: \"100%\", width:  \"100%\"}}\r\n                                        id=\"FeatureMatrixSVGChart\"\r\n                                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                            >\r\n                                            \r\n                                        \r\n                                            <foreignObject x={BrushBarChartLayoutConfig.x - 50} y=\"20\" width=\"50\" height=\"40\">\r\n                                                \r\n                                                <div>\r\n                                                {/*(this.state.enableSorting)?\r\n                        <Button type=\"primary\" size=\"small\" onClick={disableSort}>Sort by node order</Button>:\r\n                                                <Button type=\"default\" size=\"small\" onClick={enableSort}>Sort by frequency of features</Button>*/}\r\n                                                <Switch checked={this.state.enableSorting} onChange={onChangeSort} />\r\n                                                </div>\r\n                                            </foreignObject>\r\n                           \r\n                            <BrushBarChartContainer id={3} feature_matrix_json={feature_matrix_json} layout_config={BrushBarChartLayoutConfig}   />\r\n                            \r\n                            <MatrixContainer id={1} feature_matrix_json={feature_matrix_json} layout_config={MatrixLayoutConfig}   />\r\n                            \r\n                            \r\n                            {(this.props.showSource)?(<IndentedTreeContainer id={4} feature_matrix_json={feature_matrix_json} layout_config={IndentedTreeLayoutConfig}   />):<g />}\r\n                            </svg>\r\n                        \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>)\r\n        }else{\r\n            return <div style={{width: \"100%\", height:\"\"+(this.props.height - 20)+\"px\", overflowX: \"scroll\"}}>\r\n            <div className=\"ViewTitle\">Feature Matrix View\r\n            \r\n                </div></div>\r\n               // return <div>Please choose message passing explanation method. Please choose [1,100] nodes in graph view. Aggregated feature dimension should be no more than 500.</div>\r\n        }\r\n        //return <div>Message Passing View</div>\r\n    //}\r\n    }\r\n}\r\n\r\n","import FeatureMatrixView from '../components/DataRuns/FeatureMatrixView'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    specificNodeIdList : state.specificNodeIdList,\r\n    showSource: state.showSource,\r\n    select_inspect_node: state.select_inspect_node,\r\n    extendedMode: state.extendedMode\r\n\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FeatureMatrixView);\r\n\r\n\r\n\r\n","import axios from 'axios';\r\n//const URL = 'http://192.168.245.1:3000/';\r\n//var url1 = window.location.href;\r\n//var url3 = document.URL;\r\n//const URL = document.location.origin;\r\n//const URL = \"http://localhost:7777\"\r\n//const obj = require(\"gzip-loader!file.js.gz\");\r\n//console.log(\"public obj\", obj);\r\nconst ENABLE_STATIC_JSON = true;\r\nconst VERSION = \"V1_2\";\r\nconst URL = process.env.NODE_ENV === 'development'\r\n    ? 'http://localhost:7777'\r\n    : window.location.origin;\r\nconst axiosInstance1 = axios.create({\r\n    baseURL: `${URL}/api/`,\r\n    // timeout: 1000,\r\n    headers: {\r\n        'Access-Control-Allow-Origin': '*'\r\n    }\r\n});\r\n\r\nconst URL2 = window.location.origin;\r\nconst axiosInstance2 = axios.create({\r\n    baseURL: `${URL2}/data/`,\r\n    // timeout: 1000,\r\n    headers: {\r\n        'Access-Control-Allow-Origin': '*'\r\n    }\r\n});\r\n\r\nlet axiosInstance = (ENABLE_STATIC_JSON)?axiosInstance2:axiosInstance1;\r\n/*function sleep(ms:number) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }*/\r\nexport async function getDatasetList(): Promise<any> {\r\n    let url = `/datasets`;\r\n    if(ENABLE_STATIC_JSON){\r\n        url = '/datasetlist_'+VERSION+\".json\";\r\n    }\r\n    //const params = { classifier_start, classifier_end };\r\n    const res = await axiosInstance.get(url);\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\nexport async function getExplainMethodsList(model_id:number): Promise<any> {\r\n    const url = `/explainMethods`;\r\n    const params = { model_id };\r\n    const res = await axiosInstance.get(url, {params});\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\n  export async function getModelList(dataset_id:number): Promise<any> {\r\n    const url = `/models`;\r\n    const params = { dataset_id };\r\n    const res = await axiosInstance.get(url, {params});\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\nexport async function getGraphList(dataset_id:number): Promise<any> {\r\n    const url = `/graphs`;\r\n    const params = { dataset_id };\r\n    const res = await axiosInstance.get(url, {params});\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\nexport async function getGraphInfo(dataset_id:number, model_id:number, explain_id:number, graph_id:number): Promise<any> {\r\n    const url = `/graph_info`;\r\n    const params = { dataset_id, model_id, explain_id, graph_id };\r\n    const res = await axiosInstance.get(url, {params});\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\nexport async function getGraphBundledInfo(dataset_id:number): Promise<any> {\r\n    if(ENABLE_STATIC_JSON){\r\n        const url = '/cache_bundle_'+dataset_id+'_'+VERSION+\".json\";\r\n        const res = await axiosInstance.get(url);\r\n        if (res.status === 200) {\r\n            return res.data;\r\n        }\r\n        throw res;\r\n    }else{\r\n        const url = `/graph_bundle_info`;\r\n        const params = { dataset_id};\r\n        const res = await axiosInstance.get(url, {params});\r\n        if (res.status === 200) {\r\n            return res.data;\r\n        }\r\n        throw res;\r\n    }\r\n    \r\n}","import * as React from 'react';\r\nimport { Select, Row, Col, Upload, Icon, Button, message } from 'antd';\r\nimport { getModelList, getDatasetList, getExplainMethodsList, getGraphList } from '../../../service/dataService';\r\nimport { getLayoutMode } from '../../../helper';\r\nconst Option = Select.Option;\r\n\r\n\r\nexport interface DataSelectorProps {\r\n    model_id: number | null,\r\n    graph_id: number | null,\r\n    dataset_id : number | null,\r\n    explain_id : number | null,\r\n    modelList : any,\r\n    datasetList: any,\r\n    explainList: any,\r\n    graphList: any,\r\n    changeModel: any,\r\n    changeDataset: any,\r\n    changeExplainMethod: any,\r\n    changeGraph: any,\r\n    clearIdInfo:any,\r\n    initModelList: any,\r\n    initDatasetList: any,\r\n    initExplainList: any,\r\n    initGraphList: any\r\n}\r\n\r\nexport interface DataSelectorState {\r\n    //DataSelectorValue : number\r\n}\r\n\r\nexport default class DataSelector extends React.Component<DataSelectorProps, DataSelectorState> {\r\n    constructor(props: DataSelectorProps) {\r\n        super(props);\r\n        this.onModelSelectorChange = this.onModelSelectorChange.bind(this);\r\n        this.onDatasetSelectorChange = this.onDatasetSelectorChange.bind(this);\r\n        this.onExplainMethodSelectorChange = this.onExplainMethodSelectorChange.bind(this);\r\n        this.onGraphSelectorChange = this.onGraphSelectorChange.bind(this);\r\n        this.state = {\r\n            //DataSelectorValue: 1\r\n            // datarunStatus: IDatarunStatusTypes.PENDING\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        //this.initModelList();\r\n        this.initDatasetList();\r\n    }\r\n    public async initDatasetList(){\r\n        const datasetList_package = await getDatasetList();\r\n        //console.log(datasetList_package);\r\n        if(datasetList_package[\"success\"] === true){\r\n            this.props.initDatasetList(datasetList_package[\"datasets\"]);\r\n        }\r\n        \r\n    }\r\n    public async initModelList(dataset_id:number){\r\n        const modelList_package = await getModelList(dataset_id);\r\n        //console.log(modelList_package);\r\n        if(modelList_package[\"success\"] === true){\r\n            this.props.initModelList(modelList_package[\"models\"]);\r\n        }\r\n        \r\n    }\r\n    public async initExplainList(model_id:number){\r\n        const explainList_package = await getExplainMethodsList(model_id);\r\n        //console.log(explainList_package);\r\n        if(explainList_package[\"success\"] === true){\r\n            this.props.initExplainList(explainList_package[\"explainMethods\"]);\r\n        }\r\n        \r\n    }\r\n    public async initGraphList(dataset_id:number | null) {\r\n        if(dataset_id){\r\n            //console.log(dataset_id);\r\n            let graphlist_package = await getGraphList(dataset_id);\r\n            //console.log(graphlist_package);\r\n            if(graphlist_package[\"success\"] === true){\r\n                // transform obj\r\n                let graph_new_obj = [];\r\n                let ori_obj = graphlist_package[\"graphs\"];\r\n                for(let i = 0; i< ori_obj.length; i++ ){\r\n                    let local_obj = {\r\n                        \"key\": ori_obj[i][0],\r\n                        \"graphno\" : ori_obj[i][0],\r\n                        \"name\": ori_obj[i][1]\r\n                    }\r\n                    graph_new_obj.push(local_obj);\r\n                }\r\n                //console.log(graph_new_obj);\r\n                this.props.initGraphList(graph_new_obj);\r\n            }\r\n\r\n        }\r\n    }\r\n    public onModelSelectorChange(value: number) {\r\n        this.props.changeModel(value);\r\n        this.props.changeExplainMethod(null);\r\n        this.initExplainList(value);\r\n    }\r\n    public onDatasetSelectorChange(value: number) {\r\n        let layout_mode = getLayoutMode();\r\n        if(layout_mode === 3){\r\n            \r\n            this.props.changeDataset(value);\r\n            this.props.clearIdInfo();\r\n        }else{\r\n            this.props.changeDataset(value);\r\n            this.props.changeGraph(null);\r\n            this.props.changeExplainMethod(null);\r\n            this.props.initExplainList([]);\r\n            this.props.changeModel(null);\r\n            this.props.clearIdInfo();\r\n            this.initModelList(value);\r\n            this.initGraphList(value);\r\n        }\r\n        \r\n    }\r\n    public onExplainMethodSelectorChange(value: number) {\r\n        this.props.changeExplainMethod(value);\r\n    }\r\n    public onGraphSelectorChange(value: number) {\r\n        this.props.clearIdInfo();\r\n        this.props.changeGraph(value);\r\n    }\r\n    public render() {\r\n        let layout_mode = getLayoutMode();\r\n        //console.log(\"Render Data Selector\", this.props);\r\n        if(layout_mode === 1 || layout_mode === 2){\r\n            let disabledDatasetSelector = this.props.datasetList.length <= 0;\r\n            let disabledModelSelector = this.props.modelList.length <= 0;\r\n            let disabledExplainSelector = this.props.explainList.length <= 0;\r\n            let disabledGraphSelector = this.props.graphList.length <= 0;\r\n            \r\n            return (\r\n                <div className=\"data-selector\">\r\n                \r\n                    <div className=\"ViewBox\" style={{marginTop:\"3px\", marginLeft:\"3px\"}}>\r\n                        <Row style={{marginTop: '3px', marginLeft: '3px'}} gutter={6}>\r\n                                Datasets:&nbsp;\r\n    \r\n                                <Select\r\n                                    placeholder=\"Select a dataset\"\r\n                                    value={this.props.dataset_id  || undefined}\r\n                                    style={{ width: '200px' }}\r\n                                    onChange={this.onDatasetSelectorChange}\r\n                                    disabled={disabledDatasetSelector}\r\n                                >\r\n                                    {this.props.datasetList.map((d:any)=>(\r\n                                        <Option value={d.id} key={d.id}>\r\n                                           {d.name}\r\n                                        </Option>\r\n                                    ))}\r\n                                </Select>\r\n                                &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            Model:&nbsp;\r\n                            \r\n                                <Select\r\n                                    placeholder=\"Select a model\"\r\n                                    value={this.props.model_id  || undefined}\r\n                                    style={{ width: '200px' }}\r\n                                    onChange={this.onModelSelectorChange}\r\n                                    disabled={disabledModelSelector}\r\n                                >\r\n                                    {this.props.modelList.map((d:any)=>(\r\n                                        <Option value={d.id} key={d.id}>\r\n                                            {d.name}\r\n                                        </Option>\r\n                                    ))}\r\n                                    \r\n                                </Select>\r\n                                &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            Explain Methods:&nbsp;\r\n                                <Select\r\n                                    placeholder=\"Select an explain method\"\r\n                                    value={this.props.explain_id  || undefined}\r\n                                    style={{ width: '200px' }}\r\n                                    onChange={this.onExplainMethodSelectorChange}\r\n                                    disabled={disabledExplainSelector}\r\n                                >\r\n                                    {this.props.explainList.map((d:any)=>(\r\n                                        <Option value={d.id} key={d.id}>\r\n                                           {d.name}\r\n                                        </Option>\r\n                                    ))}\r\n                                    \r\n                                </Select>\r\n                                &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            Graph Data:&nbsp;\r\n                                <Select\r\n                                    placeholder=\"Select a graph data\"\r\n                                    value={this.props.graph_id  || undefined}\r\n                                    style={{ width: '200px' }}\r\n                                    onChange={this.onGraphSelectorChange}\r\n                                    disabled={disabledGraphSelector}\r\n                                >\r\n                                    {this.props.graphList.map((d:any)=>(\r\n                                        <Option value={d.key} key={d.key}>\r\n                                           {d.name}\r\n                                        </Option>\r\n                                    ))}\r\n                                    \r\n                                </Select>\r\n                        </Row>\r\n                    </div>\r\n                </div>)\r\n    \r\n        }else{\r\n            let disabledDatasetSelector = this.props.datasetList.length <= 0;\r\n            //if(!disabledDatasetSelector && !this.props.dataset_id){\r\n            //    this.onDatasetSelectorChange(7);\r\n            //}\r\n            return (\r\n                \r\n                        <Row>\r\n                                Datasets:&nbsp;\r\n                                <Select\r\n                                    placeholder=\"Select a dataset\"\r\n                                    value={this.props.dataset_id  || undefined}\r\n                                    style={{ width: '200px' }}\r\n                                    onChange={this.onDatasetSelectorChange}\r\n                                    disabled={disabledDatasetSelector}\r\n                                >\r\n                                    {this.props.datasetList.map((d:any)=>(\r\n                                        <Option value={d.id} key={d.id}>\r\n                                           {d.name}\r\n                                        </Option>\r\n                                    ))}\r\n                                </Select>\r\n                        </Row>\r\n                    \r\n               )\r\n            \r\n        }\r\n    }\r\n}\r\n","import DataSelector from '../components/DataRuns/ControlPanel/DataSelector';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeModel, initModelList, changeDataset, \r\n    changeExplainMethod, initDatasetList, initExplainList, initGraphList, changeGraph, clearIdInfo} from '../actions';\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    model_id: state.model,\r\n    graph_id: state.graph,\r\n    dataset_id: state.dataset_id,\r\n    explain_id: state.explain_id,\r\n    modelList : state.modelList,\r\n    datasetList: state.datasetList,\r\n    explainList: state.explainList,\r\n    graphList: state.graphList\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeModel: (model:number | null) => dispatch(changeModel(model)),\r\n    changeDataset: (dataset_id:number | null) => dispatch(changeDataset(dataset_id)),\r\n    changeExplainMethod: (explain_id:number | null) => dispatch(changeExplainMethod(explain_id)),\r\n    changeGraph: (graph:number | null) => dispatch(changeGraph(graph)),\r\n    clearIdInfo: () => dispatch(clearIdInfo()),\r\n    initModelList : (modelList: any) => dispatch(initModelList(modelList)),\r\n    initDatasetList : (datasetList: any) => dispatch(initDatasetList(datasetList)),\r\n    initExplainList : (explainList: any) => dispatch(initExplainList(explainList)),\r\n    initGraphList : (graphList:any) => dispatch(initGraphList(graphList))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DataSelector);\r\n","import * as React from 'react';\r\nimport {Tabs, Table, Row, Checkbox} from 'antd';\r\nimport DataSelectorContainer from '../../../container/DataSelectorContainer';\r\n//const TabPane = Tabs.TabPane\r\nconst CheckboxGroup = Checkbox.Group;\r\nconst plainOptions = ['Train', 'Valid', 'Test','Others'];\r\nconst defaultCheckedList = ['Train', 'Valid', 'Test', 'Others'];\r\nexport interface ControlPanelProps {\r\n    InspectCategoryList : any,\r\n    onChangeInspectCategoryList : any,\r\n    dataset_id: number | null\r\n}\r\n\r\nexport interface ControlPanelState {}\r\n\r\nexport default class ControlPanel extends React.Component<ControlPanelProps, ControlPanelState> {\r\n    constructor(props: ControlPanelProps) {\r\n        super(props);\r\n        //this.onRowClick = this.onRowClick.bind(this);\r\n        this.state = {\r\n        };\r\n    }\r\n    public render() {\r\n        \r\n        return (\r\n            <div>\r\n            <div className=\"ViewTitle\">Control Panel</div>\r\n            <div className=\"ViewBox\">\r\n                    <Row>\r\n                        <DataSelectorContainer />\r\n                    </Row>\r\n                    {(this.props.dataset_id && this.props.dataset_id>=0)?<Row>\r\n                        Inspect category:&nbsp;&nbsp;\r\n                        <CheckboxGroup\r\n                            value={this.props.InspectCategoryList}\r\n                            onChange={this.props.onChangeInspectCategoryList}\r\n                        >\r\n                            {plainOptions.map((d:any,index:number)=>{\r\n                                return <Checkbox key={d} value={d}>{d}</Checkbox>\r\n                                \r\n                            })}\r\n                        </CheckboxGroup>\r\n                        \r\n                    </Row>:(<div />)\r\n                    }\r\n                    \r\n            </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n","import './index.css';\r\nimport ControlPanel from './ControlPanel';\r\nexport default ControlPanel;","import ControlPanel from '../components/DataRuns/ControlPanel'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n//import { decrement, increment } from '../actions';\r\nimport {changeInspectCategoryList} from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    InspectCategoryList: state.InspectCategoryList,\r\n    dataset_id : state.dataset_id\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    onChangeInspectCategoryList : (InspectCategoryList:any) => dispatch(changeInspectCategoryList(InspectCategoryList))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlPanel);\r\n\r\n\r\n\r\n","\r\nimport './ParallelSets.css'\r\nimport * as React from \"react\";\r\nimport {getInfectionNodeColor, getInfectionEdgeColor, getCoraNodeColor, getLayoutMode} from '../../../helper';\r\nconst d3 = require(\"d3\");\r\nconst d3_parsets = require(\"./d3.parsets.js\");\r\nexport interface IProps {\r\n    PSJson:any,\r\n    changeFilters:any,\r\n    width: number,\r\n    height:number\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class ParallelCoordinates extends React.Component<IProps, IState>{\r\n\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.onRibbonClick = this.onRibbonClick.bind(this);\r\n        this.clearFilter = this.clearFilter.bind(this);\r\n        this.onCategoryClick = this.onCategoryClick.bind(this);\r\n        this.state = {\r\n\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n        this.renderD3();\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n        //console.log('Component did update!')\r\n        if(prevProps.PSJson.name !== this.props.PSJson.name){\r\n            d3.selectAll(\"#ParallelSets_SVG\").remove();\r\n            this.props.changeFilters({});\r\n            this.renderD3();\r\n        }\r\n\r\n        \r\n     }\r\n     public onRibbonClick(e:any){\r\n        const filters:any = {};\r\n        let current = e.data;\r\n        while(current){\r\n            if(current.hasOwnProperty(\"parent\")){\r\n                filters[current.dimension] = [current.name];\r\n                current = current.parent;\r\n            }else{\r\n                break;\r\n            }\r\n        }\r\n        //filters[feature] = selected;            \r\n        this.props.changeFilters(filters);\r\n    }\r\n    public onCategoryClick(e:any){\r\n        console.log(\"onCategoryClick\", e);\r\n        const filters:any = {};\r\n        let current = e.data;\r\n        filters[current.dimension.name] = [current.name];\r\n        this.props.changeFilters(filters);\r\n    }\r\n    public clearFilter(){\r\n        console.log(\"clearFilter\");\r\n        this.props.changeFilters({});\r\n    }\r\n    public renderD3(){\r\n        // Parallel Sets\r\n        let {width, height,PSJson} = this.props;\r\n        let PSData = PSJson.PSData;\r\n        let chart_dimensions = PSData[\"columns\"];\r\n        //let chart_dimensions = [\"Survived\", \"Sex\", \"Age\", \"Class\"];\r\n        \r\n        \r\n        \r\n        var chart = d3.parsets()\r\n            .dimensions(chart_dimensions)\r\n            .width(width)\r\n            .height(height)\r\n            .tension(1)\r\n            .on(\"ribbonClick\",this.onRibbonClick)\r\n            .on(\"sortDimensions\",this.clearFilter)\r\n            .on(\"sortCategories\",this.clearFilter)\r\n            .on(\"categoryClick\", this.onCategoryClick)\r\n            \r\n        var vis = d3.select(\"#parallelSets\").append(\"svg\")\r\n            .attr(\"id\",\"ParallelSets_SVG\")\r\n            .attr(\"width\", chart.width())\r\n            .attr(\"height\", chart.height());\r\n        //console.log(\"chart width, height\", chart.width(), chart.height())\r\n            \r\n        //var partition = d3.partition()\r\n        //    .size([chart.width(), chart.height() * 5 / 4])\r\n            //.children(function(d:any) { return d.children ? d3.values(d.children) : null; })\r\n            //.value(function(d:any) { return d.count; });\r\n\r\n        //var ice = false;\r\n        /*\r\n        function curves() {\r\n            var t = vis.transition().duration(500);\r\n            if (ice) {\r\n                t.delay(1000);\r\n                icicle();\r\n            }\r\n            t.call(chart.tension(this.checked ? .5 : 1));\r\n        }*/\r\n\r\n        //console.log(\"Titanic\", csv);\r\n        //d3.csv(\"titanic.csv\", function(csv:any) {\r\n        //console.log(\"PSJson\", PSJson);\r\n            let csv = PSData;\r\n            vis.datum(csv).call(chart);\r\n        //})\r\n        /*\r\n        var icicle = function(this:any) {\r\n                var newIce = this.checked,\r\n                tension = chart.tension();\r\n            if (newIce === ice) return;\r\n            if (ice = newIce) {\r\n                var dimensions:any = [];\r\n                vis.selectAll(\"g.dimension\")\r\n                    .each(function(d:any) { dimensions.push(d); });\r\n                dimensions.sort(function(a:any, b:any) { return a.y - b.y; });\r\n                var root = d3.parsets.tree({children: {}}, csv, dimensions.map(function(d:any) { return d.name; }), function() { return 1; }),\r\n                    nodes:any = partition(root),\r\n                    nodesByPath:any = {};\r\n                    nodes.forEach(function(d:any) {\r\n                        var path = d.data.name,\r\n                            p = d;\r\n                        while ((p = p.parent) && p.data.name) {\r\n                        path = p.data.name + \"\\0\" + path;\r\n                        }\r\n                        if (path) nodesByPath[path] = d;\r\n                    });\r\n                var data:any = [];\r\n                vis.on(\"mousedown.icicle\", stopClick, true)\r\n                    .select(\".ribbon\").selectAll(\"path\")\r\n                    .each(function(d:any) {\r\n                        var node = nodesByPath[d.path],\r\n                            s = d.source,\r\n                            t = d.target;\r\n                        s.node.x0 = t.node.x0 = 0;\r\n                        s.x0 = t.x0 = node.x;\r\n                        s.dx0 = s.dx;\r\n                        t.dx0 = t.dx;\r\n                        s.dx = t.dx = node.dx;\r\n                        data.push(d);\r\n                    });\r\n                iceTransition(vis.selectAll(\"path\"))\r\n                    .attr(\"d\", function(d:any) {\r\n                        var s = d.source,\r\n                            t = d.target;\r\n                        return ribbonPath(s, t, tension);\r\n                    })\r\n                    .style(\"stroke-opacity\", 1);\r\n                iceTransition(vis.selectAll(\"text.icicle\")\r\n                    .data(data)\r\n                    .enter().append(\"text\")\r\n                    .attr(\"class\", \"icicle\")\r\n                    .attr(\"text-anchor\", \"middle\")\r\n                    .attr(\"dy\", \".3em\")\r\n                    .attr(\"transform\", function(d:any) {\r\n                        return \"translate(\" + [d.source.x0 + d.source.dx / 2, d.source.dimension.y0 + d.target.dimension.y0 >> 1] + \")rotate(90)\";\r\n                    })\r\n                    .text(function(d:any) { return d.source.dx > 15 ? d.node.name : null; })\r\n                    .style(\"opacity\", 1e-6))\r\n                    .style(\"opacity\", 1);\r\n                iceTransition(vis.selectAll(\"g.dimension rect, g.category\")\r\n                    .style(\"opacity\", 1))\r\n                    .style(\"opacity\", 1e-6)\r\n                    .each(\"end\", function(this:any) { d3.select(this).attr(\"visibility\", \"hidden\"); });\r\n                iceTransition(vis.selectAll(\"text.dimension\"))\r\n                    .attr(\"transform\", \"translate(0,-5)\");\r\n                vis.selectAll(\"tspan.sort\").style(\"visibility\", \"hidden\");\r\n            } else {\r\n                vis.on(\"mousedown.icicle\", null)\r\n                    .select(\".ribbon\").selectAll(\"path\")\r\n                    .each(function(this:any,d:any) {\r\n                        var s = d.source,\r\n                            t = d.target;\r\n                        s.node.x0 = s.node.x;\r\n                        s.x0 = s.x;\r\n                        s.dx = s.dx0;\r\n                        t.node.x0 = t.node.x;\r\n                        t.x0 = t.x;\r\n                        t.dx = t.dx0;\r\n                    });\r\n                iceTransition(vis.selectAll(\"path\"))\r\n                    .attr(\"d\", function(d:any) {\r\n                        var s = d.source,\r\n                            t = d.target;\r\n                        return ribbonPath(s, t, tension);\r\n                    })\r\n                    .style(\"stroke-opacity\", null);\r\n                iceTransition(vis.selectAll(\"text.icicle\"))\r\n                    .style(\"opacity\", 1e-6).remove();\r\n                iceTransition(vis.selectAll(\"g.dimension rect, g.category\")\r\n                    .attr(\"visibility\", null)\r\n                    .style(\"opacity\", 1e-6))\r\n                    .style(\"opacity\", 1);\r\n                iceTransition(vis.selectAll(\"text.dimension\"))\r\n                    .attr(\"transform\", \"translate(0,-25)\");\r\n                vis.selectAll(\"tspan.sort\").style(\"visibility\", null);\r\n            }\r\n            d3.select(\"#icicle\")\r\n                .on(\"change\", icicle)\r\n                .each(icicle);\r\n        }\r\n        \r\n\r\n        function iceTransition(g:any) {\r\n            return g.transition().duration(1000);\r\n        }\r\n\r\n        function ribbonPath(s:any, t:any, tension:any) {\r\n            var sx = s.node.x0 + s.x0,\r\n                tx = t.node.x0 + t.x0,\r\n                sy = s.dimension.y0,\r\n                ty = t.dimension.y0;\r\n            var m0 = tension * sy + (1 - tension) * ty;\r\n            var m1 = tension * ty + (1 - tension) * sy;\r\n            return (tension === 1 ? [\r\n                \"M\", [sx, sy],\r\n                \"L\", [tx, ty],\r\n                \"h\", t.dx,\r\n                \"L\", [sx + s.dx, sy],\r\n                \"Z\"]\r\n            : [\"M\", [sx, sy],\r\n                \"C\", [sx, m0], \" \",\r\n                    [tx, m1], \" \", [tx, ty],\r\n                \"h\", t.dx,\r\n                \"C\", [tx + t.dx, m1], \" \", [sx + s.dx, m0], \" \", [sx + s.dx, sy],\r\n                \"Z\"]).join(\"\");\r\n        }\r\n\r\n        function stopClick() { d3.event.stopPropagation(); }\r\n\r\n        // Given a text function and width function, truncates the text if necessary to\r\n        // fit within the given width.\r\n        function truncateText(text:any, width:any) {\r\n            return function(this:any, d:any, i:any) {\r\n                var t = this.textContent = text(d, i),\r\n                    w = width(d, i);\r\n                if (this.getComputedTextLength() < w) return t;\r\n                this.textContent = \"…\" + t;\r\n                var lo = 0,\r\n                    hi = t.length + 1,\r\n                    x;\r\n                while (lo < hi) {\r\n                var mid = lo + hi >> 1;\r\n                if ((x = this.getSubStringLength(0, mid)) < w) lo = mid + 1;\r\n                else hi = mid;\r\n                }\r\n                return lo > 1 ? t.substr(0, lo - 2) + \"…\" : \"\";\r\n            };\r\n        }\r\n\r\n        d3.select(\"#file\").on(\"change\", function(this:any) {\r\n            var file = this.files[0],\r\n                reader = new FileReader;\r\n            reader.onloadend = function() {\r\n                var csv = d3.csv.parse(reader.result);\r\n                vis.datum(csv).call(chart\r\n                    .value(csv[0].hasOwnProperty(\"Number\") ? function(d:any) { return +d.Number; } : 1)\r\n                    .dimensions(function(d:any) { \r\n                        return d3.keys(d[0]).filter(function(d:any) { \r\n                            return d !== \"Number\"; \r\n                        }).sort(); \r\n                    }));\r\n            };\r\n            reader.readAsText(file);\r\n        });\r\n        */\r\n    }\r\n    public render() {\r\n        return (\r\n            <div id=\"parallelSets\" />\r\n        )\r\n\r\n    }\r\n}\r\n\r\n","import ParallelSets from '../components/DataRuns/PSView/ParallelSets';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeFilters} from '../actions';\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeFilters: (filters:any) => dispatch(changeFilters(filters))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ParallelSets);\r\n","import * as React from \"react\";\r\nimport { Tag } from 'antd';\r\nimport {getNodeStatisticStr} from '../../../helper';\r\nexport interface IProps {\r\n    PSSelectedNodes: number,\r\n    totalNodeNum: number\r\n}\r\nexport interface IState {\r\n}\r\nexport default class PSViewNodeStatistic extends React.Component<IProps, IState>{\r\n    public render() {\r\n        return <Tag> {getNodeStatisticStr(this.props.PSSelectedNodes, this.props.totalNodeNum)}</Tag>\r\n    }\r\n}\r\n\r\n","import PSViewNodeStatistic from '../components/DataRuns/PSView/PSViewNodeStatistic'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { StoreState } from '../types';\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    PSSelectedNodes: state.PSSelectedNodes\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PSViewNodeStatistic);\r\n\r\n\r\n\r\n","import PSView from './PSView'\r\nexport default PSView;\r\n\r\n\r\n","\r\nimport * as React from \"react\";\r\n//import ParallelCoordinatesContainer from '../../../container/ParallelCoordinatesContainer';\r\nimport ParallelSetsContainer from '../../../container/ParallelSetsContainer';\r\n//import SelectedNodeListContainer from '../../../container/SelectedNodeListContainer';\r\n//import SidePanelContainer from '../../../container/ControlPanelContainer';\r\nimport PSViewNodeStatisticContainer from '../../../container/PSViewNodeStatisticContainer';\r\nimport { Row } from 'antd';\r\nimport {constructNeighborSet,getLayoutMode,getCoraNodeColor,getTrainColor, compareSelectedNodeIdList} from '../../../helper';\r\n//import AnchorLink from \"antd/lib/anchor/AnchorLink\";\r\n//import {getInfectionNodeColor, getInfectionEdgeColor, getCoraNodeColor} from '../../../helper';\r\n//const Option = Select.Option;\r\n//const d3 = require(\"d3\");\r\n\r\n//const CheckboxGroup = Checkbox.Group;\r\n\r\n\r\n\r\nexport interface IProps {\r\n    graph_object:any,\r\n    show_mode:number, \r\n    explained_node:number, \r\n    onExplainNodeChange:any, \r\n    onShowModeChange:any,\r\n    model:number,\r\n    modelList:any[],\r\n    width:number,\r\n    height:number,\r\n    checkedList:any[],\r\n    changePSJson:any\r\n}\r\nexport interface IState {\r\n\r\n}\r\n\r\nexport default class PSView extends React.Component<IProps, IState>{\r\n\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.state = {\r\n           \r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n\r\n        \r\n     }\r\n     \r\n    \r\n    public getSimilarityFeatureSet(node_list:any, anchor_list:any, feature_list:any, feature_value_list:any, label_list:any, k:number=5){\r\n        \r\n        function calculateFeatureSimilarity(feature1:any, feature2:any){\r\n            let len1 = feature1.length;\r\n            let len2 = feature2.length;\r\n            let common = 0;\r\n            for(let k = 0; k<len1; k++){\r\n                if(feature2.indexOf(feature1[k])>=0){\r\n                    common = common + 1;\r\n                }\r\n            }\r\n            let total_length = len1+len2 - common;\r\n            if(total_length === 0){\r\n                return 0;\r\n            }else{\r\n                return common / total_length; \r\n            }\r\n        }\r\n        function calculateCosSimilarity(feature1:any, feature1_value:any, feature2:any, feature2_value:any){\r\n            let len1 = feature1.length;\r\n            let len2 = feature2.length;\r\n            let common = 0;\r\n            let norm_1 = 0;\r\n            let norm_2 = 0;\r\n            let eps = 1e-8;\r\n            for(let k = 0; k<len1; k++){\r\n                let idx2 = feature2.indexOf(feature1[k]);\r\n                if(idx2>=0){\r\n                    common = common + feature1_value[k]*feature2_value[idx2];\r\n                }\r\n                norm_1 = norm_1 + feature1_value[k]*feature1_value[k];\r\n            }\r\n            for(let k = 0; k<len2; k++){\r\n                norm_2 = norm_2 + feature2_value[k]*feature2_value[k];\r\n            }\r\n            norm_1 = Math.sqrt(norm_1);\r\n            norm_2 = Math.sqrt(norm_2);\r\n            if(norm_1<eps){\r\n                norm_1 = eps;\r\n            }\r\n            if(norm_2<eps){\r\n                norm_2 = eps;\r\n            }\r\n            let cos = common / (norm_1 * norm_2);\r\n            if(cos>=1){\r\n                cos = 1;\r\n            }else if(cos<0){\r\n                cos = 0;\r\n            }\r\n            return cos;\r\n            \r\n        }\r\n        let feature_similarity_list:any = {};\r\n        //console.log(\"getF \", feature_list, feature_list.length);\r\n        for(let i = 0; i<node_list.length; i++){\r\n            let max_feature_similarity = 0;\r\n            let max_anchor_set = [];\r\n            let all_anchor_similarity_list:any = [];\r\n            for(let j = 0; j<anchor_list.length; j++){\r\n                let idx_1 = node_list[i];\r\n                let idx_2 = anchor_list[j];\r\n                let feature_sim = calculateCosSimilarity(feature_list[idx_1], feature_value_list[idx_1], feature_list[idx_2], feature_value_list[idx_2]);\r\n                if(feature_sim > max_feature_similarity){\r\n                    max_feature_similarity = feature_sim;\r\n                    max_anchor_set = [anchor_list[j]];\r\n                }else if(feature_sim === max_feature_similarity){\r\n                    max_anchor_set.push(anchor_list[j]);\r\n                }\r\n                all_anchor_similarity_list.push({\r\n                    \"anchor_id\":idx_2,\r\n                    \"anchor_label\":label_list[idx_2],\r\n                    \"anchor_similarity\":feature_sim\r\n                })\r\n            }\r\n            all_anchor_similarity_list = all_anchor_similarity_list.sort((a:any,b:any)=>{\r\n                return a.anchor_similarity > b.anchor_similarity ? -1:1;\r\n            })\r\n            let topk_anchor_similarity_list = all_anchor_similarity_list.slice(0,k);\r\n            feature_similarity_list[\"\"+node_list[i]] = {\r\n                \"feature_similarity\":max_feature_similarity,\r\n                \"feature_sim_set\":max_anchor_set,\r\n                \"topk_anchor_similarity_list\":topk_anchor_similarity_list\r\n            }\r\n        }\r\n        return feature_similarity_list;\r\n    }\r\n\r\n    public getShortestPathDistanceSet(node_list:any, node_num:number,  neighbor_set:any, anchor_list:any){\r\n        console.log(\"getShortestPathDistanceSet begin anchor_list.length\", anchor_list.length);\r\n        let shortest_path_list:any = {};\r\n        let anchor_set = new Set(anchor_list);\r\n        //console.log(\"anchor_set\", anchor_set);\r\n        for(let i = 0 ;i < node_list.length; i++){\r\n            let queue = [];\r\n            queue.push([node_list[i], 0]);\r\n            let shortest_path_distance:any = \"inf\";\r\n            let shortest_path_set : any = [];\r\n            let mask = new Array(node_num).fill(0);\r\n            //console.log(\"mask\", mask);\r\n            while(queue.length > 0){\r\n                let curr:any = queue.shift();\r\n                if(mask[curr[0]]){\r\n                    continue;\r\n                }\r\n                mask[curr[0]] = 1;\r\n                if(anchor_set.has(curr[0])){\r\n                    //console.log(\"discoverd\", curr[0]);\r\n                    if(shortest_path_distance === \"inf\"){\r\n                        shortest_path_distance = curr[1];\r\n                        shortest_path_set.push(curr[0]);\r\n                    }else if(shortest_path_distance === curr[1]){\r\n                        shortest_path_set.push(curr[0]);\r\n\r\n                    }else{\r\n                        break;\r\n                    }\r\n                }else{\r\n                    let neighbors = neighbor_set[curr[0]];\r\n                    for(let j = 0; j <neighbors.length; j++){\r\n                        if(!mask[neighbors[j]]){\r\n                            queue.push([neighbors[j], curr[1]+1]);\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            shortest_path_list[\"\"+node_list[i]] = {\r\n                \"shortest_path_distance\":shortest_path_distance,\r\n                \"shortest_path_set\":shortest_path_set\r\n            }\r\n            //break;\r\n\r\n        }\r\n        console.log(\"getShortestPathDistanceSet end\");\r\n        return shortest_path_list;\r\n    }\r\n   \r\n\r\n\r\n\r\n    public constructPSJson(graph_object:any, show_mode:number, explained_node:number, onExplainNodeChange:any, onShowModeChange:any, CheckedList:any, width:number, height:number){\r\n        //console.log(\"constructPSJson begin\");\r\n        let CheckedList_str = CheckedList.join(\"_\");\r\n        let common = graph_object;\r\n        let individual = graph_object;\r\n        let graph_name; \r\n        let graph_out;\r\n        let layout_mode = getLayoutMode();\r\n        if(layout_mode === 3){\r\n            common = graph_object.common;\r\n            individual = graph_object.individual;\r\n            graph_name = common.name+\"_\"+common.dataset_id+\"_\"+(show_mode)+\"_\"+common.data_type_id+\"_CheckedList_\"+CheckedList_str+\"_CheckedList_End_\"+width+\"_\"+height;\r\n            graph_out = individual.GCN.graph_out;\r\n        }else{\r\n            graph_name = graph_object.name+\"_\"+graph_object.dataset_id+\"_\"+(graph_object.model)\r\n            +\"_\"+graph_object.explain_id \r\n            +\"_\"+(graph_object.graph)+\"_\"+graph_object.data_type_id+\"_CheckedList_\"+CheckedList_str+\"_CheckedList_End_\";\r\n            graph_out = graph_object.graph_out;\r\n        }\r\n\r\n        //console.log(graph_object);\r\n        let graph_in = common.graph_in;\r\n        let graph_target = common.graph_target;\r\n        let graph_explaination = common.graph_explaination;\r\n        let explaination_type = graph_explaination.type;\r\n\r\n        \r\n\r\n        if(explaination_type !== \"MessagePassing\"){\r\n            console.log(\"Unsupported explaination type , \", explaination_type);\r\n            return {\"success\": false};\r\n        }\r\n        let data_type = common.data_type_id;\r\n        function updateCNtable(cn_table:any, cgt:any, cpt:any, ngt: any, npt:any){\r\n            if(cgt === ngt){\r\n                cn_table[\"cgt_ngt\"] = cn_table[\"cgt_ngt\"] + 1;\r\n            }\r\n            if(cgt === npt){\r\n                cn_table[\"cgt_npt\"] = cn_table[\"cgt_npt\"] + 1;\r\n            }\r\n            if(cpt === ngt){\r\n                cn_table[\"cpt_ngt\"] = cn_table[\"cpt_ngt\"] + 1;\r\n            }\r\n            if(cpt === npt){\r\n                cn_table[\"cpt_npt\"] = cn_table[\"cpt_npt\"] + 1;\r\n            }\r\n            return cn_table;\r\n        }\r\n        \r\n        function constructMetaInformation(node_num:number, NeighborSet:any,graph_target:any, graph_out:any){\r\n            let degree_list = [];\r\n            let one_hop_accuracy_list = [];\r\n            let cn_consistency_list = [];\r\n            \r\n            for(let i = 0; i < node_num; i++) {\r\n                let degree = 0;\r\n                let one_hop_accuracy = 0;\r\n                let center_node_gt = graph_target[i];\r\n                let center_node_pt = graph_out[i];\r\n                let cn = {\r\n                    \"cgt_npt\":0,\r\n                    \"cgt_ngt\":0,\r\n                    \"cpt_npt\":0,\r\n                    \"cpt_ngt\":0\r\n                }\r\n                if(i in NeighborSet){\r\n                    degree = NeighborSet[i].length;\r\n                    let correctnum = 0;\r\n                    for(let j = 0; j < degree; j ++){\r\n                        let nownode = NeighborSet[i][j];\r\n                        if(graph_target[nownode] === graph_out[nownode]){\r\n                            correctnum = correctnum + 1;\r\n                        }\r\n                        cn = updateCNtable(cn,center_node_gt, center_node_pt, graph_target[nownode], graph_out[nownode]);\r\n                    }\r\n                    if(degree === 0){\r\n                        one_hop_accuracy = 0;\r\n                        cn[\"cgt_ngt\"] = 0;\r\n                        cn[\"cgt_npt\"] = 0;\r\n                        cn[\"cpt_ngt\"] = 0;\r\n                        cn[\"cpt_npt\"] = 0;\r\n                    }else{\r\n                        one_hop_accuracy = correctnum / degree;\r\n                        cn[\"cgt_ngt\"] = cn[\"cgt_ngt\"] / degree;\r\n                        cn[\"cgt_npt\"] = cn[\"cgt_npt\"] / degree;\r\n                        cn[\"cpt_ngt\"] = cn[\"cpt_ngt\"] / degree;\r\n                        cn[\"cpt_npt\"] = cn[\"cpt_npt\"] / degree;\r\n                    }\r\n                    \r\n                    \r\n                }\r\n\r\n                degree_list.push(degree);\r\n                one_hop_accuracy_list.push(one_hop_accuracy);\r\n                cn_consistency_list.push(cn);\r\n            }\r\n            return {\r\n                \"degree_list\": degree_list,\r\n                \"one_hop_accuracy_list\":one_hop_accuracy_list,\r\n                \"cn_consistency_list\":cn_consistency_list\r\n            }\r\n        }\r\n        function constructSelectedMask(node_num:number,CheckedList:any, mask:any){\r\n            \r\n            let train_mask = mask.train;\r\n            let test_mask = mask.test;\r\n            let valid_mask=  mask.valid;\r\n            let all_mask = [...train_mask,...test_mask,...valid_mask];\r\n            let other_mask = [];\r\n            for(let i = 0; i < node_num; i++){\r\n                if(all_mask.indexOf(i)>=0){\r\n\r\n                }else{\r\n                    other_mask.push(i);\r\n                }\r\n            }\r\n            let selected_mask:any[] = [];\r\n            //console.log(\"Train\",CheckedList,CheckedList.indexOf(\"Train\")>=0);\r\n            if(CheckedList.indexOf(\"Train\")>=0){\r\n                selected_mask = selected_mask.concat(train_mask);\r\n            }\r\n            if(CheckedList.indexOf(\"Test\")>=0){\r\n                selected_mask = selected_mask.concat(test_mask);\r\n            }\r\n\r\n            if(CheckedList.indexOf(\"Valid\")>=0){\r\n                selected_mask = selected_mask.concat(valid_mask);\r\n            }\r\n\r\n            if(CheckedList.indexOf(\"Others\")>=0){\r\n                selected_mask = selected_mask.concat(other_mask);\r\n            }\r\n            //selected_mask.sort();\r\n            return selected_mask;\r\n\r\n        }\r\n        /*\r\n        function constructRange(data_list:any){\r\n            let range:any = [];\r\n            for(let i =0 ;i <data_list.length; i++){\r\n                if(range.indexOf(data_list)>=0){\r\n\r\n                }else{\r\n                    range.push(data_list[i]);\r\n                }\r\n            }\r\n            range.sort();\r\n            return range;\r\n        }*/\r\n        let NeighborSet = constructNeighborSet(graph_in);\r\n        //console.log(\"constructPSJson construct NeighborSet\");\r\n        let mask = common.mask;\r\n        function normalized(array:any){\r\n            var total = 0;\r\n            for(let i = 0 ; i < array.length; i++){\r\n                total = total + array[i];\r\n            }\r\n            if(total === 0){\r\n                return array;\r\n            }else{\r\n                for(let i = 0 ;i<array.length; i++){\r\n                    array[i] = array[i] / total;\r\n                }\r\n                return array;\r\n            }\r\n            \r\n        }\r\n        function getLabelDistribution(node_list:any, total_label:any, num_classes:any){\r\n            let node_info = new Array(num_classes).fill(0);\r\n            //let mfs_set = feature_similarity_list[\"\"+index].feature_sim_set;\r\n            for(let j = 0; j<node_list.length; j++){\r\n                let label = total_label[node_list[j]];\r\n                node_info[label] = node_info[label] + 1;\r\n            }\r\n            return normalized(node_info);\r\n        }\r\n        let train_mask_set = new Set(common.mask.train);\r\n        function getNodeColorInfo(index:number){\r\n            let ground_truth_label = graph_target.node_features[index];\r\n            //let label = ground_truth_label;\r\n            let GCN_prediction_label = individual.GCN.graph_out.node_features[index];   //\r\n            let MLP_prediction_label = individual.MLP.graph_out.node_features[index]; \r\n            let GCN_Identity_features_prediction_label = individual.GCN_Identity_features.graph_out.node_features[index]; \r\n            // Ground Truth Color / Prediction Color\r\n            let color:any = [getCoraNodeColor(ground_truth_label, 2), \r\n                getCoraNodeColor(GCN_prediction_label,3),\r\n                getCoraNodeColor(MLP_prediction_label,3),\r\n                getCoraNodeColor(GCN_Identity_features_prediction_label,3),\r\n                getTrainColor(index, train_mask_set)\r\n            ];    //\r\n            return color;\r\n        }\r\n        function addRange(a:any,b:any){\r\n            if(a[\"active\"]){\r\n                if(a[\"end\"]<b[\"start\"]){\r\n                    return {\r\n                        \"active\":true,\r\n                        \"start\":a[\"start\"],\r\n                        \"end\":b[\"end\"],\r\n                        \"count\":a[\"count\"]+b[\"count\"]\r\n                    }\r\n                }else{\r\n                    console.log(\"invalid added\");\r\n                    return {\r\n                        \"active\":false\r\n                    }\r\n                }\r\n                \r\n            }else{\r\n                if(b[\"active\"]){\r\n                    return b;\r\n                }else{\r\n                    console.log(\"inactive added\");\r\n                    return {\r\n                        \"active\":false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        function constructDegreeRangeList(degree_list:any, bucket_num:number=8){\r\n            let nodenum = degree_list.length;\r\n            let degree_distribution:any = {};\r\n            for(let i = 0; i<nodenum; i++){\r\n                if(degree_distribution[degree_list[i]]){\r\n                    degree_distribution[degree_list[i]] = degree_distribution[degree_list[i]]+1;\r\n\r\n                }else{\r\n                    degree_distribution[degree_list[i]] = 1;\r\n                }\r\n            }\r\n            let degree_key:any = Object.keys(degree_distribution);\r\n            let new_degree_key:any = [];\r\n            for(let i = 0; i<degree_key.length; i++){\r\n                new_degree_key.push(parseInt(degree_key[i]));\r\n            }\r\n            let compare_number = (a:number, b:number)=>{\r\n                return a-b;\r\n            }\r\n            new_degree_key = new_degree_key.sort(compare_number);\r\n            //console.log(new_degree_key);\r\n            let degree_range_list = [];\r\n            let prev_range = {\r\n                \"active\":false\r\n            }\r\n            let current_range:any = {\r\n                \"active\":false\r\n            }\r\n\r\n            let single_bucket_count = nodenum / bucket_num;\r\n            for(let i = 0; i<new_degree_key.length; i++){\r\n                let this_range = {\r\n                    \"active\":true,\r\n                    \"start\":new_degree_key[i],\r\n                    \"end\":new_degree_key[i],\r\n                    \"count\":degree_distribution[new_degree_key[i]]\r\n                }\r\n                \r\n                current_range = addRange(prev_range, this_range);\r\n                //console.log(i, prev_range, this_range, current_range);\r\n                // Assume result range is active\r\n                if(current_range[\"active\"]){\r\n                    if(current_range[\"count\"]<single_bucket_count){\r\n                        if(i === degree_key.length-1){\r\n                            degree_range_list.push(current_range);\r\n                            current_range = {\r\n                                \"active\":false\r\n                            }\r\n                        }\r\n                    }else if(current_range[\"count\"]>=2*single_bucket_count){\r\n                        if(prev_range[\"active\"]){\r\n                            degree_range_list.push(prev_range);\r\n                        }\r\n                        degree_range_list.push(this_range);\r\n                        current_range = {\r\n                            \"active\":false\r\n                        }\r\n                    }else{\r\n                        degree_range_list.push(current_range);\r\n                        current_range = {\r\n                            \"active\":false\r\n                        }\r\n                    }\r\n                    prev_range = Object.assign({}, current_range);\r\n                }\r\n            }\r\n            for(let i = 0; i<degree_range_list.length; i++){\r\n                let start = degree_range_list[i][\"start\"];\r\n                let end = degree_range_list[i][\"end\"];\r\n                if(start === end){\r\n                    degree_range_list[i][\"name\"] = \"\"+end;\r\n                }else{\r\n                    degree_range_list[i][\"name\"] = \"[\"+start+\",\"+end+\"]\";\r\n                }\r\n            }\r\n            return degree_range_list;\r\n        }\r\n        function getDegreeCategory(degree:number, degree_list:any){\r\n            for(let i = 0; i<degree_list.length; i++){\r\n                let start = degree_list[i][\"start\"];\r\n                let end = degree_list[i][\"end\"];\r\n                //console.log(degree, start, end);\r\n                if(degree>=start && degree<=end){\r\n                    return degree_list[i][\"name\"];\r\n                }\r\n            }\r\n            return \"\"+degree;\r\n        }\r\n        if(data_type === 2){\r\n            let node_num = graph_target.node_features.length;\r\n            let num_classes = common.graph_additional_info.num_class;\r\n            let selected_mask = constructSelectedMask(node_num, CheckedList, mask);\r\n            //console.log(\"Mask\",this.state.checkedList, selected_mask);\r\n            // TODO:\r\n            let meta_package:any = constructMetaInformation(node_num,NeighborSet,graph_target.node_features, graph_out.node_features)\r\n            //console.log(\"shortest_path_distance, selected_mask, node_num, NeighborSet, mask.train\", selected_mask, node_num, NeighborSet, mask.train);\r\n            let enableSPD = true;\r\n            let enableKFS = true;\r\n            let shortest_path_distance_package:any, feature_similarity_list:any;\r\n            if(enableSPD){\r\n                shortest_path_distance_package = common.graph_additional_info.SPD;\r\n            }else{\r\n                shortest_path_distance_package = this.getShortestPathDistanceSet(selected_mask, node_num, NeighborSet, mask.train);\r\n            }\r\n            if(enableKFS){\r\n                feature_similarity_list = common.graph_additional_info.KFS;\r\n            }else{\r\n                feature_similarity_list = this.getSimilarityFeatureSet(selected_mask, mask.train, graph_in.feature, graph_in.feature_value, graph_target.node_features);\r\n            }\r\n           // console.log(\"shortest_path_distance_package\", shortest_path_distance_package);\r\n           // console.log(\"feature similarity list\", feature_similarity_list);\r\n            //console.log(\"shortest_path_distance_package\", shortest_path_distance_package);\r\n            let degree_list = meta_package[\"degree_list\"];\r\n            let degree_range_list = constructDegreeRangeList(degree_list.slice());\r\n            //console.log(\"degree_range_list length bucket\", degree_range_list, degree_range_list.length, 8);\r\n            //let max_degree = Math.max(...degree_list);\r\n            let one_hop_accuracy_list = meta_package[\"one_hop_accuracy_list\"];\r\n            let cn_consistency_list = meta_package[\"cn_consistency_list\"];\r\n            //console.log(\"cn_consistency_list\", cn_consistency_list);\r\n            //let PCPData = [];\r\n            //let PCPIndex = [];\r\n            let PSData:any = [];\r\n            //let ground_truth_label_range = constructRange(graph_target.node_features);\r\n            //let prediction_label_range = constructRange(graph_out.node_features);  //TODO\r\n            //let PSColumns = [\"Ground_Truth_Label\", \"GCN_Prediction_Label\",\"GCN_correctness\",\"GCN_one_hop_accuracy\",\"GCN(w/o_adj)_Prediction_Label\", \r\n            //\"GCN(w/o_features)_Prediction_Label\",\"Degree\"];\r\n            let P1_name = individual.GCN.real_model_name;\r\n            let P2_name = individual.MLP.real_model_name;\r\n            let P3_name = individual.GCN_Identity_features.real_model_name;\r\n            let P1_correctness = P1_name+\"_correctness\";\r\n            let P2_correctness = P2_name+\"_correctness\";\r\n            let P3_correctness = P3_name+\"_correctness\";\r\n            let P1_one_hop_accuracy = P1_name+\"_one_hop_accuracy\";\r\n            let PSColumns = [\"Ground_Truth_Label\",P1_correctness,P1_one_hop_accuracy,P2_correctness, \r\n            P3_correctness,\"Degree\",\"Shortest_Path_Distance_to_Train_Nodes\"];\r\n            /*let PCPDimension = [\r\n                {name: 'degree', range: [1,max_degree], type:\"log\"},\r\n                {name: 'ground_truth_label', range: ground_truth_label_range, type:\"ordinal\"},\r\n                {name: 'prediction_label', range: prediction_label_range, type:\"ordinal\"},\r\n                {name: 'correctness', range: [0,1], type:\"ordinal\"},\r\n                {name: 'one_hop_accuracy', range:[0,1], type:\"continuous\"}\r\n\r\n            ];*/\r\n            let whole_correct_num = 0;\r\n            let whole_accuracy = 0;\r\n            let ground_truth_label_stats:any = {};\r\n            let correct_label = \"Correct\";\r\n            let wrong_label = \"Wrong\";\r\n            let shortest_path_label_consistency = 0, shortest_path_label_accuracy = 0;\r\n            //console.log(\"constructPSJson prepare data\");\r\n            \r\n            let getLabelName = () =>{\r\n                let graph_info = common.graph_additional_info;\r\n                let num_class = graph_info.num_class;\r\n                let label = [];\r\n                if(Object.keys(graph_info).indexOf(\"idx_to_class\")>=0){\r\n                    let idx_to_class = graph_info.idx_to_class;\r\n                    for(let i = 0; i< num_class;i++){\r\n                        label.push(idx_to_class[i])\r\n                    }\r\n                }else{\r\n                    for(let i = 0; i< num_class;i++){\r\n                        label.push(\"\"+i);\r\n                    }\r\n                }\r\n                return label;\r\n            }\r\n            let label_name = getLabelName();\r\n            for(let i = 0; i<selected_mask.length;i++){\r\n                let index = selected_mask[i];\r\n                let node_json:any = {};\r\n                let ground_truth_label = graph_target.node_features[index];\r\n                let gcn_prediction_label = graph_out.node_features[index];\r\n                let gcn_confidence = graph_out.output_vector[index][gcn_prediction_label];\r\n                let mlp_prediction_label = individual.MLP.graph_out.node_features[index];\r\n                let gcn_identity_features_prediction_label = individual.GCN_Identity_features.graph_out.node_features[index];\r\n                node_json[\"Data_id\"] = index;\r\n                node_json[\"Color\"] = getNodeColorInfo(index);\r\n\r\n                if(enableSPD){\r\n                    node_json[\"Shortest_Path_Distance_to_Train_Nodes\"] = shortest_path_distance_package[index].dis;\r\n                    node_json[\"Spd_node_info\"] = shortest_path_distance_package[index].train_nodes;\r\n\r\n                }else{\r\n                    node_json[\"Shortest_Path_Distance_to_Train_Nodes\"] = shortest_path_distance_package[\"\"+index].shortest_path_distance;\r\n                    node_json[\"Spd_node_info\"] = getLabelDistribution(shortest_path_distance_package[\"\"+index].shortest_path_set, graph_target.node_features, num_classes);\r\n                }\r\n                shortest_path_label_consistency = shortest_path_label_consistency + node_json[\"Spd_node_info\"][gcn_prediction_label];\r\n                if(node_json[\"Spd_node_info\"][gcn_prediction_label]>=Math.max(...node_json[\"Spd_node_info\"])){\r\n                    shortest_path_label_accuracy = shortest_path_label_accuracy + 1;\r\n                }\r\n                \r\n                if(enableKFS){\r\n                    node_json[\"Topkfs_node_info\"] = feature_similarity_list[index][\"train_nodes\"];\r\n                    node_json[\"Topkfs_nodes\"] = feature_similarity_list[index][\"details\"];\r\n                    node_json[\"Topkfs_nodes\"] = node_json[\"Topkfs_nodes\"].sort((a:any,b:any)=>{\r\n                        if(a.anchor_label<b.anchor_label){\r\n                            return -1;\r\n                        }else if(a.anchor_label > b.anchor_label){\r\n                            return 1;\r\n                        }else{\r\n                            if(a.anchor_similarity>b.anchor_similarity){\r\n                                return -1;\r\n                            }else{\r\n                                return 1;\r\n                            }\r\n                        }\r\n                    })\r\n                }else{\r\n                    let topk_feature_sim_set = feature_similarity_list[\"\"+index].topk_anchor_similarity_list.map((d:any)=>d.anchor_id);\r\n                    node_json[\"Topkfs_node_info\"] = getLabelDistribution(topk_feature_sim_set, graph_target.node_features, num_classes);\r\n                    \r\n                    node_json[\"Topkfs_nodes\"] = feature_similarity_list[\"\"+index].topk_anchor_similarity_list;\r\n                    node_json[\"Topkfs_nodes\"] = node_json[\"Topkfs_nodes\"].sort((a:any,b:any)=>{\r\n                        if(a.anchor_label<b.anchor_label){\r\n                            return -1;\r\n                        }else if(a.anchor_label > b.anchor_label){\r\n                            return 1;\r\n                        }else{\r\n                            if(a.anchor_similarity>b.anchor_similarity){\r\n                                return -1;\r\n                            }else{\r\n                                return 1;\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                //node_json[\"Max_feature_similarity\"] = feature_similarity_list[\"\"+index].feature_similarity;\r\n                //node_json[\"Mfs_node_info\"] = getLabelDistribution(feature_similarity_list[\"\"+index].feature_sim_set, graph_target.node_features, num_classes);\r\n\r\n                \r\n                \r\n                \r\n                \r\n                node_json[\"CN_consistency\"] = cn_consistency_list[index];\r\n                node_json[\"Degree\"] = getDegreeCategory(degree_list[index], degree_range_list);//\"\"+degree_list[index];\r\n                node_json[\"Real_Degree\"] = degree_list[index];\r\n                //if(degree_list[index] > 7){\r\n                //    node_json[\"Degree\"] = \">7\";\r\n               // }\r\n                //node_json[\"Ground_Truth\"] =  label_name[ground_truth_label];\r\n                node_json[\"Ground_Truth_Label\"] = \"\"+ground_truth_label;\r\n                if(!(ground_truth_label in ground_truth_label_stats)){\r\n                    ground_truth_label_stats[ground_truth_label] = {\r\n                        \"correct_num\": 0,\r\n                        \"wrong_num\" : 0\r\n                    }\r\n                }\r\n                // TODO:\r\n\r\n                node_json[\"GCN_Prediction_Label\"] =  \"\"+gcn_prediction_label;\r\n                node_json[\"GCN_Confidence\"] = gcn_confidence;\r\n                node_json[\"GCN(w/o_adj)_Prediction_Label\"] = \"\"+mlp_prediction_label;\r\n                node_json[\"GCN(w/o_features)_Prediction_Label\"] = \"\"+gcn_identity_features_prediction_label;\r\n                node_json[P2_correctness] = mlp_prediction_label === ground_truth_label?correct_label:wrong_label;\r\n                node_json[P3_correctness] = gcn_identity_features_prediction_label === ground_truth_label?correct_label:wrong_label;\r\n                if(ground_truth_label===gcn_prediction_label){\r\n                    node_json[P1_correctness] = correct_label;\r\n                    whole_correct_num = whole_correct_num + 1;\r\n                    ground_truth_label_stats[ground_truth_label][\"correct_num\"] = \r\n                    ground_truth_label_stats[ground_truth_label][\"correct_num\"] + 1;\r\n\r\n                }else{\r\n                    node_json[P1_correctness] = wrong_label;\r\n                    ground_truth_label_stats[ground_truth_label][\"wrong_num\"] = \r\n                    ground_truth_label_stats[ground_truth_label][\"wrong_num\"] + 1;\r\n                }\r\n                node_json[P1_one_hop_accuracy] = \"\"+one_hop_accuracy_list[index];\r\n                let one_hop_accuracy = one_hop_accuracy_list[index];\r\n                if(one_hop_accuracy>0&&one_hop_accuracy<1){\r\n                    node_json[P1_one_hop_accuracy] = \"(0,1)\";\r\n                }\r\n                /*if(one_hop_accuracy>0&&one_hop_accuracy<=0.2){\r\n                    node_json[\"One_hop_accuracy\"] = \"(0,0.2]\";\r\n                }else if(one_hop_accuracy>0.2 && one_hop_accuracy <=0.4){\r\n                    node_json[\"One_hop_accuracy\"] = \"(0.2,0.4]\";\r\n                }else if(one_hop_accuracy>0.4 && one_hop_accuracy <=0.6){\r\n                    node_json[\"One_hop_accuracy\"] = \"(0.4,0.6]\";\r\n                }else if(one_hop_accuracy>0.6 && one_hop_accuracy <=0.8){\r\n                    node_json[\"One_hop_accuracy\"] = \"(0.6,0.8)\";\r\n                }else if(one_hop_accuracy>0.8 && one_hop_accuracy <1){\r\n                    node_json[\"One_hop_accuracy\"] = \"(0.8,1)\";\r\n                }*/\r\n                //node_json[\"two_hop_accuracy\"] = \r\n                PSData.push(node_json);\r\n                //PCPIndex.push(index);\r\n            }\r\n            //console.log(\"len, shortest_path_label_accuracy, rate\", selected_mask.length, shortest_path_label_accuracy, shortest_path_label_accuracy / selected_mask.length );\r\n            PSData[\"columns\"] =PSColumns;\r\n            let keys = Object.keys(ground_truth_label_stats);\r\n            let maxtotal = 0;\r\n            for(let i = 0 ;i < keys.length; i++){\r\n                let key = keys[i];\r\n                let stats = ground_truth_label_stats[key];\r\n                let total = stats[\"correct_num\"] + stats[\"wrong_num\"];\r\n                if(total > 0){\r\n                    stats[\"accuracy\"] = stats[\"correct_num\"] / total;\r\n                }else{\r\n                    stats[\"accuracy\"] = 0;\r\n                }\r\n                stats[\"total\"] = total;\r\n                if(total > maxtotal ){\r\n                    maxtotal = total;\r\n                }\r\n            }   \r\n            for(let i = 0 ;i<keys.length;i++){\r\n                let key = keys[i];\r\n                let stats = ground_truth_label_stats[key];\r\n                if(maxtotal > 0){\r\n                    stats[\"max_percentage\"] = stats[\"total\"] / maxtotal;\r\n                }else{\r\n                    stats[\"max_percentage\"] = 0;\r\n                }\r\n            }\r\n\r\n            if(selected_mask.length <= 0 ){\r\n                console.log(\"No selected data.\");\r\n                return {\"success\": false};\r\n            }else{\r\n                whole_accuracy = whole_correct_num / selected_mask.length;\r\n                let graph_json = {\r\n                    \"success\":true,\r\n                    \"name\":graph_name,\r\n                    \"PSData\":PSData,\r\n                    \"accuracy\":whole_accuracy,\r\n                    \"nodenum\":selected_mask.length,\r\n                }\r\n                return graph_json;\r\n            }\r\n        }else{\r\n            console.log(\"Unknown data type : \", data_type )\r\n            return {\"success\":false}; \r\n        }\r\n        \r\n    }\r\n    public render() {\r\n        //console.log(\"render PS view\");\r\n        let {graph_object, show_mode, explained_node, onExplainNodeChange, onShowModeChange} = this.props;\r\n        //let screenwidth = window.innerWidth;\r\n        //let screenheight = window.innerHeight;\r\n        //let PCPJson:any = this.constructPCPJson(graph_object,show_mode, explained_node, onExplainNodeChange, onShowModeChange, this.state.checkedList);\r\n        let layout_mode:any = getLayoutMode();\r\n        if(layout_mode === 3){\r\n            let PSWidth = this.props.width -10;\r\n            let PSHeight = this.props.height - 60;\r\n            let PSJson:any = this.constructPSJson(graph_object,show_mode, explained_node, onExplainNodeChange, onShowModeChange, this.props.checkedList, PSWidth, PSHeight);\r\n            //console.log(\"construct PS Json\", PSJson);\r\n            this.props.changePSJson(PSJson);\r\n            return <div style={{width: \"100%\", height:\"\"+(this.props.height - 10)+\"px\", overflowX: \"hidden\"}}>\r\n                \r\n                <div className=\"ViewTitle\">Parallel Sets View\r\n                <div style={{float:'right'}}>\r\n                            {PSJson[\"success\"]?(\r\n                            <div>\r\n                                <div>\r\n                                    {/*Accuracy: <Tag>{PCPJson[\"accuracy\"].toFixed(4)}</Tag>  &nbsp;&nbsp;&nbsp;&nbsp; <Tag>{PSJson[\"nodenum\"]}</Tag>*/} #Nodes: <PSViewNodeStatisticContainer totalNodeNum={PSJson[\"nodenum\"]}></PSViewNodeStatisticContainer>\r\n                                </div>\r\n                                \r\n                            </div>)\r\n                            :\r\n                            (<div />)}\r\n                            </div>\r\n                </div>\r\n                <div className=\"ViewBox\">\r\n                    <Row gutter={4}>\r\n                        <Row>\r\n                            {PSJson[\"success\"]?(\r\n                            <ParallelSetsContainer width={PSWidth} height={PSHeight} PSJson={PSJson} />):(<div />)}\r\n                        </Row>\r\n                        \r\n                    </Row>\r\n                   \r\n                    \r\n                </div>\r\n                {/*<Row>\r\n                    {PSJson[\"success\"]?(<SelectedNodeListContainer PCPJson={PSJson} height={screenheight*0.29} width={screenwidth * 6/ 24 -20}/>):(<div />)}\r\n                </Row>*/}\r\n            </div>\r\n        }else{\r\n            return <div />\r\n        }\r\n    }\r\n}\r\n\r\n","import PSView from '../components/DataRuns/PSView'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n//import { decrement, increment } from '../actions';\r\nimport {changePSJson} from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    checkedList: state.InspectCategoryList\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changePSJson: (PSJson: any) => dispatch(changePSJson(PSJson))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PSView);\r\n\r\n\r\n\r\n","import * as React from 'react';\r\nimport { Table, Pagination, Tag, Button, Select} from 'antd';\r\n//import { select } from 'd3';\r\n//import NodeGlyph from './NodeGlyph';\r\nimport \"./ProjectionView.css\";\r\nimport {getLayoutMode,getCoraNodeColor, compareSelectedNodeIdList} from '../../../helper';\r\n//import {lasso} from './d3-lasso.js';\r\n//import { getGraphList } from '../../service/dataService';\r\nconst d3 = require(\"d3\");\r\nconst mds = require(\"./mdsjs.js\");\r\nconst d3_lasso = require(\"./d3-lasso.js\");\r\nconst tsnejs = require(\"./tsne.js\");\r\n//console.log(\"tsnejs\",tsnejs)\r\n//const RadarChart = require(\"./RadarChart.js\");\r\n//console.log(\"d3_lasso\", d3_lasso.default());\r\nconst Option = Select.Option;\r\n\r\nexport interface ProjectionViewProps {\r\n    id:number,\r\n    refreshnumber:number,\r\n    filters:any,\r\n    PCPJson:any,\r\n    changeSelectedNodeIdList: any,\r\n    width:number,\r\n    height: number,\r\n    showSource:boolean,\r\n    changeShowSource:any,\r\n    selectedNodeIdList:any,\r\n    showMode:number,\r\n    x:number,\r\n    y:number,\r\n    name:string,\r\n    highlightNodeIdList:any,\r\n    onChangeHighLightNodeIdList:any,\r\n    renderLines:any\r\n}\r\n\r\nexport interface ProjectionViewState {\r\n    \r\n\r\n}\r\n\r\nexport default class ProjectionView extends React.Component<ProjectionViewProps, ProjectionViewState> {\r\n    public point_array:any[] = [];\r\n    public additional_info:any = {};\r\n    public model:any = {};\r\n    //public showMode: number = 1; \r\n    // 1 -> ground truth label / prediction label\r\n    // 2 -> shortest path distance / center neighbor consistency rate.\r\n    // 3 -> shortest path distance train nodes label distribution\r\n    // 4 -> topkfs train nodes label distribution\r\n    constructor(props: ProjectionViewProps) {\r\n        super(props);\r\n        this.mappingGraph = this.mappingGraph.bind(this);\r\n        this.onSelectedNodeListChange = this.onSelectedNodeListChange.bind(this);\r\n        this.onShowModeChange = this.onShowModeChange.bind(this);\r\n        //this.onRowClick = this.onRowClick.bind(this);\r\n        this.state = {\r\n            //graph_data : []\r\n            showMode: 1\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        this.renderD3();\r\n        //this.updateGraphList(this.props.selected_modelno);\r\n    }\r\n    componentDidUpdate(prevProps:ProjectionViewProps, prevState:ProjectionViewState){\r\n        if(!compareSelectedNodeIdList(prevProps.selectedNodeIdList,this.props.selectedNodeIdList)){\r\n            //this.onSelectedNodeListChange(this.props.selectedNodeIdList);\r\n            this.renderD3();\r\n        }else{\r\n            if( prevProps.showMode !== this.props.showMode){\r\n                this.renderD3();\r\n            }\r\n        }\r\n        if(!compareSelectedNodeIdList(prevProps.highlightNodeIdList, this.props.highlightNodeIdList)){\r\n            this.updateHighlightStatus();\r\n        }\r\n        \r\n    }\r\n    \r\n    public onSelectedNodeListChange(selectedNodeList:any, highlightNodeIdList:any){\r\n        this.props.onChangeHighLightNodeIdList(selectedNodeList, highlightNodeIdList);\r\n    } \r\n    public test(){\r\n        //console.log(point_array);\r\n        const width:number = 300,\r\n                height:number = 300,\r\n                margin = 40,\r\n                scalepop = d3.scaleSqrt().domain([0, 100000]).range([0.2, 24]),\r\n                scalecountry = d3.scaleOrdinal(d3.schemeCategory20b),\r\n                centerx = d3.scaleLinear().range([width / 2 - height / 2 + margin, width / 2 + height / 2 - margin]),\r\n                centery = d3.scaleLinear().range([margin, height - margin]);\r\n\r\n        d3.csv('cities.csv', function (cities:any) {\r\n\r\n            const data = cities\r\n                .sort((a:any, b:any) => d3.descending(+a[2015], +b[2015]))\r\n                .map((d:any, i:any) => [+d.Longitude, +d.Latitude, d['Urban Agglomeration'], +d[2015], +d['Country Code']])\r\n                .slice(0, 800);\r\n\r\n            const canvas = d3.select(\"#chart\").append(\"canvas\")\r\n                .attr(\"width\", width)\r\n                .attr(\"height\", height);\r\n\r\n            const model = new tsnejs.tSNE({\r\n                dim: 2,\r\n                perplexity: 30,\r\n            });\r\n\r\n            // initialize data with pairwise distances\r\n            const dists = data.map((d:any) => data.map((e:any) => d3.geoDistance(d, e)));\r\n            model.initDataDist(dists);\r\n\r\n\r\n            const forcetsne = d3.forceSimulation(\r\n            data.map((d:any) => (d.x = width / 2, d.y = height / 2, d))\r\n            )\r\n                .alphaDecay(0.005)\r\n                .alpha(0.1)\r\n                .force('tsne', function (alpha:any) {\r\n                    // every time you call this, solution gets better\r\n                    model.step();\r\n\r\n                    // Y is an array of 2-D points that you can plot\r\n                    let pos = model.getSolution();\r\n\r\n                    centerx.domain(d3.extent(pos.map((d:any) => d[0])));\r\n                    centery.domain(d3.extent(pos.map((d:any) => d[1])));\r\n\r\n                    data.forEach((d:any, i:any) => {\r\n                        d.x += alpha * (centerx(pos[i][0]) - d.x);\r\n                        d.y += alpha * (centery(pos[i][1]) - d.y);\r\n                    });\r\n                })\r\n                .force('collide', d3.forceCollide().radius((d:any) => 1.5 + scalepop(d[3])))\r\n                .on('tick', function () {\r\n\r\n                    let nodes = data.map((d:any, i:any) => {\r\n                        return {\r\n                            x: d.x,\r\n                            y: d.y,\r\n                            r: scalepop(d[3]),\r\n                            color: scalecountry(d[4]),\r\n                        };\r\n                    });\r\n\r\n                    draw(canvas, nodes);\r\n\r\n                });\r\n\r\n            function draw(canvas:any, nodes:any) {\r\n                let context = canvas.node().getContext(\"2d\");\r\n                context.clearRect(0, 0, width, width);\r\n\r\n                for (var i = 0, n = nodes.length; i < n; ++i) {\r\n                    var node = nodes[i];\r\n                    context.beginPath();\r\n                    context.moveTo(node.x, node.y);\r\n                    context.arc(node.x, node.y, node.r, 0, 2 * Math.PI);\r\n                    context.lineWidth = 0.5;\r\n                    context.fillStyle = node.color;\r\n                    context.fill();\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n    public mappingGraph(point_array:any=null,additional_info:any=null, model:any=null) {\r\n        if(point_array===null){\r\n            point_array = this.point_array;\r\n        }else{\r\n            this.point_array = point_array;\r\n        }\r\n        if(additional_info === null){\r\n            additional_info = this.additional_info;\r\n        }else{\r\n            this.additional_info = additional_info;\r\n        }\r\n        if(model === null){\r\n            model = this.model;\r\n        }else{\r\n            this.model = model;\r\n        }\r\n        //this.test();\r\n        //console.log(\"point_array\", point_array);\r\n        let showMode = this.props.showMode;\r\n        d3.select(\"#ScatterPlot_sub_\"+this.props.id).remove();\r\n        if(point_array.length <= 0){\r\n            return;\r\n        }\r\n        /*\r\n        function get_boundingbox(graph_layout:any[]){\r\n            if(graph_layout.length === 0){\r\n                return {\r\n                    \"xmin\":0,\r\n                    \"xmax\":0,\r\n                    \"ymin\":0,\r\n                    \"ymax\":0\r\n                }\r\n            }else{\r\n                let xmin = graph_layout[0][0];\r\n                let xmax = graph_layout[0][0];\r\n                let ymin = graph_layout[0][1];\r\n                let ymax = graph_layout[0][1];\r\n                for(let i = 0; i< graph_layout.length; i++){\r\n                    let nowx = graph_layout[i][0];\r\n                    let nowy = graph_layout[i][1];\r\n                    if(xmin > nowx){\r\n                        xmin = nowx;\r\n                    }\r\n                    if(xmax < nowx){\r\n                        xmax = nowx;\r\n                    }\r\n                    if(ymin > nowy){\r\n                        ymin = nowy;\r\n                    }\r\n                    if(ymax < nowy){\r\n                        ymax = nowy;\r\n                    }\r\n                }\r\n                return {\r\n                    \"xmin\":xmin,\r\n                    \"xmax\":xmax,\r\n                    \"ymin\":ymin,\r\n                    \"ymax\":ymax\r\n                }\r\n            }\r\n        }\r\n        function transform_graphlayout(graph_layout:any[],width=600,height=600,margin=20,exceedingmargin=20){\r\n            if(graph_layout.length === 0){\r\n                return graph_layout;\r\n            }else{\r\n                let bounding_box = get_boundingbox(graph_layout);\r\n                \r\n                if(graph_layout.length >= 100){\r\n                    margin = exceedingmargin;\r\n                }\r\n                \r\n                let realwidth = width - 2*margin;\r\n                let realheight = height - 2*margin;\r\n                let gap_x = bounding_box[\"xmax\"] - bounding_box[\"xmin\"];\r\n                let gap_y = bounding_box[\"ymax\"] - bounding_box[\"ymin\"];\r\n                if(gap_x === 0){\r\n                    gap_x = 1e-14;\r\n                }\r\n                if(gap_y === 0){\r\n                    gap_y = 1e-14;\r\n                }\r\n                let realscale = Math.min(realwidth / gap_x, realheight / gap_y);\r\n                let left = margin + (realwidth - realscale * gap_x) / 2;\r\n                let top = margin + (realheight - realscale * gap_y) / 2; \r\n                let xmin = bounding_box[\"xmin\"];\r\n                let ymin = bounding_box[\"ymin\"];\r\n                let new_graph_layout = [];\r\n                for(let i = 0; i< graph_layout.length; i++){\r\n                    let nowx = graph_layout[i][0];\r\n                    let nowy = graph_layout[i][1];\r\n                    let locx = left+ (nowx - xmin) * realscale;\r\n                    let locy = top + (nowy - ymin) * realscale;\r\n                    new_graph_layout.push([locx,locy]);\r\n                }\r\n                return new_graph_layout;\r\n            }\r\n        }\r\n        */\r\n        //let new_point_array = point_array.map((d:any)=>d.coords);\r\n        //new_point_array = transform_graphlayout(new_point_array, this.props.width, this.props.height);\r\n        //point_array.forEach((d:any,i:any)=>{\r\n        //    d.coords = new_point_array[i];\r\n        //})\r\n        \r\n        // assert point_array.length > 0;\r\n        var num_class = point_array[0].data.Spd_node_info.length;\r\n\r\n       \r\n\r\n\r\n\r\n        var nodenum = point_array.length;\r\n        var configuration = {\r\n            \"radius\":3.5,\r\n            \"showlabel\": true,\r\n            \"width\": this.props.width,\r\n            \"height\": this.props.height\r\n        }\r\n        //console.log(\"ScatterPlot\" , nodenum)\r\n        if(nodenum >= 100){\r\n            configuration = {\r\n                \"radius\":3.5,\r\n                \"showlabel\": false,\r\n                \"width\": this.props.width,\r\n                \"height\": this.props.height\r\n            }\r\n        }\r\n        var top_top_svg = d3.select(\"#TopSVGChart_ScatterPlot_\"+this.props.id)\r\n        var width = configuration[\"width\"];\r\n        var height = configuration[\"height\"];\r\n        \r\n        var top_svg = top_top_svg.append(\"g\")\r\n                .attr(\"id\",\"ScatterPlot_sub_\"+this.props.id);\r\n        var svg = top_svg.append(\"g\");\r\n            svg.attr(\"width\", width)\r\n                .attr(\"height\", height);\r\n            /*\r\n                top_top_svg.on(\"touchstart\", nozoom)\r\n                .on(\"touchmove\", nozoom);\r\n                function nozoom() {\r\n                    console.log(\"No zoom\");\r\n                    d3.event.preventDefault();\r\n                  }\r\n                  top_top_svg.call(d3.zoom()\r\n                    .extent([[0, 0], [width, height]])\r\n                    .scaleExtent([0.1, 8])\r\n                    .on(\"zoom\", zoomed));\r\n                \r\n                function zoomed(event:any) {\r\n                  svg.attr(\"transform\", d3.event.transform);\r\n                }     */\r\n                top_svg.append(\"rect\")\r\n                .attr(\"x\",0)\r\n                .attr(\"y\",0)\r\n                .attr(\"width\", width)\r\n                .attr(\"height\", height)\r\n                .attr(\"fill\",\"white\")\r\n            .attr(\"stroke\",\"#bbb\")\r\n            .attr(\"stroke-width\",2)\r\n            .attr(\"fill-opacity\",0.1)\r\n            .attr(\"stroke-opacity\",0.5);\r\n            top_svg.append(\"text\")\r\n            .attr(\"x\",width/2)\r\n            .attr(\"y\",-2)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(this.props.name)\r\n            .on(\"mousemove\", handleTitleMouseMove).on(\"mouseout\",handleTitleMouseOut);\r\n            function hiddenTooltip(){\r\n                d3.select(\"#tooltip_proj\").style('opacity', 0);\r\n\r\n            }\r\n            let name = this.props.name;\r\n            /*let description = \"\";\r\n            if(showMode === 1){\r\n                description = \"Ground truth label + 3 model prediction results\";\r\n            }else if(showMode === 2){\r\n                description = \"Degree + Center Neighbor Consistent Rate\";\r\n            }else if(showMode === 3){\r\n                description = \"GNN prediction label + Ground Truth Label Distribution of train nodes with shortest path distance to nodes\";\r\n            }else if(showMode === 4){\r\n                description = \"GNN prediction label + Ground Truth Label Distribution of train nodes with top k feature similarity to nodes\";\r\n            }*/\r\n\r\n            function handleTitleMouseMove(this:any){\r\n                function constructPathOnNodeList(nodelist:any){\r\n                    // \r\n                    let path = \"\";\r\n                    for(let i = 0; i<nodelist.length;i++){\r\n                        let note = \"M\";\r\n                        if(i>0){\r\n                            note = \"L\"\r\n                        }\r\n                        path = path+note+nodelist[i][0]+\" \"+nodelist[i][1]+\" \";\r\n                    }\r\n                    return path;\r\n        \r\n                }\r\n                function getArc(radius:number){\r\n                    return d3.arc()\r\n                    .innerRadius(radius)\r\n                    .outerRadius(radius*2);\r\n                }\r\n                var xy:any;\r\n                \r\n                //xy = d3.mouse(this);\r\n                xy = [d3.event.pageX, d3.event.pageY];\r\n                \r\n                let svgWidth = 100;\r\n                let svgHeight = 100;\r\n                if(showMode === 1){\r\n                    svgWidth = 100;\r\n                    svgHeight = 100;\r\n                }else if(showMode === 2){\r\n                    svgWidth = 130;\r\n                    svgHeight = 100;\r\n                }else if(showMode === 3 || showMode === 4){\r\n                    svgWidth = 70;\r\n                    svgHeight = 40;\r\n                }\r\n                var tooltip_proj = d3.select('#tooltip_proj')\r\n                .style('opacity', 0.8)\r\n                .style('top', (xy[1] - svgHeight) + 'px')\r\n                .style('left', (xy[0] + 10) + 'px')\r\n                ;\r\n                tooltip_proj.selectAll(\"*\").remove();\r\n                var tooltip_svg = tooltip_proj.append(\"svg\")\r\n                .attr(\"width\", svgWidth)\r\n                .attr(\"height\", svgHeight);\r\n                // ---------------------- Render Legend -------------------------- //\r\n                var radius = configuration[\"radius\"];\r\n                var radius_gap = 0.3;\r\n                var inner_radius = radius - radius_gap;\r\n                let legend_pie_x = 0;\r\n                let legend_pie_y = 0;\r\n                var top_svg = tooltip_svg;\r\n                if(showMode === 1){\r\n                    \r\n    \r\n                    var legend_svg = top_svg.append(\"g\")\r\n                        .attr(\"width\", 100)\r\n                        .attr(\"height\", 70)\r\n                        .attr(\"transform\",\"translate(\"+legend_pie_x+\",\"+legend_pie_y+\")\")\r\n    \r\n                    \r\n                    var arc_data = [{\r\n                        \"index\":0,\r\n                        \"value\":1/3\r\n                    }, {\r\n                        \"index\":1,\r\n                        \"value\":1/3\r\n                    }, {\r\n                        \"index\":2,\r\n                        \"value\":1/3\r\n                    }];\r\n                    var ori_arcs = d3.pie()\r\n                    .startAngle((-60/180) * Math.PI)\r\n                    .endAngle((2-60/180) * Math.PI)\r\n                    .value(function(a:any){\r\n                        return a.value;\r\n                    })\r\n                    .sort(function(a:any, b:any) {\r\n                        return a.index<b.index;\r\n                    });\r\n                    var arcs = ori_arcs(arc_data);\r\n                    /*var arc = d3.arc()\r\n                    .innerRadius(radius)\r\n                    .outerRadius(radius*2);*/\r\n                    \r\n                    let legend_x = 30;\r\n                    let legend_y = 50;\r\n                   // let legend_width = 200;\r\n                   // let legend_height = 100;\r\n                    let legned_scale = 2;\r\n                    this.refresh_number = this.refresh_number + 1;\r\n                    let legend_pie_all = legend_svg.selectAll(\"g.legend_pie\")\r\n                                    .data([this.refresh_number], function(d:any){\r\n                                        return d;\r\n                                    });\r\n                        legend_pie_all.exit().remove();\r\n                    //console.log(\"Refreshnumber\",this.refresh_number,pieName);\r\n                    let legend_pie = legend_pie_all.enter().append(\"g\")\r\n                                    .attr(\"class\", \"legend_pie\")\r\n                                    .attr(\"transform\", \"translate(\"+legend_x+\",\"+legend_y+\")\")\r\n                    \r\n                      // Render Circle\r\n                    let legend_Color = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\"];\r\n                    legend_pie.append(\"circle\")\r\n                    .attr(\"class\",\"inner_circle\")\r\n                    .attr(\"r\", inner_radius*legned_scale)\r\n                    .attr(\"fill\", function(d:any) { return legend_Color[0]; })\r\n                    .attr(\"stroke\", \"white\");\r\n            \r\n                    let legend_text_setting = [\r\n                        {\r\n                            \"text\":\"GT\",\r\n                            \"text-anchor\":\"begin\",\r\n                            \"dominant-baseline\":\"central\",\r\n                            \"y_offset\":+1\r\n                        },\r\n                        {\r\n                            \"text\":\"P1\",\r\n                            \"text-anchor\":\"begin\",\r\n                            \"dominant-baseline\":\"central\",\r\n                            \"y_offset\":-7.5\r\n                        },\r\n                        {\r\n                            \"text\":\"P2\",\r\n                            \"text-anchor\":\"begin\",\r\n                            \"dominant-baseline\":\"central\",\r\n                            \"y_offset\":0\r\n                        },\r\n                        {\r\n                            \"text\":\"P3\",\r\n                            \"text-anchor\":\"begin\",\r\n                            \"dominant-baseline\":\"central\",\r\n                            \"y_offset\":+19\r\n                        },\r\n                        {\r\n                            \"text\":\"Conf\",\r\n                            \"text-anchor\":\"begin\",\r\n                            \"dominant-baseline\":\"central\",\r\n                            \"y_offset\":0\r\n                        },\r\n                    ]\r\n                        \r\n                    for (let i = 0; i < 3; i++){\r\n                        let background_enter = legend_pie.append(\"path\").attr(\"class\",\"arc_\"+i)\r\n                        let background = legend_pie.select(\"path.arc_\"+i);\r\n                        let background_enter_update  = background_enter.merge(background);\r\n                        background_enter_update\r\n                        .style(\"fill\", function(d:any){\r\n                            return legend_Color[i+1]\r\n                        })\r\n                        .attr(\"d\", getArc(radius*legned_scale)(arcs[i]));\r\n                        \r\n                    }\r\n                    \r\n                \r\n                    // Render Conf\r\n                    var ori_arcs_conf = d3.pie()\r\n                    .startAngle((0/180) * Math.PI)\r\n                    .endAngle((2-0/180) * Math.PI)\r\n                    .value(function(a:any){\r\n                        return a.value;\r\n                    })\r\n                    .sort(function(a:any, b:any) {\r\n                        return a.index<b.index;\r\n                    });\r\n                    \r\n                    let overall_background_conf = [];\r\n                    let outer_radius = 2*radius + 2;\r\n                    let stroke_width = 1;\r\n                    let legend_conf = 0.66;\r\n                    for (let i = 3; i < 5; i++){\r\n                        let background_enter = legend_pie.append(\"path\").attr(\"class\",\"arc_\"+i)\r\n                        let background = legend_pie.select(\"path.arc_\"+i);\r\n                        let background_enter_update  = background_enter.merge(background);\r\n                        background_enter_update\r\n                        .style(\"fill\", function(d:any){\r\n                            if(i===3){\r\n                                return \"#000\";\r\n                            }else if(i===4){\r\n                                return \"#fff\";\r\n                            }\r\n                            //return getCoraNodeColor(i,2);\r\n                        })\r\n                        .attr(\"d\", function(d:any){\r\n                            var arc_data =[\r\n                                {\r\n                                    \"index\":0,\r\n                                    \"value\":legend_conf\r\n                                },\r\n                                {\r\n                                    \"index\":1,\r\n                                    \"value\":1 - legend_conf\r\n                                }\r\n                            ] ;\r\n                            \r\n                            \r\n                            var arcs = ori_arcs_conf(arc_data);\r\n                            return getArcConf(outer_radius*legned_scale, stroke_width*legned_scale)(arcs[i-3])\r\n                        });\r\n                        overall_background_conf.push(background_enter_update);\r\n                        // ----- Render Legend Text\r\n                        for(let i = 0; i<3; i++){\r\n                            //overall_background.push(background_enter_update);\r\n                \r\n                            let start_point = [1.5*legned_scale*radius*Math.sin((+120*i)/180*Math.PI), 1.5*legned_scale*radius*(-Math.cos((+120*i)/180*Math.PI))]\r\n                            let middle_point = [1.5*legned_scale*radius*Math.sin((+120*i)/180*Math.PI), 4.5*legned_scale*radius*(-Math.cos((+120*i)/180*Math.PI))+legend_text_setting[i+1][\"y_offset\"]]\r\n                \r\n                            if(i===1){\r\n                                middle_point= [4.5*legned_scale*radius*Math.sin((+120*i)/180*Math.PI), 4.5*legned_scale*radius*(-Math.cos((+120*i)/180*Math.PI))+legend_text_setting[i+1][\"y_offset\"]]\r\n                            }else{\r\n                \r\n                            }\r\n                            let end_point = [4.5*legned_scale*radius*Math.sin((+60)/180*Math.PI) ,4.5*legned_scale*radius*(-Math.cos((+120*i)/180*Math.PI))+legend_text_setting[i+1][\"y_offset\"]]\r\n                \r\n                            legend_pie.append(\"path\")\r\n                                .attr(\"stroke\", \"#222\")\r\n                                .attr(\"stroke-width\", 1)\r\n                                .attr(\"d\", constructPathOnNodeList([start_point,middle_point, end_point]))\r\n                                .attr(\"fill\", \"none\")\r\n                            legend_pie.append(\"text\")\r\n                                .attr(\"x\", end_point[0])\r\n                                .attr(\"y\", end_point[1])\r\n                                .attr(\"text-anchor\", legend_text_setting[i+1][\"text-anchor\"])\r\n                                .attr(\"dominant-baseline\", legend_text_setting[i+1][\"dominant-baseline\"])\r\n                                .text(legend_text_setting[i+1][\"text\"])\r\n                        }\r\n                        \r\n                    \r\n                        let gt_x = 4.5*legned_scale*radius*Math.sin((+60)/180*Math.PI);\r\n                        let gt_y = 4.5*legned_scale*radius*(-Math.cos((+60)/180*Math.PI))+legend_text_setting[0][\"y_offset\"];\r\n                        legend_pie.append(\"line\")\r\n                                .attr(\"stroke\", \"#222\")\r\n                                .attr(\"stroke-width\", 1)\r\n                                .attr(\"x1\", 0)\r\n                                .attr(\"y1\", 0)\r\n                                .attr(\"x2\", gt_x)\r\n                                .attr(\"y2\", gt_y);\r\n                        legend_pie.append(\"text\")\r\n                                .attr(\"x\", gt_x)\r\n                                .attr(\"y\", gt_y)\r\n                                .attr(\"text-anchor\", legend_text_setting[0][\"text-anchor\"])\r\n                                .attr(\"dominant-baseline\", legend_text_setting[0][\"dominant-baseline\"])\r\n                                .text(legend_text_setting[0][\"text\"])\r\n                        gt_x = 3.5*legned_scale*radius*Math.sin((+90)/180*Math.PI);\r\n                        gt_y = 3.5*legned_scale*radius*(-Math.cos((+90)/180*Math.PI))+legend_text_setting[4][\"y_offset\"];\r\n                        legend_pie.append(\"line\")\r\n                                .attr(\"stroke\", \"#222\")\r\n                                .attr(\"stroke-width\", 1)\r\n                                .attr(\"x1\", outer_radius*legned_scale + (stroke_width/2)*legned_scale)\r\n                                .attr(\"y1\", 0)\r\n                                .attr(\"x2\", gt_x)\r\n                                .attr(\"y2\", gt_y);\r\n                        legend_pie.append(\"text\")\r\n                                .attr(\"x\", gt_x)\r\n                                .attr(\"y\", gt_y)\r\n                                .attr(\"text-anchor\", legend_text_setting[4][\"text-anchor\"])\r\n                                .attr(\"dominant-baseline\", legend_text_setting[4][\"dominant-baseline\"])\r\n                                .text(legend_text_setting[4][\"text\"])\r\n                    }\r\n                }else if(showMode === 2){\r\n                    \r\n                    var legend_svg = top_svg.append(\"g\")\r\n                        .attr(\"width\", 100)\r\n                        .attr(\"height\", 70)\r\n                        .attr(\"transform\",\"translate(\"+legend_pie_x+\",\"+legend_pie_y+\")\")\r\n                    \r\n                    let legend_x = 30;\r\n                    let legend_y = 45;\r\n                    let legned_scale = 2;\r\n                    this.refresh_number = this.refresh_number + 1;\r\n                    let legend_pie_all = legend_svg.selectAll(\"g.legend_pie\")\r\n                                    .data([this.refresh_number], function(d:any){\r\n                                        return d;\r\n                                    });\r\n                        legend_pie_all.exit().remove();\r\n                    //console.log(\"Refreshnumber\",this.refresh_number,pieName);\r\n                    let legend_pie = legend_pie_all.enter().append(\"g\")\r\n                                    .attr(\"class\", \"legend_pie\")\r\n                                    .attr(\"transform\", \"translate(\"+legend_x+\",\"+legend_y+\")\")\r\n                    \r\n                      // Render Circle\r\n                    let legend_Color = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\"];\r\n                    legend_pie.append(\"circle\")\r\n                    .attr(\"class\",\"proj_outer_circle\")\r\n                    .attr(\"r\", radius*2*legned_scale)\r\n                    .attr(\"fill\", function(d:any) { return \"white\"; });\r\n                   \r\n            \r\n                    let legend_text_setting = [\r\n                        {\r\n                            \"text\":\"DEG\",\r\n                            \"text-anchor\":\"begin\",\r\n                            \"dominant-baseline\":\"central\",\r\n                            \"y_offset\":+16\r\n                        },\r\n                        {\r\n                            \"text\":\"CGTNGT\",\r\n                            \"text-anchor\":\"begin\",\r\n                            \"dominant-baseline\":\"central\",\r\n                            \"y_offset\":+16\r\n                        },\r\n                        {\r\n                            \"text\":\"CGTNPT\",\r\n                            \"text-anchor\":\"begin\",\r\n                            \"dominant-baseline\":\"central\",\r\n                            \"y_offset\":+0\r\n                        },\r\n                        {\r\n                            \"text\":\"CPTNGT\",\r\n                            \"text-anchor\":\"begin\",\r\n                            \"dominant-baseline\":\"central\",\r\n                            \"y_offset\":+18\r\n                        },\r\n                        {\r\n                            \"text\":\"CPTNPT\",\r\n                            \"text-anchor\":\"begin\",\r\n                            \"dominant-baseline\":\"central\",\r\n                            \"y_offset\":-22\r\n                        },\r\n                    ];\r\n                    let dataValues:any[] = [0.8,0.8,0.8,0.8,0.8];\r\n                    \r\n                    let coordinates:any[] = [];\r\n                    let polyradius = radius * 2*legned_scale;\r\n                    let nclass = dataValues.length;\r\n                    for(let i = 0 ; i<nclass; i ++){\r\n                        coordinates.push([dataValues[i]*polyradius*Math.sin(i/nclass*Math.PI*2), -dataValues[i]*polyradius*Math.cos(i/nclass*Math.PI*2)]);\r\n                    }\r\n                    let pointstr = \"\";\r\n                    for(var pti=0;pti<coordinates.length;pti++){\r\n                        pointstr=pointstr+coordinates[pti][0]+\",\"+coordinates[pti][1]+\" \";\r\n                    }\r\n                    let defaultPointStr = pointstr;\r\n                    legend_pie.append(\"polygon\")\r\n                    .attr(\"class\",\"sp_polygon\")\r\n                    .attr(\"points\", defaultPointStr)\r\n                    .style(\"fill\", legend_Color[0]);\r\n                    // ----- Render Legend Text\r\n                    for(let i = 0; i<5; i++){\r\n                        //overall_background.push(background_enter_update);\r\n\r\n                        let start_point = [1.5*legned_scale*radius*Math.sin((+72*i)/180*Math.PI), 1.5*legned_scale*radius*(-Math.cos((+72*i)/180*Math.PI))]\r\n                        let middle_point = [1.5*legned_scale*radius*Math.sin((+72*i)/180*Math.PI), 4.5*legned_scale*radius*(-Math.cos((+72*i)/180*Math.PI))+legend_text_setting[i][\"y_offset\"]]\r\n\r\n                       /* if(i===1){\r\n                            middle_point= [4.5*legned_scale*radius*Math.sin((+72*i)/180*Math.PI), 4.5*legned_scale*radius*(-Math.cos((+72*i)/180*Math.PI))+legend_text_setting[i][\"y_offset\"]]\r\n                        }else{\r\n\r\n                        }*/\r\n                        let end_point = [4.5*legned_scale*radius*Math.sin((+72)/180*Math.PI) ,4.5*legned_scale*radius*(-Math.cos((+72*i)/180*Math.PI))+legend_text_setting[i][\"y_offset\"]]\r\n\r\n                        legend_pie.append(\"path\")\r\n                            .attr(\"stroke\", \"#222\")\r\n                            .attr(\"stroke-width\", 1)\r\n                            .attr(\"d\", constructPathOnNodeList([start_point,middle_point, end_point]))\r\n                            .attr(\"fill\", \"none\")\r\n                        legend_pie.append(\"text\")\r\n                            .attr(\"x\", end_point[0])\r\n                            .attr(\"y\", end_point[1])\r\n                            .attr(\"text-anchor\", legend_text_setting[i][\"text-anchor\"])\r\n                            .attr(\"dominant-baseline\", legend_text_setting[i][\"dominant-baseline\"])\r\n                            .text(legend_text_setting[i][\"text\"])\r\n                    }\r\n\r\n\r\n                }else if(showMode === 3){\r\n                    var legend_svg = top_svg.append(\"g\")\r\n                        .attr(\"width\", 100)\r\n                        .attr(\"height\", 70)\r\n                        .attr(\"transform\",\"translate(\"+legend_pie_x+\",\"+legend_pie_y+\")\")\r\n                    \r\n                    let legend_x = 20;\r\n                    let legend_y = 30;\r\n                    let legned_scale = 2;\r\n                    this.refresh_number = this.refresh_number + 1;\r\n                    let legend_pie_all = legend_svg.selectAll(\"g.legend_pie\")\r\n                                    .data([this.refresh_number], function(d:any){\r\n                                        return d;\r\n                                    });\r\n                        legend_pie_all.exit().remove();\r\n                    //console.log(\"Refreshnumber\",this.refresh_number,pieName);\r\n                    let legend_Color = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\"];\r\n\r\n                    let legend_pie = legend_pie_all.enter().append(\"g\")\r\n                        .attr(\"class\", \"legend_pie\")\r\n                        .attr(\"transform\", \"translate(\"+legend_x+\",\"+legend_y+\")\")\r\n                    let rect_width = radius*1.5*legned_scale;\r\n                    let rect_height = radius*3*legned_scale;\r\n                    legend_pie.append(\"rect\")\r\n                    .attr(\"class\",\"gnnrect\")\r\n                    .attr(\"x\",-rect_width)\r\n                    .attr(\"y\", -rect_height / 2)\r\n                    .attr(\"width\", rect_width)\r\n                    .attr(\"height\", rect_height)\r\n                    .attr(\"fill\", legend_Color[0]);\r\n                    let legend_spd_info = [0, 0.7, 0.2, 0.1];\r\n                    for(let i = 0; i<4; i++){\r\n                        let rect_enter = node_enter.append(\"rect\").attr(\"class\",\"rect_\"+i);\r\n                        let rects = nodes.select(\"rect.rect_\"+i);\r\n                        let rect_enter_update = rect_enter.merge(rects);\r\n                        legend_pie.append(\"rect\")\r\n                        .attr(\"class\",\"rect_\"+i)\r\n                        .attr(\"x\", function(d:any){\r\n                            return 0\r\n                        })\r\n                        .attr(\"y\", function(d:any){\r\n                            let culmulative_proportion = 0;\r\n                            for(let j= 0 ; j<i; j++){\r\n                                culmulative_proportion = culmulative_proportion + legend_spd_info[j];\r\n                            }\r\n                            return culmulative_proportion*rect_height-rect_height / 2\r\n                        })\r\n                        .attr(\"width\",function(d:any){\r\n                            //return rect_width*d.data.Spd_node_info[i];\r\n                            return rect_width;\r\n                        })\r\n                        .attr(\"height\", function(d:any){\r\n                            return rect_height*legend_spd_info[i];\r\n                        })\r\n                        .attr(\"fill\", function(d:any){return getCoraNodeColor(i,2);});\r\n                    }\r\n                      // Render Circle\r\n                   \r\n            \r\n                    let legend_text_setting = [\r\n                        {\r\n                            \"text\":\"P1\",\r\n                            \"text-anchor\":\"begin\",\r\n                            \"dominant-baseline\":\"central\",\r\n                            \"y_offset\":0\r\n                        },\r\n                        {\r\n                            \"text\":\"SPD\",\r\n                            \"text-anchor\":\"begin\",\r\n                            \"dominant-baseline\":\"central\",\r\n                            \"y_offset\":0\r\n                        }\r\n                    ];\r\n                    \r\n                    // ----- Render Legend Text\r\n                    for(let i = 0; i<2; i++){\r\n                        //overall_background.push(background_enter_update);\r\n                        let start_point:any=[], middle_point:any=[], end_point:any=[];\r\n                        if(i===0){\r\n                            start_point = [-0.5*rect_width, 0]\r\n                            middle_point = [-0.5*rect_width, -rect_height]\r\n                            end_point = [1.5*rect_width,-rect_height]\r\n\r\n                        }else if(i===1){\r\n                            start_point = [+0.5*rect_width, 0]\r\n                            middle_point = [+0.5*rect_width, 0]\r\n                            end_point = [1.5*rect_width,0]\r\n                        }\r\n                        \r\n                       /* if(i===1){\r\n                            middle_point= [4.5*legned_scale*radius*Math.sin((+72*i)/180*Math.PI), 4.5*legned_scale*radius*(-Math.cos((+72*i)/180*Math.PI))+legend_text_setting[i][\"y_offset\"]]\r\n                        }else{\r\n\r\n                        }*/\r\n\r\n                        legend_pie.append(\"path\")\r\n                            .attr(\"stroke\", \"#222\")\r\n                            .attr(\"stroke-width\", 1)\r\n                            .attr(\"d\", constructPathOnNodeList([start_point,middle_point, end_point]))\r\n                            .attr(\"fill\", \"none\")\r\n                        legend_pie.append(\"text\")\r\n                            .attr(\"x\", end_point[0])\r\n                            .attr(\"y\", end_point[1])\r\n                            .attr(\"text-anchor\", legend_text_setting[i][\"text-anchor\"])\r\n                            .attr(\"dominant-baseline\", legend_text_setting[i][\"dominant-baseline\"])\r\n                            .text(legend_text_setting[i][\"text\"])\r\n                    }\r\n                }else if(showMode === 4){\r\n                    var legend_svg = top_svg.append(\"g\")\r\n                    .attr(\"width\", 100)\r\n                    .attr(\"height\", 70)\r\n                    .attr(\"transform\",\"translate(\"+legend_pie_x+\",\"+legend_pie_y+\")\")\r\n                \r\n                    let legend_x = 20;\r\n                    let legend_y = 30;\r\n                    let legned_scale = 2;\r\n                    this.refresh_number = this.refresh_number + 1;\r\n                    let legend_pie_all = legend_svg.selectAll(\"g.legend_pie\")\r\n                                    .data([this.refresh_number], function(d:any){\r\n                                        return d;\r\n                                    });\r\n                        legend_pie_all.exit().remove();\r\n                    //console.log(\"Refreshnumber\",this.refresh_number,pieName);\r\n                    let legend_Color = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\"];\r\n\r\n                    let legend_pie = legend_pie_all.enter().append(\"g\")\r\n                        .attr(\"class\", \"legend_pie\")\r\n                        .attr(\"transform\", \"translate(\"+legend_x+\",\"+legend_y+\")\")\r\n                    let rect_width = radius*1.5*legned_scale;\r\n                    let rect_height = radius*3*legned_scale;\r\n                    legend_pie.append(\"rect\")\r\n                    .attr(\"class\",\"gnnrect\")\r\n                    .attr(\"x\",-rect_width)\r\n                    .attr(\"y\", -rect_height / 2)\r\n                    .attr(\"width\", rect_width)\r\n                    .attr(\"height\", rect_height)\r\n                    .attr(\"fill\", legend_Color[0]);\r\n                    let topk = 5;\r\n                    let legend_kfs_len:any = [1,0.9,0.8,0.7,0.6];\r\n                    let individual_proportion = 1/ topk;             \r\n                    for(let i = 0; i<topk; i++){\r\n                        let rect_enter = node_enter.append(\"rect\").attr(\"class\",\"rect_\"+i);\r\n                        let rects = nodes.select(\"rect.rect_\"+i);\r\n                        let rect_enter_update = rect_enter.merge(rects);\r\n                        legend_pie.append(\"rect\")\r\n                        .attr(\"class\",\"rect_\"+i)\r\n                        .attr(\"x\", function(d:any){\r\n                            return 0\r\n                        })\r\n                        .attr(\"y\", function(d:any){\r\n                            let culmulative_proportion = individual_proportion * i;\r\n                            return culmulative_proportion*rect_height-rect_height / 2\r\n                        })\r\n                        .attr(\"width\",function(d:any){\r\n                            //return rect_width*d.data.Spd_node_info[i];\r\n                            return rect_width*legend_kfs_len[i];\r\n                        })\r\n                        .attr(\"height\", function(d:any){\r\n                            return rect_height*individual_proportion;\r\n                        })\r\n                        .attr(\"fill\", function(d:any){return getCoraNodeColor(i,2);});\r\n                    }\r\n                    // Render Circle\r\n                \r\n            \r\n                    let legend_text_setting = [\r\n                        {\r\n                            \"text\":\"P1\",\r\n                            \"text-anchor\":\"begin\",\r\n                            \"dominant-baseline\":\"central\",\r\n                            \"y_offset\":0\r\n                        },\r\n                        {\r\n                            \"text\":\"KFS\",\r\n                            \"text-anchor\":\"begin\",\r\n                            \"dominant-baseline\":\"central\",\r\n                            \"y_offset\":0\r\n                        }\r\n                    ];\r\n                    \r\n                    // ----- Render Legend Text\r\n                    for(let i = 0; i<2; i++){\r\n                        //overall_background.push(background_enter_update);\r\n                        let start_point:any=[], middle_point:any=[], end_point:any=[];\r\n                        if(i===0){\r\n                            start_point = [-0.5*rect_width, 0]\r\n                            middle_point = [-0.5*rect_width, -rect_height]\r\n                            end_point = [1.5*rect_width,-rect_height]\r\n\r\n                        }else if(i===1){\r\n                            start_point = [+0.5*rect_width, 0]\r\n                            middle_point = [+0.5*rect_width, 0]\r\n                            end_point = [1.5*rect_width,0]\r\n                        }\r\n                        \r\n                    /* if(i===1){\r\n                            middle_point= [4.5*legned_scale*radius*Math.sin((+72*i)/180*Math.PI), 4.5*legned_scale*radius*(-Math.cos((+72*i)/180*Math.PI))+legend_text_setting[i][\"y_offset\"]]\r\n                        }else{\r\n\r\n                        }*/\r\n\r\n                        legend_pie.append(\"path\")\r\n                            .attr(\"stroke\", \"#222\")\r\n                            .attr(\"stroke-width\", 1)\r\n                            .attr(\"d\", constructPathOnNodeList([start_point,middle_point, end_point]))\r\n                            .attr(\"fill\", \"none\")\r\n                        legend_pie.append(\"text\")\r\n                            .attr(\"x\", end_point[0])\r\n                            .attr(\"y\", end_point[1])\r\n                            .attr(\"text-anchor\", legend_text_setting[i][\"text-anchor\"])\r\n                            .attr(\"dominant-baseline\", legend_text_setting[i][\"dominant-baseline\"])\r\n                            .text(legend_text_setting[i][\"text\"])\r\n                    }\r\n                }\r\n                \r\n            }\r\n            function handleTitleMouseOut(this:any){\r\n              hiddenTooltip();\r\n            }\r\n            \r\n        let clip_name = \"clip_\"+this.props.id;\r\n        let clip_path_name = \"url(#\"+clip_name+\")\";\r\n            svg.append(\"defs\")\r\n            .append(\"clipPath\")\r\n            .attr(\"id\",clip_name)\r\n            .append(\"rect\")\r\n            .attr(\"x\",0)\r\n            .attr(\"y\",0)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height);\r\n            svg.attr(\"clip-path\", clip_path_name);\r\n        let trans = d3.transition()\r\n                    .duration(1000)\r\n                    .ease(d3.easeLinear);\r\n        var nodes = svg\r\n            .selectAll(\"g.nodes\")\r\n            .data(point_array,function(d:any,i:any){\r\n                return \"\"+d.data.Data_id;\r\n            });\r\n        //console.log(\"point_array\", point_array);\r\n        //console.log(\"nodes enter, update, exit\", nodes.enter(), nodes, nodes.exit());\r\n            \r\n        var node_enter = nodes.enter().append(\"g\").attr(\"class\",\"nodes\");\r\n        var node_enter_update = nodes.merge(node_enter).attr(\"opacity\",0.9);\r\n        nodes.exit().remove();\r\n       \r\n        function getArc(radius:number){\r\n            return d3.arc()\r\n            .innerRadius(radius)\r\n            .outerRadius(radius*2);\r\n        }\r\n        function getVariableArc(radius:number, outer_radius:number){\r\n            return d3.arc()\r\n            .innerRadius(radius)\r\n            .outerRadius(outer_radius);\r\n        }\r\n        function getArcConf(radius:number, stroke_width:number){\r\n            return d3.arc()\r\n            .innerRadius(radius)\r\n            .outerRadius(stroke_width+radius);\r\n        }\r\n        let radius = 3;\r\n        let radius_gap = 0.3;\r\n        if(showMode === 3 || showMode === 4){\r\n\r\n        }else{\r\n            var outer_circles_enter = node_enter.append(\"circle\").attr(\"class\",\"proj_outer_circle\");\r\n            var outer_circles = nodes.select(\"circle.proj_outer_circle\");\r\n            var outer_circles_enter_update = outer_circles_enter.merge(outer_circles);\r\n    \r\n            \r\n            outer_circles_enter_update//.transition(trans)\r\n                        .attr(\"r\", function(d:any){\r\n                            return radius*2\r\n                        })\r\n                        .attr(\"fill\", function(d:any) { return d.data.Color[4]; });\r\n        }\r\n        \r\n        let rect_scale = 4.5;\r\n        if(showMode === 1){\r\n            // 1 -> ground truth label / prediction label\r\n            \r\n            var arc_data = [{\r\n                \"index\":0,\r\n                \"value\":1/3\r\n            }, {\r\n                \"index\":1,\r\n                \"value\":1/3\r\n            }, {\r\n                \"index\":2,\r\n                \"value\":1/3\r\n            }];\r\n            var ori_arcs = d3.pie()\r\n            .startAngle((-60/180) * Math.PI)\r\n            .endAngle((2-60/180) * Math.PI)\r\n            .value(function(a:any){\r\n                return a.value;\r\n            })\r\n            .sort(function(a:any, b:any) {\r\n                return a.index<b.index;\r\n            });\r\n            var arcs = ori_arcs(arc_data);\r\n            let overall_background = [];\r\n            for (let i = 0; i < 3; i++){\r\n                let background_enter = node_enter.append(\"path\").attr(\"class\",\"arc_\"+i)\r\n                let background = nodes.select(\"path.arc_\"+i);\r\n                let background_enter_update  = background_enter.merge(background);\r\n                background_enter_update\r\n                .style(\"fill\", function(d:any){\r\n                    return d.data.Color[i+1]\r\n                })\r\n                .attr(\"d\", function(d:any){\r\n                    return getArc(radius)(arcs[i])\r\n                });\r\n                overall_background.push(background_enter_update);\r\n    \r\n            }\r\n            \r\n            var ori_arcs_conf = d3.pie()\r\n            .startAngle((0/180) * Math.PI)\r\n            .endAngle((2-0/180) * Math.PI)\r\n            .value(function(a:any){\r\n                return a.value;\r\n            })\r\n            .sort(function(a:any, b:any) {\r\n                return a.index<b.index;\r\n            });\r\n            \r\n            let overall_background_conf = [];\r\n            let outer_radius = 2*radius + 2;\r\n            let stroke_width = 1;\r\n            for (let i = 3; i < 5; i++){\r\n                let background_enter = node_enter.append(\"path\").attr(\"class\",\"arc_\"+i)\r\n                let background = nodes.select(\"path.arc_\"+i);\r\n                let background_enter_update  = background_enter.merge(background);\r\n                background_enter_update\r\n                .style(\"fill\", function(d:any){\r\n                    if(i===3){\r\n                        return \"#000\";\r\n                    }else if(i===4){\r\n                        return \"#fff\";\r\n                    }\r\n                    //return getCoraNodeColor(i,2);\r\n                })\r\n                .attr(\"d\", function(d:any){\r\n                    var arc_data =[\r\n                        {\r\n                            \"index\":0,\r\n                            \"value\":d.data.GCN_Confidence\r\n                        },\r\n                        {\r\n                            \"index\":1,\r\n                            \"value\":1 - d.data.GCN_Confidence\r\n                        }\r\n                    ] ;\r\n                    \r\n                    \r\n                    var arcs = ori_arcs_conf(arc_data);\r\n                    return getArcConf(outer_radius, stroke_width)(arcs[i-3])\r\n                });\r\n                overall_background_conf.push(background_enter_update);\r\n    \r\n            }\r\n\r\n        }else if(showMode === 3){\r\n            // 3 -> shortest path distance train nodes label distribution\r\n            /*\r\n            var ori_arcs = d3.pie()\r\n            .startAngle((0/180) * Math.PI)\r\n            .endAngle((2-0/180) * Math.PI)\r\n            .value(function(a:any){\r\n                return a.value;\r\n            })\r\n            .sort(function(a:any, b:any) {\r\n                return a.index<b.index;\r\n            });\r\n            \r\n            let overall_background = [];\r\n            for (let i = 0; i < num_class; i++){\r\n                let background_enter = node_enter.append(\"path\").attr(\"class\",\"arc_\"+i)\r\n                let background = nodes.select(\"path.arc_\"+i);\r\n                let background_enter_update  = background_enter.merge(background);\r\n                background_enter_update\r\n                .style(\"fill\", function(d:any){\r\n                    return getCoraNodeColor(i,2);\r\n                })\r\n                .attr(\"d\", function(d:any){\r\n                    var arc_data = d.data.Spd_node_info.map((cc:any,index:number)=>{\r\n                        return {\r\n                            \"index\":index,\r\n                            \"value\":cc\r\n                        }\r\n                    })\r\n                    var arcs = ori_arcs(arc_data);\r\n                    return getArc(radius)(arcs[i])\r\n                });\r\n                overall_background.push(background_enter_update);\r\n    \r\n            }*/\r\n            \r\n            let rect_width = radius*rect_scale/2;\r\n            let rect_height = radius*rect_scale;\r\n            let gnnrect_enter = node_enter.append(\"rect\").attr(\"class\",\"gnnrect\");\r\n            let gnnrects = nodes.select(\"rect.gnnrect\");\r\n            let gnnrect_enter_update = gnnrect_enter.merge(gnnrects);\r\n            gnnrect_enter_update\r\n            .attr(\"x\",-rect_width)\r\n            .attr(\"y\", -rect_height / 2)\r\n            .attr(\"width\", rect_width)\r\n            .attr(\"height\", rect_height)\r\n            .attr(\"fill\", function(d:any){return d.data.Color[1]});\r\n            for(let i = 0; i<num_class; i++){\r\n                let rect_enter = node_enter.append(\"rect\").attr(\"class\",\"rect_\"+i);\r\n                let rects = nodes.select(\"rect.rect_\"+i);\r\n                let rect_enter_update = rect_enter.merge(rects);\r\n                rect_enter_update\r\n                .attr(\"x\", function(d:any){\r\n                    //let culmulative_proportion = 0;\r\n                    //for(let j= 0 ; j<i; j++){\r\n                    //    culmulative_proportion = culmulative_proportion + d.data.Spd_node_info[j];\r\n                   // }\r\n                    return 0\r\n                })\r\n                .attr(\"y\", function(d:any){\r\n                    let culmulative_proportion = 0;\r\n                    for(let j= 0 ; j<i; j++){\r\n                        culmulative_proportion = culmulative_proportion + d.data.Spd_node_info[j];\r\n                    }\r\n                    return culmulative_proportion*rect_height-rect_height / 2\r\n                })\r\n                .attr(\"width\",function(d:any){\r\n                    //return rect_width*d.data.Spd_node_info[i];\r\n                    return rect_width;\r\n                })\r\n                .attr(\"height\", function(d:any){\r\n                    return rect_height*d.data.Spd_node_info[i];\r\n                })\r\n                .attr(\"fill\", function(d:any){return getCoraNodeColor(i,2);});\r\n            }\r\n            \r\n\r\n        }else if(showMode === 4){\r\n            // 4 -> topkfs train nodes label distribution\r\n            // Plan A\r\n            /*\r\n            var ori_arcs = d3.pie()\r\n            .startAngle((0/180) * Math.PI)\r\n            .endAngle((2-0/180) * Math.PI)\r\n            .value(function(a:any){\r\n                return a.value;\r\n            })\r\n            .sort(function(a:any, b:any) {\r\n                return a.index<b.index;\r\n            });\r\n            \r\n            let overall_background = [];\r\n            for (let i = 0; i < num_class; i++){\r\n                let background_enter = node_enter.append(\"path\").attr(\"class\",\"arc_\"+i)\r\n                let background = nodes.select(\"path.arc_\"+i);\r\n                let background_enter_update  = background_enter.merge(background);\r\n                background_enter_update\r\n                .style(\"fill\", function(d:any){\r\n                    return getCoraNodeColor(i,2);\r\n                })\r\n                .attr(\"d\", function(d:any){\r\n                    var arc_data = d.data.Topkfs_node_info.map((cc:any,index:number)=>{\r\n                        return {\r\n                            \"index\":index,\r\n                            \"value\":cc\r\n                        }\r\n                    })\r\n                    var arcs = ori_arcs(arc_data);\r\n                    return getArc(radius)(arcs[i])\r\n                });\r\n                overall_background.push(background_enter_update);\r\n    \r\n            }\r\n            */\r\n           /// Plan B\r\n           /*\r\n           var ori_arcs = d3.pie()\r\n            .startAngle((0/180) * Math.PI)\r\n            .endAngle((2-0/180) * Math.PI)\r\n            .value(function(a:any){\r\n                return a.value;\r\n            })\r\n            .sort(function(a:any, b:any) {\r\n                return a.index<b.index;\r\n            });\r\n            let arc_data:any = [];\r\n            \r\n            let topk = 5;\r\n            for(let i = 0; i<topk;i++){\r\n                arc_data.push({\r\n                    \"index\":i,\r\n                    \"value\":1/topk\r\n                })\r\n            }\r\n            let overall_background = [];\r\n            for (let i = 0; i < topk; i++){\r\n                let background_enter = node_enter.append(\"path\").attr(\"class\",\"arc_\"+i)\r\n                let background = nodes.select(\"path.arc_\"+i);\r\n                let background_enter_update  = background_enter.merge(background);\r\n                background_enter_update\r\n                .style(\"fill\", function(d:any){\r\n                    let node_info = d.data.Topkfs_nodes;\r\n                    let label = node_info[i].anchor_label;\r\n                    return getCoraNodeColor(label,2);\r\n                })\r\n                .attr(\"d\", function(d:any){\r\n                    let max_feature_similarity = 0;\r\n\r\n                    for(let j = 0; j<topk;j++){\r\n                        let sim = d.data.Topkfs_nodes[j].anchor_similarity;\r\n                        if(max_feature_similarity<sim){\r\n                            max_feature_similarity = sim;\r\n                        }\r\n                    }\r\n                    let target_sim = d.data.Topkfs_nodes[i].anchor_similarity;\r\n                    if(max_feature_similarity>0){\r\n                        target_sim = target_sim / max_feature_similarity;\r\n                    }\r\n                    let outer_radius = radius + radius * target_sim\r\n                    var arcs = ori_arcs(arc_data);\r\n                    return getVariableArc(radius, outer_radius)(arcs[i])\r\n                });\r\n                overall_background.push(background_enter_update);\r\n    \r\n            }\r\n            */\r\n           // Plan C\r\n           \r\n           let rect_width = radius*rect_scale / 2;\r\n            let rect_height = radius*rect_scale;\r\n            let gnnrect_enter = node_enter.append(\"rect\").attr(\"class\",\"gnnrect\");\r\n            let gnnrects = nodes.select(\"rect.gnnrect\");\r\n            let gnnrect_enter_update = gnnrect_enter.merge(gnnrects);\r\n            gnnrect_enter_update\r\n            .attr(\"x\",-rect_width)\r\n            .attr(\"y\", -rect_height / 2)\r\n            .attr(\"width\", rect_width)\r\n            .attr(\"height\", rect_height)\r\n            .attr(\"fill\", function(d:any){return d.data.Color[1]});\r\n            let topk = 5;\r\n            let individual_proportion = 1/ topk;\r\n            for(let i = 0; i<topk; i++){\r\n                let rect_enter = node_enter.append(\"rect\").attr(\"class\",\"rect_\"+i);\r\n                let rects = nodes.select(\"rect.rect_\"+i);\r\n                let rect_enter_update = rect_enter.merge(rects);\r\n                rect_enter_update\r\n                .attr(\"x\", function(d:any){\r\n                    //let culmulative_proportion = 0;\r\n                    //for(let j= 0 ; j<i; j++){\r\n                    //    culmulative_proportion = culmulative_proportion + d.data.Spd_node_info[j];\r\n                   // }\r\n                    return 0\r\n                })\r\n                .attr(\"y\", function(d:any){\r\n                    let culmulative_proportion = individual_proportion*(i);\r\n                    return culmulative_proportion*rect_height-rect_height / 2\r\n                })\r\n                .attr(\"width\",function(d:any){\r\n                    let max_feature_similarity = 0;\r\n\r\n                    for(let j = 0; j<topk;j++){\r\n                        let sim = d.data.Topkfs_nodes[j].anchor_similarity;\r\n                        if(max_feature_similarity<sim){\r\n                            max_feature_similarity = sim;\r\n                        }\r\n                    }\r\n                    let target_sim = d.data.Topkfs_nodes[i].anchor_similarity;\r\n                    if(max_feature_similarity>0){\r\n                        target_sim = target_sim / max_feature_similarity;\r\n                    }\r\n                    //return rect_width*d.data.Spd_node_info[i];\r\n                    return rect_width * target_sim;\r\n                })\r\n                .attr(\"height\", function(d:any){\r\n                    return rect_height*individual_proportion;\r\n                })\r\n                .attr(\"fill\", function(d:any){\r\n                    let node_info = d.data.Topkfs_nodes;\r\n                    let label = node_info[i].anchor_label;\r\n                    return getCoraNodeColor(label,2);\r\n                });\r\n            }\r\n        }\r\n        let max_shortest_path_distance = additional_info[\"max_shortest_path_distance\"] + 1;\r\n        let max_degree = additional_info[\"max_degree\"];\r\n        function constructPointStr(d:any){\r\n            let dataValues:any[] = [];\r\n            /*\r\n            let sp = d.data.Shortest_Path_Distance_to_Train_Nodes;\r\n            if(sp===\"inf\"){\r\n                sp = max_shortest_path_distance;\r\n            }\r\n            dataValues.push(sp / max_shortest_path_distance);\r\n            */\r\n           let degree = d.data.Real_Degree;\r\n            dataValues.push(degree / max_degree);\r\n            dataValues.push(d.data.CN_consistency.cgt_ngt);\r\n            dataValues.push(d.data.CN_consistency.cgt_npt);\r\n            dataValues.push(d.data.CN_consistency.cpt_ngt);\r\n            dataValues.push(d.data.CN_consistency.cpt_npt);\r\n            let coordinates:any[] = [];\r\n            let polyradius = radius * 2;\r\n            let nclass = dataValues.length;\r\n            for(let i = 0 ; i<nclass; i ++){\r\n                coordinates.push([dataValues[i]*polyradius*Math.sin(i/nclass*Math.PI*2), -dataValues[i]*polyradius*Math.cos(i/nclass*Math.PI*2)]);\r\n            }\r\n            let pointstr = \"\";\r\n            for(var pti=0;pti<coordinates.length;pti++){\r\n                pointstr=pointstr+coordinates[pti][0]+\",\"+coordinates[pti][1]+\" \";\r\n              }\r\n            return pointstr;\r\n\r\n            \r\n        }\r\n        // 2 -> shortest path distance / center neighbor consistency rate.\r\n        if(showMode === 1 ){\r\n            var inner_circles_enter = node_enter.append(\"circle\").attr(\"class\",\"inner_circle\");\r\n            var inner_circles = nodes.select(\"circle.inner_circle\");\r\n            var inner_circles_enter_update = inner_circles_enter.merge(inner_circles);\r\n            if(showMode === 1){\r\n                inner_circles_enter_update//.transition(trans)\r\n                .attr(\"r\", function(d:any){\r\n                    return radius - radius_gap;\r\n                })\r\n                .attr(\"fill\", function(d:any) { return d.data.Color[0]; });\r\n            }else{\r\n                inner_circles_enter_update//.transition(trans)\r\n                .attr(\"r\", function(d:any){\r\n                    return radius - radius_gap;\r\n                })\r\n                .attr(\"fill\", function(d:any) { return d.data.Color[1]; });\r\n            }\r\n        }else if(showMode === 2){\r\n            var polygon_enter = node_enter.append(\"polygon\").attr(\"class\",\"sp_polygon\");\r\n            var polygons = nodes.select(\"polygon.sp_polygon\");\r\n            var polygon_enter_update = polygon_enter.merge(polygons);\r\n            polygon_enter_update\r\n            \r\n            .attr(\"points\",constructPointStr)\r\n            .style(\"fill\", function(d:any){return d.data.Color[0]})\r\n        }\r\n\r\n        var title_enter = node_enter.append(\"title\");\r\n        nodes.select(\"title\").merge(title_enter)\r\n            .text(function(d:any) { return d.data.Data_id; });\r\n        let margin = 40;\r\n        //var  centerx = d3.scaleLinear().range([width / 2 - height / 2 + margin, width / 2 + height / 2 - margin]),\r\n        var centerx = d3.scaleLinear().range([ margin, width - margin]),\r\n            centery = d3.scaleLinear().range([margin, height - margin]);\r\n        let radius_collision =  radius * 2+radius_gap*2;\r\n        if(showMode === 2){\r\n            \r\n        }else if(showMode === 1){\r\n            radius_collision = radius_collision + 3;\r\n        }else if(showMode === 3 || showMode === 4){\r\n            radius_collision = radius * rect_scale / 3 * 2 + radius_gap * rect_scale / 3 * 2;\r\n        }\r\n        // default alphaDecay = 0.005\r\n        // default alpha = 0.1\r\n\r\n        const forcetsne = d3.forceSimulation(point_array)\r\n        \r\n                .alphaDecay(0.005)\r\n                .alpha(0.1)\r\n                .force('tsne', function (alpha:any) {\r\n                    \r\n                    // every time you call this, solution gets better\r\n                    model.step();\r\n\r\n                    // Y is an array of 2-D points that you can plot\r\n                    let pos = model.getSolution();\r\n\r\n                    centerx.domain(d3.extent(pos.map((d:any) => d[0])));\r\n                    centery.domain(d3.extent(pos.map((d:any) => d[1])));\r\n\r\n                    point_array.forEach((d:any, i:any) => {\r\n                        d.x += alpha * (centerx(pos[i][0]) - d.x);\r\n                        d.y += alpha * (centery(pos[i][1]) - d.y);\r\n                    });\r\n                    //console.log(\"tsne step\",alpha);\r\n                    //ticked()\r\n                })\r\n                .force('collide', d3.forceCollide().radius((d:any) => radius_collision))\r\n                .on('tick',ticked);\r\n                \r\n\r\n        let renderLines = this.props.renderLines;\r\n        let counter = 0;\r\n        function ticked() {\r\n            //counter = counter + 1;\r\n            //if(counter>=100 || (counter < 100 && (counter+1) % 5 === 0)){\r\n            //console.log(\"sca ticked\")\r\n            node_enter.merge(nodes)//.transition(trans)\r\n            .attr(\"transform\", function(d:any) {\r\n            return \"translate(\" + d.x + \",\" +  d.y + \")\";\r\n            })\r\n            renderLines()\r\n            //}\r\n            \r\n        }\r\n        \r\n        var lasso_start = function() {\r\n            lasso.items()\r\n                .classed(\"lasso_not_possible\",true)\r\n                .classed(\"lasso_unselected\", false)\r\n                .classed(\"lasso_selected\",false);\r\n        };\r\n\r\n        var lasso_draw = function() {\r\n        \r\n            // Style the possible dots\r\n            lasso.possibleItems()\r\n                .classed(\"lasso_not_possible\",false)\r\n                .classed(\"lasso_unselected\", false)\r\n                .classed(\"lasso_possible\",true);\r\n\r\n            // Style the not possible dot\r\n            lasso.notPossibleItems()\r\n                .classed(\"lasso_not_possible\",true)\r\n                .classed(\"lasso_unselected\", false)\r\n                .classed(\"lasso_possible\",false);\r\n        };\r\n        let onSelectedNodeListChange = this.onSelectedNodeListChange;\r\n        var lasso_end = function() {\r\n            // Reset the color of all dots\r\n            lasso.items()\r\n                .classed(\"lasso_not_possible\",false)\r\n                .classed(\"lasso_possible\",false);\r\n\r\n            // Style the selected dots\r\n            lasso.selectedItems()\r\n                .classed(\"lasso_selected\",true)\r\n\r\n            // Reset the style of the not selected dots\r\n            \r\n            let selectedItemsData = lasso.selectedItems().data();\r\n            let return_result:any;\r\n            lasso.notSelectedItems().data().forEach((d:any)=>{\r\n                d.selected = false;\r\n            })\r\n            lasso.selectedItems().data().forEach((d:any)=>{\r\n                d.selected = true;\r\n            })\r\n            if(selectedItemsData.length === 0){\r\n                return_result = lasso.notSelectedItems().data();\r\n                lasso.notSelectedItems()\r\n                .classed(\"lasso_unselected\", false);\r\n            }else{\r\n                return_result = selectedItemsData;\r\n                lasso.notSelectedItems()\r\n                .classed(\"lasso_unselected\", true);\r\n            }\r\n            console.log(return_result);\r\n            let new_return_result = return_result.map((d:any)=>{\r\n                return d.data.Data_id;\r\n            })\r\n            let new_highlight_node = selectedItemsData.map((d:any)=>{\r\n                return d.data.Data_id;\r\n            })\r\n            onSelectedNodeListChange(new_return_result, new_highlight_node);\r\n        };\r\n        \r\n        var lasso = d3_lasso.default()\r\n            .closePathSelect(true)\r\n            .closePathDistance(100)\r\n            .items(node_enter_update)\r\n            .targetArea(top_top_svg)\r\n            .on(\"start\",lasso_start)\r\n            .on(\"draw\",lasso_draw)\r\n            .on(\"end\",lasso_end);\r\n        \r\n        top_top_svg.call(lasso);\r\n        \r\n        \r\n        \r\n    };\r\n    public updateHighlightStatus(){\r\n        let highlightNodeIdList = this.props.highlightNodeIdList;\r\n        var top_svg = d3.select(\"#\"+\"ScatterPlot_sub_\"+this.props.id);\r\n        var svg = top_svg.select(\"g\");\r\n        var nodes = svg.selectAll(\"g.nodes\")\r\n        var selectedNodes = nodes.filter((d:any)=>{\r\n            if(highlightNodeIdList.indexOf(d.data.Data_id)>=0){\r\n                d.selected = true;\r\n                return true;\r\n            }else{\r\n                d.selected = false;\r\n                return false;\r\n            }\r\n        })\r\n        nodes\r\n            .classed(\"lasso_not_possible\",false)\r\n            .classed(\"lasso_possible\",false)\r\n            .classed(\"lasso_selected\",false)\r\n            ;\r\n        if(highlightNodeIdList.length>0){\r\n            nodes.classed(\"lasso_unselected\", true);\r\n        }else{\r\n            nodes.classed(\"lasso_unselected\",false);\r\n        }\r\n        // Style the selected dots\r\n        selectedNodes\r\n            .classed(\"lasso_unselected\", false)\r\n            .classed(\"lasso_selected\",true)\r\n            \r\n        \r\n    }\r\n    public renderD3(){\r\n\r\n        let {filters, PCPJson} = this.props;\r\n        let selectedNodeList = this.constructSelectedNodeList(filters, PCPJson);\r\n        if(selectedNodeList.length>=300){\r\n            return ;\r\n        }\r\n        var matrix:any[] = [];\r\n        function getSquareDistance(array1:any, array2:any){\r\n            let dis = 0;\r\n            for(let i = 0; i < array1.length; i++){\r\n                dis = dis +  Math.pow(Math.abs(array1[i]-array2[i]),2);\r\n            }\r\n            return dis;\r\n        }\r\n        function transformCNtoList(cn:any){\r\n            return [cn.cgt_ngt, cn.cgt_npt, cn.cpt_ngt, cn.cpt_npt];\r\n\r\n        }\r\n        function getDistance(selected_node_info_a:any, selected_node_info_b:any, additional_info:any, showMode:number){\r\n            // 1 -> ground truth label / prediction label\r\n            // 2 -> shortest path distance / center neighbor consistency rate.\r\n            // 3 -> shortest path distance train nodes label distribution\r\n            // 4 -> topkfs train nodes label distribution\r\n            let dis:number = 0;\r\n            if(showMode=== 1){\r\n                let columns = [\"Ground_Truth_Label\", \"GCN_Prediction_Label\", \"GCN(w/o_adj)_Prediction_Label\", \"GCN(w/o_features)_Prediction_Label\"];\r\n            \r\n                for(let i =0 ;i<columns.length; i++){\r\n                    if(selected_node_info_a[columns[i]]===selected_node_info_b[columns[i]]){\r\n    \r\n                    }else{\r\n                        dis = dis + 1;\r\n                    }\r\n                }\r\n\r\n                let conf_a = selected_node_info_a.GCN_Confidence;\r\n                let conf_b = selected_node_info_b.GCN_Confidence;\r\n                dis = dis + Math.pow(Math.abs(conf_a-conf_b), 2);\r\n\r\n            }else if(showMode === 2){\r\n                let columns = [\"Ground_Truth_Label\"];\r\n            \r\n                for(let i =0 ;i<columns.length; i++){\r\n                    if(selected_node_info_a[columns[i]]===selected_node_info_b[columns[i]]){\r\n    \r\n                    }else{\r\n                        dis = dis + 1;\r\n                    }\r\n                }\r\n                /*\r\n                let spd_a = selected_node_info_a.Shortest_Path_Distance_to_Train_Nodes;\r\n                let spd_b = selected_node_info_b.Shortest_Path_Distance_to_Train_Nodes;\r\n                if(spd_a === \"inf\"){\r\n                    spd_a = additional_info[\"max_shortest_path_distance\"] + 1;\r\n                }\r\n                if(spd_b === \"inf\"){\r\n                    spd_b = additional_info[\"max_shortest_path_distance\"] + 1;\r\n                }\r\n                let  max_spd = additional_info[\"max_shortest_path_distance\"] + 1;\r\n                spd_a = spd_a / max_spd;\r\n                spd_b = spd_b / max_spd;\r\n                \r\n                dis = dis + Math.pow(Math.abs(spd_a-spd_b),2);\r\n                */\r\n               let degree_a = selected_node_info_a.Real_Degree;\r\n               let degree_b = selected_node_info_b.Real_Degree;\r\n               let max_degree = additional_info[\"max_degree\"];\r\n               degree_a = degree_a / max_degree;\r\n               degree_b = degree_b / max_degree;\r\n               dis = dis + Math.pow(Math.abs(degree_a-degree_b), 2);\r\n                let cn_diff = getSquareDistance(transformCNtoList(selected_node_info_a.CN_consistency)\r\n                , transformCNtoList(selected_node_info_b.CN_consistency));\r\n                dis = dis + cn_diff;\r\n            }else if(showMode === 3){\r\n                let columns = [\"GCN_Prediction_Label\"];\r\n            \r\n                for(let i =0 ;i<columns.length; i++){\r\n                    if(selected_node_info_a[columns[i]]===selected_node_info_b[columns[i]]){\r\n    \r\n                    }else{\r\n                        dis = dis + 1;\r\n                    }\r\n                }\r\n                let spd_label_diff = getSquareDistance(selected_node_info_a.Spd_node_info, selected_node_info_b.Spd_node_info);\r\n                dis = dis + spd_label_diff;\r\n            }else if(showMode === 4){\r\n                let columns = [\"GCN_Prediction_Label\"];\r\n            \r\n                for(let i =0 ;i<columns.length; i++){\r\n                    if(selected_node_info_a[columns[i]]===selected_node_info_b[columns[i]]){\r\n    \r\n                    }else{\r\n                        dis = dis + 1;\r\n                    }\r\n                }\r\n                let topk_label_diff = getSquareDistance(selected_node_info_a.Topkfs_node_info, selected_node_info_b.Topkfs_node_info);\r\n                dis = dis + topk_label_diff;\r\n            }\r\n            \r\n            \r\n            \r\n\r\n            /*let mfd_a = selected_node_info_a.Max_feature_similarity;\r\n            let mfd_b = selected_node_info_b.Max_feature_similarity;\r\n            dis = dis + Math.pow(Math.abs(mfd_a-mfd_b),2);\r\n            let mfd_node_info_a = selected_node_info_a.Mfs_node_info;\r\n            let mfd_node_info_b = selected_node_info_b.Mfs_node_info;\r\n            for(let i = 0 ; i<mfd_node_info_a.length; i++){\r\n                dis = dis + Math.pow(Math.abs(mfd_node_info_a[i]-mfd_node_info_b[i]),2);\r\n            }*/\r\n            \r\n            \r\n            \r\n            return Math.sqrt(dis);\r\n        }\r\n        let max_shortest_path_distance = 0;\r\n        let max_degree = 1;\r\n        let additional_info:any = {}\r\n        for(let i = 0; i<selectedNodeList.length; i++){\r\n            let spd:any = selectedNodeList[i].Shortest_Path_Distance_to_Train_Nodes;\r\n            if(spd!== \"inf\"){\r\n                if(spd>max_shortest_path_distance){\r\n                    max_shortest_path_distance=spd;\r\n                }\r\n            }\r\n            let degree = selectedNodeList[i].Real_Degree;\r\n            if(degree>max_degree){\r\n                max_degree = degree;\r\n            }\r\n        }\r\n        let showMode = this.props.showMode;\r\n        additional_info[\"max_shortest_path_distance\"] = max_shortest_path_distance;\r\n        additional_info[\"max_degree\"] = max_degree;\r\n        for(let i = 0; i<selectedNodeList.length; i++){\r\n            let matrix_row:any[] = [];\r\n            for(let j = 0; j<selectedNodeList.length; j++){\r\n                matrix_row.push(getDistance(selectedNodeList[i], selectedNodeList[j], additional_info, showMode));\r\n            }\r\n            matrix.push(matrix_row);\r\n        }\r\n        /*\r\n        var a = mds.convertToMatrix(matrix, true);\r\n        \r\n        var point_array :any = [];\r\n        let updatefunc = this.mappingGraph;\r\n        mds.landmarkMDSAsync(a, 2, function(points:any) {\r\n            points.rowsIter(function(row:any,i:any) {\r\n                let new_row = row;\r\n                if(isNaN(row[0]))\r\n                {   \r\n                    new_row[0] = 0;\r\n                }\r\n                if(isNaN(row[1])){\r\n                    new_row[1] = 0;\r\n                }\r\n                point_array.push(\r\n                    {\r\n                        \"data\":selectedNodeList[i],\r\n                        \"coords\":[new_row[0],new_row[1]]\r\n                    });\r\n                //console.log(row);\r\n            });\r\n            \r\n            updatefunc(point_array,additional_info);\r\n        });\r\n        */\r\n       const model = new tsnejs.tSNE({\r\n            dim: 2,\r\n            perplexity: 30,\r\n        });\r\n        model.initDataDist(matrix);\r\n        // every time you call this, solution gets better\r\n        /*for(let i = 0; i< 30; i++){\r\n            model.step();\r\n        }\r\n        \r\n\r\n        // Y is an array of 2-D points that you can plot\r\n        let pos = model.getSolution();*/\r\n        let initial_x = this.props.width / 2;\r\n        let initial_y = this.props.height / 2;\r\n        var point_array :any = [];\r\n        selectedNodeList.forEach((d:any,i:any)=>{\r\n            point_array.push(\r\n            {\r\n                \"data\":d,\r\n                \"x\":initial_x,\r\n                \"y\":initial_y\r\n            });\r\n        })\r\n        let updatefunc = this.mappingGraph;\r\n        updatefunc(point_array,additional_info, model);\r\n        /*centerx.domain(d3.extent(pos.map((d:any) => d[0])));\r\n        centery.domain(d3.extent(pos.map((d:any) => d[1])));\r\n\r\n        data.forEach((d:any, i:any) => {\r\n            d.x += alpha * (centerx(pos[i][0]) - d.x);\r\n            d.y += alpha * (centery(pos[i][1]) - d.y);\r\n        });*/\r\n\r\n    }\r\n    \r\n    public constructSelectedNodeList(filters:any, PCPJson:any){\r\n        if(getLayoutMode() === 3){\r\n            let data = PCPJson.PSData.slice();\r\n            let filterData:any[] = [];\r\n            \r\n            let filters_key = Object.keys(filters);\r\n            const selected = (d:any)=>{\r\n                if(filters_key.length>0){\r\n                    for(let i = 0; i< filters_key.length;i ++){\r\n                        if(filters[filters_key[i]].indexOf(d[filters_key[i]])<0){\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                }else{\r\n                    return true;\r\n                }\r\n            }\r\n            data.forEach((d:any,index:number)=>{\r\n                if(selected(d)){\r\n                    let dataInstance = d;\r\n                    filterData.push(dataInstance);\r\n                }\r\n            })\r\n            return filterData;\r\n        }else{\r\n            let data = PCPJson[\"PCPData\"].slice();\r\n            let data_index = PCPJson[\"PCPIndex\"].slice();\r\n            const features = PCPJson[\"PCPDimension\"];\r\n            let typedict:any = {};\r\n            features.forEach((d:any)=>{\r\n                typedict[d.name] = d.type;\r\n            })\r\n            let filters_key = Object.keys(filters);\r\n            const selected = (d:any)=>{\r\n                if(filters_key.length>0){\r\n                    for(let i = 0; i< filters_key.length;i ++){\r\n                        if(typedict[filters_key[i]]===\"continuous\" || typedict[filters_key[i]] === \"log\"){\r\n                            if( parseFloat(filters[filters_key[i]][1]) <= parseFloat(d[filters_key[i]]) \r\n                            && parseFloat(d[filters_key[i]])  <= parseFloat(filters[filters_key[i]][0])){\r\n\r\n                            }else{\r\n                                return false;\r\n                            }\r\n                        }else if(typedict[filters_key[i]] === \"ordinal\"){\r\n                            if(filters[filters_key[i]].indexOf(d[filters_key[i]])<0){\r\n                                return false;\r\n                            }\r\n                        }else{\r\n                            console.log(\"unexpected type:\", typedict[filters_key[i]]);\r\n                        }\r\n                        \r\n                    }\r\n                    return true;\r\n                }else{\r\n                    return true;\r\n                }\r\n            }\r\n            let filterData:any[] = [];\r\n            data.forEach((d:any,index:number)=>{\r\n                if(selected(d)){\r\n                    let dataInstance = d;\r\n                    dataInstance.data_id = data_index[index];\r\n                    filterData.push(dataInstance);\r\n                }\r\n            })\r\n            \r\n            return filterData;\r\n        }\r\n    }\r\n    public onShowModeChange(showMode:number){\r\n        this.setState({\r\n            showMode: showMode\r\n        })\r\n    }\r\n    public render() {\r\n        let {selectedNodeIdList,x,y,width,height } = this.props;\r\n        /*\r\n        let showModeOptions = [\r\n            [1, \"GT + 3PT\"],\r\n            [2, \"SP + CN\"],\r\n            [3, \"P1 + SPD\"],\r\n            [4, \"P1 + KFS\"],\r\n        ]\r\n        let generateShowModeSelect = () =>{\r\n            return <Select\r\n                placeholder=\"Select a dataset\"\r\n                value={this.state.showMode  || undefined}\r\n                style={{ width: '100px' }}\r\n                onChange={this.onShowModeChange}\r\n                size=\"small\"\r\n            >\r\n                {showModeOptions.map((d:any)=>(\r\n                    <Option value={d[0]} key={d[0]}>\r\n                        {d[1]}\r\n                    </Option>\r\n                ))}\r\n            </Select>\r\n        }*/\r\n        //console.log(\"Selected Result\", selectedNodeList);\r\n        /*\r\n        if(selectedNodeIdList.length>0){\r\n            return (\r\n            <div>\r\n                <div className=\"ViewTitle\">Projection View\r\n                <div style={{float:'right'}}>\r\n                    Mode: {generateShowModeSelect()} &nbsp;\r\n                     #Nodes: <Tag>{selectedNodeIdList.length}</Tag></div>\r\n                                \r\n                </div>\r\n                <div className=\"ViewBox\">\r\n                    <div id=\"chart\" />\r\n                {(selectedNodeIdList.length<300?(\r\n                <svg\r\n                    style={{ height: \"\"+this.props.height+\"px\", width: \"\"+this.props.width+\"px\" }}\r\n                    id={\"TopSVGChart_ScatterPlot\"}\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                   \r\n                </svg>):<div>\r\n                    Please select [1,300) nodes in Parallel Set View.\r\n                    </div>)}\r\n                </div>\r\n                \r\n            </div>);\r\n        }else{\r\n            return <div />\r\n        }*/\r\n        \r\n            \r\n         return (\r\n         <g id={\"TopSVGChart_ScatterPlot_\"+this.props.id} \r\n         transform={\"translate(\"+x+\",\"+y+\")\"} width={width} height={height}>\r\n        </g>)\r\n                \r\n           \r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport \"./SelectedNodeList.css\";\r\nimport { Table, Pagination, Tag, Button, Select, Switch} from 'antd';\r\nimport {getLayoutMode, compareSelectedNodeIdList, getNodeStatisticStr} from '../../../helper';\r\nimport ProjectionView from './ProjectionView';\r\nconst d3 = require(\"d3\");\r\nexport interface SelectedNodeListProps {\r\n    refreshnumber:number,\r\n    filters:any,\r\n    PCPJson:any,\r\n    changeSelectedNodeIdList: any,\r\n    width:number,\r\n    height: number,\r\n    showSource:boolean,\r\n    changeShowSource:any,\r\n    changePSSelectedNodes:any\r\n}\r\n\r\nexport interface SelectedNodeListState {\r\n    currentPage:number,\r\n    highlightNodeIdList:any,\r\n    enableLines:boolean\r\n\r\n}\r\n\r\nexport default class SelectedNodeList extends React.Component<SelectedNodeListProps, SelectedNodeListState> {\r\n    public prevSelectedNodeIdList:any[] = [];\r\n    public thisSelectedNodeIdList:any[] = [];\r\n    constructor(props: SelectedNodeListProps) {\r\n        super(props);\r\n        this.onChangeHighLightNodeIdList = this.onChangeHighLightNodeIdList.bind(this);\r\n        this.renderLines = this.renderLines.bind(this);\r\n        this.onChangeLines = this.onChangeLines.bind(this);\r\n        //this.mappingGraph = this.mappingGraph.bind(this);\r\n        //this.onSelectedNodeListChange = this.onSelectedNodeListChange.bind(this);\r\n        //this.onRowClick = this.onRowClick.bind(this);\r\n        this.state = {\r\n            //graph_data : []\r\n            currentPage: 1,\r\n            highlightNodeIdList: [],\r\n            enableLines : true\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        \r\n    }\r\n    componentDidUpdate(prevProps:SelectedNodeListProps, prevState:SelectedNodeListState){\r\n        if(!compareSelectedNodeIdList(this.prevSelectedNodeIdList,this.thisSelectedNodeIdList)){\r\n            this.props.changeSelectedNodeIdList(this.thisSelectedNodeIdList)\r\n            this.prevSelectedNodeIdList = this.thisSelectedNodeIdList.slice();\r\n            this.setState({\r\n                highlightNodeIdList: []\r\n            })\r\n        }\r\n        if(this.state.enableLines){\r\n            this.renderLines();\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    public constructSelectedNodeList(filters:any, PCPJson:any){\r\n        if(getLayoutMode() === 3){\r\n            let data = PCPJson.PSData.slice();\r\n            let filterData:any[] = [];\r\n            \r\n            let filters_key = Object.keys(filters);\r\n            const selected = (d:any)=>{\r\n                if(filters_key.length>0){\r\n                    for(let i = 0; i< filters_key.length;i ++){\r\n                        if(filters[filters_key[i]].indexOf(d[filters_key[i]])<0){\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                }else{\r\n                    return true;\r\n                }\r\n            }\r\n            data.forEach((d:any,index:number)=>{\r\n                if(selected(d)){\r\n                    let dataInstance = d;\r\n                    filterData.push(dataInstance);\r\n                }\r\n            })\r\n            return filterData;\r\n        }else{\r\n            let data = PCPJson[\"PCPData\"].slice();\r\n            let data_index = PCPJson[\"PCPIndex\"].slice();\r\n            const features = PCPJson[\"PCPDimension\"];\r\n            let typedict:any = {};\r\n            features.forEach((d:any)=>{\r\n                typedict[d.name] = d.type;\r\n            })\r\n            let filters_key = Object.keys(filters);\r\n            const selected = (d:any)=>{\r\n                if(filters_key.length>0){\r\n                    for(let i = 0; i< filters_key.length;i ++){\r\n                        if(typedict[filters_key[i]]===\"continuous\" || typedict[filters_key[i]] === \"log\"){\r\n                            if( parseFloat(filters[filters_key[i]][1]) <= parseFloat(d[filters_key[i]]) \r\n                            && parseFloat(d[filters_key[i]])  <= parseFloat(filters[filters_key[i]][0])){\r\n\r\n                            }else{\r\n                                return false;\r\n                            }\r\n                        }else if(typedict[filters_key[i]] === \"ordinal\"){\r\n                            if(filters[filters_key[i]].indexOf(d[filters_key[i]])<0){\r\n                                return false;\r\n                            }\r\n                        }else{\r\n                            console.log(\"unexpected type:\", typedict[filters_key[i]]);\r\n                        }\r\n                        \r\n                    }\r\n                    return true;\r\n                }else{\r\n                    return true;\r\n                }\r\n            }\r\n            let filterData:any[] = [];\r\n            data.forEach((d:any,index:number)=>{\r\n                if(selected(d)){\r\n                    let dataInstance = d;\r\n                    dataInstance.data_id = data_index[index];\r\n                    filterData.push(dataInstance);\r\n                }\r\n            })\r\n            \r\n            return filterData;\r\n        }\r\n    }\r\n    public constructDataJson(columns:any,selectedNode:any){\r\n        let data_json:any = {};\r\n        columns.forEach((d:any)=>{\r\n            let sdata = selectedNode[d.dataIndex];\r\n            if(d.dataIndex === \"one_hop_accuracy\"){\r\n               sdata = sdata.toFixed(4);\r\n            }\r\n            data_json[d.title] = sdata;\r\n        })\r\n        return data_json;\r\n    }\r\n    public renderLines(){\r\n        if(this.state.enableLines){\r\n            let highlightNodeIdList = this.state.highlightNodeIdList;\r\n            let all_data = [];\r\n    \r\n            for(let id = 1; id<=4; id++){\r\n                var top_svg = d3.select(\"#\"+\"ScatterPlot_sub_\"+id);\r\n                var svg = top_svg.select(\"g\");\r\n                var nodes = svg.selectAll(\"g.nodes\");\r\n                var point_array_data:any = {};\r\n                nodes.data().forEach((d:any)=>{\r\n                    if(highlightNodeIdList.indexOf(d.data.Data_id)>=0){\r\n                        point_array_data[d.data.Data_id] = {\r\n                            \"x\":d.x,\r\n                            \"y\":d.y\r\n                        }\r\n                    }else{\r\n                    }\r\n                })\r\n                all_data.push({\r\n                    \"id\":id,\r\n                    \"point_array\":point_array_data\r\n                });\r\n            }\r\n            let data_list = [];\r\n            let marginLeft = 20, marginRight = 20;\r\n            let marginTop = 20, marginBottom = 62;\r\n            let projectionHeight = this.props.height - marginBottom - marginTop;\r\n            let gap = 10;\r\n            let projectionWidth = (this.props.width - marginLeft - marginRight) / 4  - gap;\r\n            let successflag = true;\r\n            for(let i = 0; i<highlightNodeIdList.length; i++){\r\n                let node_id = highlightNodeIdList[i];\r\n                let coords = [];\r\n                for(let j = 0 ; j<all_data.length; j++){\r\n                    if(all_data[j][\"point_array\"][node_id]){\r\n                        let startX = marginLeft + (j)*(projectionWidth+gap);\r\n                        let startY = marginTop;\r\n                        let new_x = all_data[j][\"point_array\"][node_id][\"x\"] + startX;\r\n                        let new_y = all_data[j][\"point_array\"][node_id][\"y\"] + startY;\r\n                        //if(j>0){\r\n                        //    let inner_x = startX - gap / 2;\r\n                        //    let inner_y = new_y;\r\n                        //    let inner_coords = [inner_x, inner_y];\r\n                        //    coords.push(inner_coords);\r\n                        //}\r\n                        let new_coords = [new_x, new_y];\r\n                        coords.push(new_coords);\r\n                    }else{\r\n                        successflag = false;\r\n                        break;\r\n                    }\r\n                    \r\n                }\r\n                if(!successflag){\r\n                    break;\r\n                }\r\n                data_list.push({\r\n                    \"node_id\":node_id,\r\n                    \"coords\": coords\r\n                })\r\n            }\r\n            if(!successflag){\r\n                data_list = [];\r\n            }\r\n            //console.log(\"data list\", data_list);\r\n            var connectionPath = d3.select(\"#connectionPath\");\r\n            if(connectionPath){\r\n                var lines = connectionPath.selectAll(\"path\")\r\n                .data(data_list, function(d:any){\r\n                    return d.node_id;\r\n                })\r\n                //console.log(\"line enter, update, exit\", lines.enter(), lines, lines.exit());\r\n                //var lineGenerator = d3.line().curve(d3.curveMonotoneY)\r\n                var lineGenerator = d3.line().curve(d3.curveNatural);\r\n                let constructPointStr = (d:any)=>{\r\n                    /*let str = \"\";\r\n                    for(let i = 0 ; i<d.coords.length; i++){\r\n                        let point = d.coords[i];\r\n                        str = str + point[0]+\",\"+point[1]+\" \";\r\n                    }\r\n                    return str;*/\r\n                    return lineGenerator(d.coords.slice());\r\n                }\r\n               \r\n                var line_enter = lines.enter().append(\"path\");\r\n                var line_enter_update = line_enter.merge(lines);\r\n                lines.exit().remove();\r\n                line_enter_update.attr(\"d\", constructPointStr)\r\n                .style(\"fill\",\"none\")\r\n                .style(\"stroke\",\"#999\")\r\n                .style(\"stroke-width\",1.5)\r\n                .style(\"opacity\", 0.5)\r\n                ;\r\n            }\r\n           \r\n        }\r\n        \r\n    }\r\n    public onChangeHighLightNodeIdList(selectedNodeIdList:any, highlightNodeIdList:any){\r\n        this.props.changeSelectedNodeIdList(selectedNodeIdList.slice());\r\n        this.setState({\r\n            highlightNodeIdList: highlightNodeIdList.slice()\r\n        })\r\n        this.renderLines();\r\n    }\r\n    public onChangeLines(e:any){\r\n        this.setState({\r\n            enableLines : e\r\n        })\r\n    }\r\n    public render() {\r\n        let {filters,PCPJson,changeSelectedNodeIdList,showSource } = this.props;\r\n        //console.log(\"Selected Node List\", filters, PCPJson);\r\n        let selectedNodeIdList:any, selectedNodeList:any ;\r\n        if(PCPJson[\"success\"]){\r\n            selectedNodeList = this.constructSelectedNodeList(filters, PCPJson);\r\n            \r\n            \r\n            selectedNodeIdList = selectedNodeList.map((d:any)=>{\r\n                return d['Data_id'];\r\n            })\r\n        }else{\r\n            selectedNodeList = [];\r\n            selectedNodeIdList = [];\r\n        }\r\n        \r\n        this.thisSelectedNodeIdList = selectedNodeIdList;\r\n        \r\n        let marginLeft = 20, marginRight = 20;\r\n        let marginTop = 20, marginBottom = 62;\r\n        let projectionHeight = this.props.height - marginBottom - marginTop;\r\n        let gap = 10;\r\n        let projectionWidth = (this.props.width - marginLeft - marginRight) / 4  - gap;\r\n        this.props.changePSSelectedNodes(selectedNodeList.length);\r\n        //changeSelectedNodeIdList(selectedNodeIdList);\r\n        let id_list = [1,2,3,4];\r\n        let showModeOptions = [\r\n            [1, \"GT + 3PT\"],\r\n            [2, \"DEG + CN\"],\r\n            [3, \"P1 + SPD\"],\r\n            [4, \"P1 + KFS\"],\r\n        ]\r\n        let onChangeLines = this.onChangeLines;\r\n        if(selectedNodeIdList.length>0&&selectedNodeIdList.length<300){\r\n        return (\r\n            <div style={{width: \"100%\", height:\"\"+(this.props.height - 10)+\"px\", overflowX: \"scroll\"}}>\r\n            \r\n            \r\n                <div className=\"ViewTitle\">Projection View\r\n                <div style={{float:'right'}}>\r\n                    Links: <Switch checked={this.state.enableLines} onChange={onChangeLines} />\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                     #Nodes: <Tag>{getNodeStatisticStr(this.state.highlightNodeIdList.length, selectedNodeIdList.length)}</Tag></div>\r\n                                \r\n                </div>\r\n                <div className=\"ViewBox\"> \r\n                <svg\r\n                    style={{ height: \"\"+(this.props.height - marginBottom + 10)+\"px\", width: \"\"+this.props.width+\"px\" }}\r\n                    id={\"TopSVGChart_ScatterPlot\"}\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        {this.state.enableLines?(<g key={\"c\"+1} id=\"connectionPath\"></g>):(<g key={\"c\"+2} id=\"connectionPath-Null\"></g>)}\r\n                        {showModeOptions.map((d:any)=>{\r\n                            return    <ProjectionView \r\n                            key={d[0]}\r\n                            id={d[0]} showMode={d[0]} \r\n                             {...this.props} \r\n                             x={marginLeft + (d[0]-1)*(projectionWidth+gap)}\r\n                             y={marginTop}\r\n                             height={projectionHeight} \r\n                             width={projectionWidth} \r\n                             name={d[1]}\r\n                             selectedNodeIdList={selectedNodeIdList}\r\n                             highlightNodeIdList={this.state.highlightNodeIdList}\r\n                             onChangeHighLightNodeIdList={this.onChangeHighLightNodeIdList}\r\n                             renderLines={this.renderLines}/>\r\n                        })}\r\n                        \r\n                </svg>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n        }else{\r\n            return <div style={{width: \"100%\", height:\"\"+(this.props.height - 10)+\"px\", overflowX: \"hidden\"}}>\r\n            \r\n            \r\n            <div className=\"ViewTitle\">Projection View </div>\r\n            \r\n            </div>\r\n        }\r\n        \r\n    }\r\n}\r\n","import SelectedNodeList from '../components/DataRuns/PSView/SelectedNodeList';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeFilters, changeSelectedNodeIdList, changeShowSource, changePSSelectedNodes} from '../actions';\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    filters: state.filters,\r\n    refreshnumber: state.refreshnumber,\r\n    showSource: state.showSource,\r\n    select_inspect_node: state.select_inspect_node,\r\n    PCPJson: state.PSJson\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeSelectedNodeIdList:  (selectedNodeIdList:any) => dispatch(changeSelectedNodeIdList(selectedNodeIdList)),\r\n    changeShowSource: (showSource:boolean) => dispatch(changeShowSource(showSource)),\r\n    changePSSelectedNodes: (PSSelectedNodes:number) => dispatch(changePSSelectedNodes(PSSelectedNodes))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectedNodeList);\r\n","import DataRuns from './DataRuns'\r\nexport default DataRuns;\r\n\r\n\r\n","\r\nimport './DataRuns.css'\r\nimport * as React from \"react\";\r\n//import MyFirstGrid from './MyFirstGrid';\r\nimport GraphViewContainer from '../../container/GraphViewContainer';\r\nimport MessagePassingViewContainer from '../../container/MessagePassingViewContainer';\r\nimport EmbeddingViewContainer from '../../container/EmbeddingViewContainer';\r\nimport FeatureMatrixContainer from '../../container/FeatureMatrixContainer';\r\nimport ControlPanelContainer from '../../container/ControlPanelContainer';\r\nimport PSViewContainer from '../../container/PSViewContainer';\r\nimport SelectedNodeListContainer from '../../container/SelectedNodeListContainer';\r\nimport { getGraphInfo, getGraphBundledInfo } from '../../service/dataService';\r\nimport { Select, Row, Col, Upload, Icon, Button, message, Tag } from 'antd';\r\nimport {getInfectionNodeColor, getInfectionEdgeColor, getLayoutMode} from '../../helper';\r\nimport {Tabs, Table} from 'antd';\r\nimport GridLayout from \"react-grid-layout\";\r\nconst TabPane = Tabs.TabPane\r\nconst d3 = require(\"d3\");\r\nconst Option = Select.Option;\r\n\r\n\r\nexport interface IProps {\r\n    model : number | null,\r\n    graph : number | null,\r\n    dataset_id : number | null,\r\n    explain_id : number | null,\r\n    modelList : any[],\r\n    contentWidth:number,\r\n    contentHeight:number\r\n}\r\nexport interface IState {\r\n    graph_object : any,\r\n    show_mode : number,\r\n    explained_node : number,\r\n    layout_config: any,\r\n    screenWidth: number,\r\n    screenHeight: number\r\n}\r\n\r\nexport default class DataRuns extends React.Component<IProps, IState>{\r\n    public PCPViewRef:any;\r\n    public GraphViewRef:any;\r\n    public FeatureMatrixViewRef:any; \r\n    public ControlPanelRef: any;\r\n    public ProjectionViewRef: any;\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.onShowModeChange = this.onShowModeChange.bind(this);\r\n        this.onExplainNodeChange = this.onExplainNodeChange.bind(this);\r\n        this.onResizeStop = this.onResizeStop.bind(this);\r\n        this.getLayoutConfigWithName = this.getLayoutConfigWithName.bind(this);\r\n        this.getCurrentLayoutConfig = this.getCurrentLayoutConfig.bind(this);\r\n        this.onResize = this.onResize.bind(this);\r\n        this.PCPViewRef = React.createRef();\r\n        this.GraphViewRef = React.createRef();\r\n        this.FeatureMatrixViewRef = React.createRef();\r\n        this.ControlPanelRef = React.createRef();\r\n        this.ProjectionViewRef = React.createRef();\r\n        this.state = {\r\n            graph_object:{\r\n                model : -1,\r\n                graph : -1,  \r\n            },\r\n            show_mode: 1,\r\n            explained_node: 0,\r\n            layout_config: null,\r\n            screenWidth : 0,\r\n            screenHeight: 0\r\n        }\r\n        // show_mode_specification\r\n        // 1 -> graph_input\r\n        // 2 -> graph_target\r\n        // 3 -> graph_output\r\n        // 4 -> Explain_mode\r\n        // Explained_node, default for 0.\r\n\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n     public onResize(){\r\n        this.setState({\r\n            screenHeight: window.innerHeight,\r\n             screenWidth: window.innerWidth\r\n        })\r\n     }  \r\n     componentDidMount(){\r\n        //window.addEventListener('resize', this.onResize)\r\n         this.setState({\r\n             layout_config: this.getWholeLayoutConfig(),\r\n             screenHeight: window.innerHeight,\r\n             screenWidth: window.innerWidth\r\n         })\r\n     }\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        \r\n        return true;\r\n        \r\n    }\r\n   \r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n        \r\n     }\r\n     public async getgraphdata(dataset_id:number, model:number, explain_id:number, graph:number){\r\n        let data = await getGraphInfo(dataset_id,model,explain_id,graph);\r\n        if(data[\"success\"] === true){\r\n            this.setState({\r\n                graph_object: data[\"graph_obj\"]\r\n            })\r\n        }\r\n\r\n     }\r\n     public async getGraphBundledData(dataset_id:number){\r\n         let data = await getGraphBundledInfo(dataset_id);\r\n         if(data[\"success\"] === true){\r\n             this.setState({\r\n                graph_object: data[\"graph_obj\"]\r\n             })\r\n         }\r\n     }\r\n     public getLayoutConfigWithName(name:string){\r\n         let width = 0;\r\n         let height = 0;\r\n         if(name === \"PCPView\"){\r\n            if(this.PCPViewRef){ \r\n                width = this.PCPViewRef.current.offsetWidth;\r\n                height = this.PCPViewRef.current.offsetHeight;\r\n            }\r\n         }else if(name === \"GraphView\"){\r\n             if(this.GraphViewRef){\r\n                 width = this.GraphViewRef.current.offsetWidth;\r\n                 height = this.GraphViewRef.current.offsetHeight;\r\n             }\r\n\r\n         }else if(name === \"FeatureMatrixView\"){\r\n            if(this.FeatureMatrixViewRef){\r\n                width = this.FeatureMatrixViewRef.current.offsetWidth;\r\n                height = this.FeatureMatrixViewRef.current.offsetHeight;\r\n            }\r\n         }else if(name === \"ProjectionView\"){\r\n             if(this.ProjectionViewRef){\r\n                 width = this.ProjectionViewRef.current.offsetWidth;\r\n                 height = this.ProjectionViewRef.current.offsetHeight;\r\n             }\r\n         }else if(name === \"ControlPanel\"){\r\n             if(this.ControlPanelRef){\r\n                 width = this.ControlPanelRef.current.offsetWidth;\r\n                 height = this.ControlPanelRef.current.offsetHeight;\r\n             }\r\n         }\r\n\r\n         return {\r\n             \"width\":width,\r\n             \"height\":height\r\n         }\r\n     }\r\n     public getWholeLayoutConfig(){\r\n        let viewName = [\"PCPView\", \"GraphView\", \"FeatureMatrixView\",\"ControlPanel\", \"ProjectionView\"];\r\n        let layout_config:any = {};\r\n        viewName.forEach((d:any)=>{\r\n            layout_config[d] = this.getLayoutConfigWithName(d);\r\n        })\r\n        return layout_config;\r\n     }\r\n     public getCurrentLayoutConfig(name:string){\r\n         let layout_config = this.state.layout_config;\r\n        if(layout_config){\r\n            if(layout_config[name]){\r\n                return layout_config[name];\r\n            }else{\r\n                return null;\r\n            }\r\n        }else{\r\n            return null;\r\n        }\r\n     }\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n        //console.log('Component did update!')\r\n        if(getLayoutMode() === 3){\r\n            if(prevProps.dataset_id!== this.props.dataset_id){\r\n                if( this.props.dataset_id  && this.props.dataset_id>=0){\r\n                    this.getGraphBundledData(this.props.dataset_id);\r\n                    \r\n                }else{\r\n                    this.setState({\r\n                        graph_object:{\r\n                            model : -1,\r\n                            graph : -1,  \r\n                        }\r\n                    })\r\n                }\r\n            }\r\n            /*\r\n            if(prevState.screenHeight!==this.state.screenHeight\r\n                || prevState.screenWidth !== this.state.screenWidth){\r\n                    this.setState({\r\n                        layout_config: this.getWholeLayoutConfig()\r\n                    })\r\n                }*/\r\n            if(prevProps.contentHeight!==this.props.contentHeight\r\n                || prevProps.contentWidth !== this.props.contentWidth){\r\n                    this.setState({\r\n                        layout_config: this.getWholeLayoutConfig()\r\n                    })\r\n                }   \r\n        }else{\r\n            if(prevProps.graph!== this.props.graph || prevProps.model !== this.props.model\r\n                || prevProps.dataset_id!== this.props.dataset_id || prevProps.explain_id !== this.props.explain_id ){\r\n                if(this.props.graph && this.props.model && this.props.dataset_id && this.props.explain_id\r\n                    && this.props.graph >= 0 && this.props.model >= 0 && this.props.dataset_id>=0 && this.props.explain_id>=0){\r\n                    this.getgraphdata(this.props.dataset_id, this.props.model, this.props.explain_id, this.props.graph);\r\n                    \r\n                }else{\r\n                    this.setState({\r\n                        graph_object:{\r\n                            model : -1,\r\n                            graph : -1,  \r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        \r\n        \r\n     }\r\n     \r\n    public onShowModeChange(ShowMode: number) {\r\n        this.setState({\r\n            show_mode:ShowMode\r\n        })\r\n    }\r\n    public onExplainNodeChange(ExplainedNode: number) {\r\n        this.setState({\r\n            explained_node:ExplainedNode\r\n        })\r\n    }\r\n    public onLayoutChange(layout:any){\r\n        console.log(\"Layout\", layout);\r\n    }\r\n    public onResizeStop(layout:any){\r\n        console.log(\"onResizeStop\", layout);\r\n        console.log(\"Layout\", this.getWholeLayoutConfig());\r\n        this.setState({\r\n            layout_config : this.getWholeLayoutConfig()\r\n        })\r\n        //var width = document.getElementById('a').offsetWidth;\r\n    }\r\n    public render() {\r\n        //console.log(\"Render Again\");\r\n        let {graph_object, show_mode, explained_node} = this.state;\r\n        let {modelList} = this.props;\r\n        //console.log(graph_object)\r\n        let model = -1;\r\n        let graph = -1;\r\n        let dataset_id = -1;\r\n        if(getLayoutMode()===3){\r\n            model = -1;\r\n            graph = -1;\r\n            let common = graph_object.common;\r\n            if(common){\r\n                dataset_id = common.dataset_id;\r\n            }\r\n        }else{\r\n            model = graph_object.model;\r\n            graph = graph_object.graph;\r\n        }\r\n        let generateTips = () =>{\r\n            let tips: any = \"Please select a dataset, a model, an explantion method, and a graph.\";\r\n            if(getLayoutMode() === 3){\r\n                tips = \"Please select a dataset\";\r\n            }\r\n            return(\r\n            <Row style={{marginTop: '6px', marginLeft: '6px'}} gutter={6}>\r\n            <div>{tips}</div>\r\n            </Row>\r\n            )\r\n        }\r\n        \r\n        console.log(\"Dataruns graph_object\", graph_object);\r\n        let generateGraphView = (graph_object: any, show_mode:number, explained_node:number, \r\n            onExplainNodeChange:any, onShowModeChange:any, model:number, modelList:any[], width:number, height:number) => {\r\n            return <GraphViewContainer graph_object={graph_object} \r\n                show_mode={show_mode}\r\n                explained_node={explained_node}\r\n                onExplainNodeChange={onExplainNodeChange}\r\n                onShowModeChange={onShowModeChange}\r\n                model={model}\r\n                modelList={modelList}\r\n                width={width}\r\n                height={height}\r\n                />\r\n        }\r\n        let generateMessagePassingView = (graph_object: any, show_mode:number, \r\n            explained_node:number, onExplainNodeChange:any, onShowModeChange:any, \r\n            model:number, modelList:any[], width: number, height:number) => {\r\n            return <MessagePassingViewContainer graph_object={graph_object} \r\n                show_mode={show_mode}\r\n                explained_node={explained_node}\r\n                onExplainNodeChange={onExplainNodeChange}\r\n                onShowModeChange={onShowModeChange}\r\n                model={model}\r\n                modelList={modelList}\r\n                width={width}\r\n                height={height}\r\n                />\r\n        }\r\n        let generateEmbeddingView = (graph_object: any, show_mode:number, explained_node:number, \r\n            onExplainNodeChange:any, onShowModeChange:any, model:number, modelList:any[], \r\n            width: number, height: number) => {\r\n            return <EmbeddingViewContainer graph_object={graph_object} \r\n                show_mode={show_mode}\r\n                explained_node={explained_node}\r\n                onExplainNodeChange={onExplainNodeChange}\r\n                onShowModeChange={onShowModeChange}\r\n                model={model}\r\n                modelList={modelList}\r\n                width={width}\r\n                height={height}\r\n                />\r\n        }\r\n        let generateFeatureMatrixView = (graph_object: any, show_mode:number, explained_node:number, \r\n            onExplainNodeChange:any, onShowModeChange:any, model:number, modelList:any[], \r\n            width: number, height: number) => {\r\n            return <FeatureMatrixContainer graph_object={graph_object} \r\n                show_mode={show_mode}\r\n                explained_node={explained_node}\r\n                onExplainNodeChange={onExplainNodeChange}\r\n                onShowModeChange={onShowModeChange}\r\n                model={model}\r\n                modelList={modelList}\r\n                width={width}\r\n                height={height}\r\n                />\r\n        }\r\n        let generatePCPView = (graph_object: any, show_mode:number, \r\n            explained_node:number, onExplainNodeChange:any, \r\n            onShowModeChange:any, model:number, modelList:any[], width:number=0, height:number=0) => {\r\n            return   <PSViewContainer graph_object={graph_object} \r\n                show_mode={show_mode}\r\n                explained_node={explained_node}\r\n                onExplainNodeChange={onExplainNodeChange}\r\n                onShowModeChange={onShowModeChange}\r\n                model={model}\r\n                modelList={modelList}\r\n                width={width}\r\n                height={height}\r\n                />\r\n        }\r\n        /*let generateWholeView_backup = () =>{\r\n            return <Tabs\r\n                        defaultActiveKey=\"2\"\r\n                    >\r\n                        <TabPane tab=\"Graph View\" key=\"1\">\r\n                            \r\n                            {generateGraphView(graph_object, show_mode, explained_node, \r\n                                this.onExplainNodeChange, this.onShowModeChange, model, modelList)}\r\n                        </TabPane>\r\n                        <TabPane tab=\"Message Passing View\" key=\"2\">\r\n                            {generateMessagePassingView(graph_object, show_mode, explained_node, \r\n                                this.onExplainNodeChange, this.onShowModeChange, model, modelList)} \r\n                            \r\n                        </TabPane>\r\n                        \r\n                    </Tabs>\r\n        }*/\r\n        // layout is an array of objects, see the demo for more complete usage\r\n        let enableStatic = true;\r\n        let screenheight = window.innerHeight;\r\n        let max_row_num = Math.floor(this.props.contentHeight / 40);\r\n        // small width, height: 1707 724\r\n        // big width, height: 2560 1175\r\n        let ControlPanelH = 3;\r\n        let PSPanelH = max_row_num - ControlPanelH;\r\n        let ProjectionPanelH = Math.floor(max_row_num / 2);\r\n        let RH = max_row_num - ProjectionPanelH;\r\n        // 9 - 9\r\n        // 12 - 17\r\n        let layout = [\r\n            {i: 'a', x: 0, y: ControlPanelH, w: 6, h: PSPanelH, static:enableStatic}, // PS View\r\n            {i: 'b', x: 6, y: ProjectionPanelH, w: 11, h: RH, static:enableStatic}, // Graph View\r\n            {i: 'c', x: 17, y: ProjectionPanelH, w: 7, h: RH, static:enableStatic}, // Feature Matrix View\r\n            {i: 'd', x: 0, y: 0, w: 6, h: ControlPanelH, static:enableStatic},  // Control Panel\r\n            {i: 'e', x: 6, y: 0, w: 18, h: ProjectionPanelH, static:enableStatic}  // Projection View\r\n        ];\r\n        \r\n\r\n\r\n        let generateWholeView = () =>{\r\n            let layout_mode:any = getLayoutMode();\r\n            let screenwidth = window.innerWidth;\r\n            let screenheight = window.innerHeight;\r\n            let viewwidth = screenwidth * 1/3;\r\n            let viewheight = screenheight* 0.45;\r\n            if(layout_mode === 1){\r\n                // Layout Style 1\r\n                return (\r\n                    <Row style={{marginTop: '0px', marginLeft: '6px'}} gutter={6}>\r\n                        <Row gutter={6}>\r\n                            <Col span={4}>\r\n                                <div style={{width: \"100%\", overflowX: \"scroll\", height:\"\"+(screenheight- 50)+\"px\"}}>\r\n                                 {generatePCPView(graph_object, show_mode, explained_node, \r\n                                        this.onExplainNodeChange, this.onShowModeChange, model, modelList)} \r\n                                </div>\r\n                            </Col>\r\n                            <Col span={14}>\r\n                                    {generateGraphView(graph_object, show_mode, explained_node, \r\n                                    this.onExplainNodeChange, this.onShowModeChange, model, modelList, \r\n                                     viewwidth * 3 * 14 / 24, viewheight / 0.45 * 0.7)}\r\n                            </Col>\r\n                            <Col span={6}>\r\n                                <Row>\r\n                                    {generateMessagePassingView(graph_object, show_mode, explained_node, \r\n                                        this.onExplainNodeChange, this.onShowModeChange, model, modelList, \r\n                                        viewwidth * 3 * 6 / 24, viewheight / 0.45 * 0.25)} \r\n                                </Row>\r\n                                <Row>\r\n                                    {generateEmbeddingView(graph_object, show_mode, explained_node, \r\n                                        this.onExplainNodeChange, this.onShowModeChange, model, modelList,\r\n                                    viewwidth* 3 * 6 / 24, viewheight/ 0.45 * 0.25)} \r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Row>\r\n                        <Row>\r\n                                {generateFeatureMatrixView(graph_object, show_mode, explained_node, \r\n                                        this.onExplainNodeChange, this.onShowModeChange, model, modelList,\r\n                                    viewwidth* 3 , viewheight / 0.45)} \r\n                        </Row>\r\n                    </Row>)\r\n            }else if(layout_mode===2){\r\n                return (<Row style={{marginTop: '0px', marginLeft: '6px'}} gutter={6}>\r\n                        <Row>\r\n                            <Col span={24}>\r\n                                <div style={{width: \"100%\", height:\"\"+(screenheight*0.31)+\"px\"}}>\r\n                            {generatePCPView(graph_object, show_mode, explained_node, \r\n                                        this.onExplainNodeChange, this.onShowModeChange, model, modelList)} \r\n                            </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row gutter={6}>\r\n                            <Col span={16}>\r\n                            \r\n                            {generateGraphView(graph_object, show_mode, explained_node, \r\n                            this.onExplainNodeChange, this.onShowModeChange, model, modelList, \r\n                        viewwidth * 3 * 16 / 24, viewheight )}\r\n                            </Col>\r\n                            <Col span={8}>\r\n                            {generateMessagePassingView(graph_object, show_mode, explained_node, \r\n                                    this.onExplainNodeChange, this.onShowModeChange, model, modelList, \r\n                                    viewwidth * 3 * 8 / 24, viewheight)} \r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            {generateFeatureMatrixView(graph_object, show_mode, explained_node, \r\n                                    this.onExplainNodeChange, this.onShowModeChange, model, modelList,\r\n                                viewwidth* 3 , viewheight / 0.45)} \r\n                        </Row>\r\n                    </Row>\r\n                )\r\n            }else if(layout_mode === 3){\r\n                /*\r\n                return (<Row style={{marginTop: '0px', marginLeft: '6px'}} gutter={6}>\r\n                        <Row gutter={6}>\r\n                            <Col span={6}>\r\n                                <div style={{width: \"100%\", height:\"\"+(screenheight - 50)+\"px\", overflowX: \"scroll\"}}>\r\n                                    \r\n                                 {(dataset_id>=0)?generatePCPView(graph_object, show_mode, explained_node, \r\n                                        this.onExplainNodeChange, this.onShowModeChange, model, modelList):\r\n                                        <div>\r\n                                                <div className=\"ViewTitle\">Control Panel</div>\r\n                                                <div className=\"ViewBox\">\r\n                                                        <SidePanelContainer />\r\n                                                </div>\r\n                                        </div>}\r\n                                </div>\r\n                            </Col>\r\n                            <Col span={18}>\r\n                            \r\n                                    {(dataset_id>=0)?generateGraphView(graph_object, show_mode, explained_node, \r\n                                    this.onExplainNodeChange, this.onShowModeChange, model, modelList, \r\n                                viewwidth * 3 * 18 / 24, viewheight/0.45*0.90 ):<div />}\r\n                            </Col>\r\n                            \r\n                        </Row>\r\n                        <Row>\r\n                            {(dataset_id>=0)?generateFeatureMatrixView(graph_object, show_mode, explained_node, \r\n                                    this.onExplainNodeChange, this.onShowModeChange, model, modelList,\r\n                                viewwidth* 3 , viewheight / 0.45):<div />} \r\n                        </Row>\r\n                    </Row>\r\n                )*/\r\n                return <GridLayout className=\"layout\" layout={layout} \r\n                cols={24} rowHeight={30} width={screenwidth} onLayoutChange={this.onLayoutChange}\r\n                onResizeStop={this.onResizeStop}>\r\n                    <div className=\"PanelBox\" key=\"a\" ref={this.PCPViewRef}>\r\n                        \r\n                                    \r\n                            {(dataset_id>=0 && this.getCurrentLayoutConfig(\"PCPView\"))?\r\n                            generatePCPView(graph_object, show_mode, explained_node, \r\n                                    this.onExplainNodeChange, this.onShowModeChange, model, modelList\r\n                                    ,this.getCurrentLayoutConfig(\"PCPView\")[\"width\"], this.getCurrentLayoutConfig(\"PCPView\")[\"height\"]):\r\n                                    <div />}\r\n                            \r\n\r\n                    </div>\r\n                    <div className=\"PanelBox\" key=\"b\" ref={this.GraphViewRef}>\r\n                    {(dataset_id>=0 && this.getCurrentLayoutConfig(\"GraphView\"))?generateGraphView(graph_object, show_mode, explained_node, \r\n                                    this.onExplainNodeChange, this.onShowModeChange, model, modelList, \r\n                                    this.getCurrentLayoutConfig(\"GraphView\")[\"width\"], this.getCurrentLayoutConfig(\"GraphView\")[\"height\"]):<div />}\r\n                    </div>\r\n                    <div className=\"PanelBox\" key=\"c\" ref={this.FeatureMatrixViewRef}>\r\n                    {(dataset_id>=0 && this.getCurrentLayoutConfig(\"FeatureMatrixView\"))?generateFeatureMatrixView(graph_object, show_mode, explained_node, \r\n                                    this.onExplainNodeChange, this.onShowModeChange, model, modelList,\r\n                                    this.getCurrentLayoutConfig(\"FeatureMatrixView\")[\"width\"], this.getCurrentLayoutConfig(\"FeatureMatrixView\")[\"height\"]):<div />} \r\n                    </div>\r\n                    <div className=\"PanelBox\" key=\"d\" ref={this.ControlPanelRef}>\r\n                        <ControlPanelContainer />\r\n                    </div>\r\n                    <div className=\"PanelBox\" key=\"e\" ref={this.ProjectionViewRef}>\r\n                    {(dataset_id>=0 && this.getCurrentLayoutConfig(\"ProjectionView\"))?(\r\n                    <SelectedNodeListContainer height={this.getCurrentLayoutConfig(\"ProjectionView\")[\"height\"]} width={this.getCurrentLayoutConfig(\"ProjectionView\")[\"width\"]}/>)\r\n                    :(<div />)}\r\n\r\n                    </div>\r\n                </GridLayout>\r\n            }else{\r\n                return <div>Unknown Layout Style</div>\r\n            }\r\n        }\r\n        if(getLayoutMode() === 3){\r\n\r\n        }\r\n        if(getLayoutMode() === 3){\r\n            return (\r\n                    generateWholeView()\r\n                    \r\n            )\r\n        }else{\r\n            return (\r\n                (graph>=0 && model >=0)?(\r\n                    generateWholeView())\r\n                    :\r\n                    (generateTips()\r\n                    )\r\n            )\r\n        }\r\n        \r\n\r\n    }\r\n}\r\n\r\n","import DataRuns from '../components/DataRuns'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    model: state.model,\r\n    graph : state.graph,\r\n    dataset_id : state.dataset_id,\r\n    explain_id : state.explain_id,\r\n    modelList : state.modelList\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    \r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DataRuns);\r\n\r\n\r\n\r\n","import { Col, Layout, Row } from 'antd';\n\nimport React from 'react';\nimport logo from './logo2.png';\nimport './App.css';\nimport DataRunsContainer from '../container/DataRunsContainer';\n// import DataView from \"./DataView\";\n//import SidePanel from '../components/SidePanel';\nimport { getLayoutMode} from '../helper';\nconst { Content, Header } = Layout;\nexport interface IProps{\n\n}\nexport interface IState {\n    contentWidth:number,\n    contentHeight:number,\n    screenWidth:number,\n    screenHeight:number\n}\nclass App extends React.Component<IProps, IState> {\n  public ContentRef:any;\n  constructor(props:IProps) {\n      super(props);\n      this.ContentRef = React.createRef();\n      this.onResize = this.onResize.bind(this);\n      this.state = {\n          contentWidth : 0,\n          contentHeight: 0,\n          screenHeight: 0,\n          screenWidth :0\n      }\n\n  }\n  public getLayoutConfig(){\n    let contentWidth:number = 0;\n    let contentHeight:number = 0;\n    if(this.ContentRef){\n      contentWidth = this.ContentRef.current.offsetWidth;\n      contentHeight = this.ContentRef.current.offsetHeight;\n    }\n    return {\n      contentWidth:contentWidth, \n      contentHeight:contentHeight\n    }\n  }\n  public onResize(){\n    this.updateLayoutState();\n }  \n public updateLayoutState(){\n    let contentLayout = this.getLayoutConfig();\n    let contentWidth = contentLayout.contentWidth;\n    let contentHeight = contentLayout.contentHeight;\n    //console.log(\"contentWidth, height\", contentWidth, contentHeight)\n   this.setState({\n      contentWidth:contentWidth,\n      contentHeight:contentHeight,\n       screenHeight: window.innerHeight,\n       screenWidth: window.innerWidth\n   })\n }\n componentDidMount(){\n    window.addEventListener('resize', this.onResize)\n    this.updateLayoutState();\n }\n componentDidUpdate(prevProps:IProps, prevState:IState) {\n  // if(prevState.contentWidth!==this.state.contentWidth || )\n  //this.updateLayoutState();\n }\n  public render() {\n    let {screenWidth, screenHeight, contentWidth, contentHeight} = this.state;\n    return (\n      <Layout className=\"app\" >\n          <Header className='appHeader'>\n          GNNVis\n                  <img src={logo} className='appLogo' alt-text=\"logo\"/>\n          </Header>\n          <Content className='appContent' >\n              <div style={{ \"height\": \"100%\", \"width\":\"100%\" }} ref={this.ContentRef}>\n                {(contentWidth>0 && contentHeight >0)?<DataRunsContainer contentWidth={contentWidth} contentHeight={contentHeight}/>:<div />}\n              </div>\n              <div id=\"tooltip_proj\" />\n              <div id=\"tooltip_matrix\" />\n          </Content>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { MODEL_CHANGE, GRAPH_CHANGE, INIT_MODEL_LIST, DATASET_ID_CHANGE,\r\n  EXPLAIN_METHOD_ID_CHANGE, INIT_DATASET_LIST, INIT_EXPLAIN_LIST, \r\n  INIT_GRAPH_LIST, FILTERS_CHANGE, SELECTED_NODE_ID_LIST_CHANGE,\r\n  SELECTED_MESSAGE_PASSING_NODE_ID_LIST_CHANGE, SHOW_SOURCE_CHANGE,\r\nSPECIFIC_NODE_ID_LIST_CHANGE, SELECT_INSPECT_NODE_CHANGE,CLEAR_ID_INFO, PREV_GRAPH_JSON_CHANGE,\r\nMATRIX_FILTERS_CHANGE,MATRIX_ROW_FILTERS_CHANGE, INSPECT_CATEGORY_LIST_CHANGE, PSJSON_CHANGE,PSSELECTEDNODES_CHANGE, EXTENDED_MODE_CHANGE} from '../constants';\r\nimport {StoreState} from '../types';\r\nimport {getDefaultInspectCategoryOptions} from '../helper';\r\nconst initial_state : StoreState = {\r\n    model : null,\r\n    graph : null,\r\n    dataset_id : null,\r\n    explain_id:null,\r\n    refreshnumber: 0,\r\n    showSource: false,\r\n    modelList : [],\r\n    datasetList: [],\r\n    explainList: [],\r\n    graphList: [],\r\n    filters: {},\r\n    selectedNodeIdList: [],\r\n    selectedMessagePassingNodeIdList: [],\r\n    specificNodeIdList: [],\r\n    select_inspect_node : 0,\r\n    prevGraphJson: null,\r\n    matrixFilters: {\r\n      refreshnumber : 0\r\n    },\r\n    matrixRowFilters:{\r\n      refreshnumber : 0\r\n    },\r\n    InspectCategoryList: getDefaultInspectCategoryOptions(),\r\n    PSJson: {},\r\n    PSSelectedNodes:0,\r\n    extendedMode:1\r\n}\r\n// 处理并返回 state \r\nexport default (state = initial_state, action:any): StoreState => {\r\n   \r\n    switch (action.type) {\r\n      case MODEL_CHANGE:\r\n        return {\r\n          ...state,\r\n          model : action.model\r\n        };\r\n      case GRAPH_CHANGE:\r\n        return {\r\n          ...state,\r\n          graph : action.graph\r\n        };\r\n      case INIT_MODEL_LIST:\r\n        return {\r\n          ...state,\r\n          modelList: action.modelList\r\n        };\r\n      case DATASET_ID_CHANGE:\r\n        return {\r\n          ...state,\r\n          dataset_id: action.dataset_id,\r\n        };\r\n      case EXPLAIN_METHOD_ID_CHANGE:\r\n        return {\r\n          ...state,\r\n          explain_id: action.explain_id\r\n        };\r\n      case INIT_DATASET_LIST:\r\n        return {\r\n          ...state,\r\n          datasetList: action.datasetList\r\n        };\r\n      case INIT_EXPLAIN_LIST:\r\n        return {\r\n          ...state,\r\n          explainList: action.explainList\r\n        };\r\n      case INIT_GRAPH_LIST:\r\n          return {\r\n            ...state,\r\n            graphList: action.graphList\r\n          };\r\n      case FILTERS_CHANGE:\r\n        \r\n         //console.log(\"Filters Change!\", action.filters);\r\n          return {\r\n            ...state,\r\n            refreshnumber: state.refreshnumber + 1,\r\n            filters: action.filters\r\n          }\r\n      case SELECTED_NODE_ID_LIST_CHANGE:\r\n        //console.log(\"selectedNodeIdList Store State Change\",action.selectedNodeIdList);\r\n        return {\r\n          ...state,\r\n          selectedNodeIdList: action.selectedNodeIdList\r\n        }\r\n      case SELECTED_MESSAGE_PASSING_NODE_ID_LIST_CHANGE:\r\n        return {\r\n          ...state,\r\n          selectedMessagePassingNodeIdList: action.selectedMessagePassingNodeIdList\r\n        }\r\n      case SHOW_SOURCE_CHANGE:\r\n        return {\r\n          ...state,\r\n          showSource: action.showSource\r\n        }\r\n      case SPECIFIC_NODE_ID_LIST_CHANGE:\r\n        //console.log(\"SpecificNodeIdListChange\",  action.specificNodeIdList);\r\n        return {\r\n          ...state,\r\n          specificNodeIdList: action.specificNodeIdList\r\n        }\r\n      case SELECT_INSPECT_NODE_CHANGE:\r\n        //console.log(\"Select inspect node change\", action.select_inspect_node);\r\n        return {\r\n          ...state,\r\n          select_inspect_node: action.select_inspect_node\r\n        }\r\n      case CLEAR_ID_INFO:\r\n        return {\r\n          ...state,\r\n          filters: {},\r\n          selectedNodeIdList: [],\r\n          selectedMessagePassingNodeIdList: [],\r\n          specificNodeIdList: [],\r\n          select_inspect_node : 0\r\n        }\r\n      case PREV_GRAPH_JSON_CHANGE:\r\n        return {\r\n          ...state,\r\n          prevGraphJson: action.prevGraphJson\r\n        }\r\n      case MATRIX_FILTERS_CHANGE:\r\n        return {\r\n          ...state,\r\n          matrixFilters: action.matrixFilters\r\n        }\r\n      case MATRIX_ROW_FILTERS_CHANGE:\r\n        //console.log(\"rowmatrix\",action.matrixRowFilters);\r\n        return {\r\n          ...state,\r\n          matrixRowFilters: action.matrixRowFilters\r\n        }\r\n      case INSPECT_CATEGORY_LIST_CHANGE:\r\n        return {\r\n          ...state,\r\n          InspectCategoryList: action.inspectCategoryList\r\n        }\r\n      case PSJSON_CHANGE:\r\n        return {\r\n          ...state,\r\n          PSJson: action.PSJson\r\n        }\r\n      case PSSELECTEDNODES_CHANGE:\r\n        return {\r\n          ...state,\r\n          PSSelectedNodes: action.PSSelectedNodes\r\n        }\r\n      case EXTENDED_MODE_CHANGE:\r\n        return {\r\n          ...state,\r\n          extendedMode: action.extendedMode\r\n        }\r\n      default:\r\n        return state\r\n    }\r\n}\r\n\r\n\r\n//import { DECREMENT, INCREMENT } from '../constants';\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './reducer'; \nimport \"./react_grid_layout_style.css\"\nimport \"./react_resizable_styles.css\"\n// 1、创建 store\nconst store = createStore(reducer);\n\nReactDOM.render(// 2、然后使用react-redux的Provider将props与容器连通起来\n    <Provider store={ store }>\n        <App />\n    </Provider> \n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}